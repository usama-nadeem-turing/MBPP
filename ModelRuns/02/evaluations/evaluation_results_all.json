[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_Occ(s, ch):\n    # Find all occurrences of the character in the string\n    indices = [i for i, c in enumerate(s) if c == ch]\n    \n    # Remove the first occurrence using list comprehension\n    s = ''.join([c for i, c in enumerate(s) if i not in indices[:1]])\n    \n    # Remove the second occurrence (if it exists)\n    if len(indices) > 1:\n        s = ''.join([c for i, c in enumerate(s) if i not in indices[1:]])\n    \n    return s",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_matrix(matrix):\n    # Sort each row individually based on the sum of its elements\n    sorted_matrix = [[row[i] for i, row in enumerate(sorted(zip(*matrix), key=sum))] for j, row in enumerate(matrix)]\n    return sorted_matrix",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_common(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_count = 0\n    most_common_words = []\n    for word, count in word_counts.items():\n        if count > max_count:\n            most_common_words = [(word, count)]\n            max_count = count\n        elif count == max_count:\n            most_common_words.append((word, count))\n    \n    return most_common_words",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(base_length, side_length_1, side_length_2):\n    # Calculate the area of the base triangle using Heron's formula\n    s = (base_length + side_length_1 + side_length_2) / 2\n    area_of_base_triangle = (s * (s - base_length) * (s - side_length_1) * (s - side_length_2)) ** 0.5\n    \n    # Calculate the volume of the triangular prism\n    volume = area_of_base_triangle * side_length_1\n    \n    return volume",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_lowerstring(input_string):\n    # Split the input string using lowercase letters as delimiters\n    return re.split('[a-z]', input_string)",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression to find lowercase letters joined with an underscore\n    pattern = '[a-z]+_[a-z]+'\n    \n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(string1, string2):\n    result = ''\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result\n\n# Test cases\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))  # Expected output: 'bacuve'\nprint(remove_dirty_chars(\"digitalindia\", \"talent\"))  # Expected output: 'digiidi'\nprint(remove_dirty_chars(\"exoticmiles\", \"toxic\"))  # Expected output: 'emles'",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    This function checks if there is at least one duplicated number in an array of integers.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    bool: True if there is at least one duplicated number, False otherwise\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(n):\n    # Check if n satisfies the Woodall number condition\n    if ((n - 1) & (n + 1)) == 0:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiples_of_num(n, m):\n    result = []\n    for i in range(m):\n        if i * n < 100:\n            result.append(i * n)\n    return result",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def maximum_Sum(lst_of_lsts):\n    max_sum = float('-inf')\n    for lst in lst_of_lsts:\n        current_sum = sum(sum(sublist) for sublist in lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_num):\n    # Convert binary string to integer\n    decimal_value = int(binary_num, 2)\n    return decimal_value\n\n# Test cases to verify the correctness of the function\nassert binary_to_decimal('100') == 4\nassert binary_to_decimal('1011') == 11\nassert binary_to_decimal('1101101') == 109",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Product(arr, n): \n    prod = 1\n    for i in range(0, n): \n        if arr[i] != arr.count(arr[i]): \n            prod *= arr[i] \n    return prod",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the provided list contain exactly k elements.\n    \n    Args:\n    - tuple_list (list of tuple): The list of tuples to be checked.\n    - k (int): The number of elements each tuple should contain.\n    \n    Returns:\n    - bool: True if every tuple contains exactly k elements, False otherwise.\n    \"\"\"\n    for item in tuple_list:\n        if len(item) != k:\n            return False\n    return True\n\n# Test cases\nprint(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4)) # Expected output: True\nprint(check_k_elements([(7, 7, 7), (7, 7)], 7)) # Expected output: True\nprint(check_k_elements([(9, 9), (9, 9, 9, 9)], 7)) # Expected output: False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(lst):\n    # Use a list comprehension to filter out numbers and keep only strings\n    result = [s for s in lst if not any(c.isdigit() for c in s)]\n    return result",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    result = 1\n    if n < k:\n        return \"Invalid input\"\n    for i in range(1, k+1):\n        result = result * (n - i + 1) // i\n    return int(result)",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 0",
      "Test 2: FAIL - 0",
      "Test 3: FAIL - 0"
    ],
    "generated_code": "def get_Odd_Occurrence(arr, n):\n    count = {}\n    \n    # Counting occurrences of each element in the array\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Finding the element with an odd occurrence\n    for j in range(n):\n        if count[j % n] % 2 != 0:\n            return j % n",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Check for each character in the string\n    for i in range(n):\n        for j in range(i + 1, n + 1):  # Ensure j is always greater than i\n            if s[i] == s[j - 1]:  # Characters at positions i and j-1 match\n                count += 1\n                \n    return count\n\n# Test Cases\nprint(count_Substring_With_Equal_Ends(\"abc\"))  # Expected output: 3\nprint(count_Substring_With_Equal_Ends(\"abcda\"))  # Expected output: 6\nprint(count_Substring_With_Equal_Ends(\"ab\"))  # Expected output: 2",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef func(lists,k):\n    result = []\n    for list_ in lists:\n        for num in list_:\n            if len(result) < k:\n                heapq.heappush(result, num)\n            elif num > result[0]:\n                heapq.heapreplace(result, num)\n    return result\n\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3))\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1))\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5))",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 2: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 3: FAIL - name 'max_Prime_Factors' is not defined"
    ],
    "generated_code": "def max_prime_factors(n):\n    i = 2\n    factors = []\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return max(factors)\n\n# Test cases\nprint(max_prime_factors(15))  # Expected output: 5\nprint(max_prime_factors(6))   # Expected output: 3\nprint(max_prime_factors(2))   # Expected output: 2",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 2: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 3: FAIL - name 'decimal_To_Binary' is not defined"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a given decimal number to its binary representation.\n    \n    Args:\n    - decimal_number (int): The decimal number to be converted to binary.\n    \n    Returns:\n    - str: The binary representation of the given decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    binary = \"\"\n    while decimal_number > 0:\n        binary = str(decimal_number % 2) + binary\n        decimal_number //= 2\n    return binary\n\n# Test cases\nprint(decimal_to_binary(10)) # Expected output: '1010'\nprint(decimal_to_binary(1)) # Expected output: '1'\nprint(decimal_to_binary(20)) # Expected output: '10100'",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_missing(nums, n):\n    for i in range(len(nums)):\n        if nums[i] != i + 1:\n            return i + 1\n    return len(nums) + 1\n\n# Test cases\nprint(find_missing([1,2,3,5],4))  # Output: 4\nprint(find_missing([1,3,4,5],4))  # Output: 2\nprint(find_missing([1,2,3,5,6,7],5))  # Output: 4",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    Parameters:\n    n (int): The position in the sequence of rectangular numbers\n    \n    Returns:\n    int: The n-th rectangular number\n    \"\"\"\n    return n * (n + 1)\n\n# Test cases\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - integer division or modulo by zero",
      "Test 2: FAIL - integer division or modulo by zero",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def find_Nth_Digit(num_1, num_2, n):\n    # Convert both numbers to strings for easy manipulation\n    str_num_1 = str(num_1)\n    str_num_2 = str(num_2)\n\n    # Find the last digits of both numbers\n    last_digit_1 = int(str_num_1[-1])\n    last_digit_2 = int(str_num_2[-1])\n\n    # If the first number has fewer digits than the second one\n    if len(str_num_1) < len(str_num_2):\n        # Calculate the position within the larger number where we need to insert the new digit\n        pos = (n - 1) // len(str_num_1)\n        result = (last_digit_2 * 10 ** (len(str_num_2) - 1)) + (pos + 1) % 10\n    else:\n        # Adjust the position calculation based on the length difference\n        pos = (n - 1) // (len(str_num_2) - len(str_num_1))\n        result = (last_digit_1 * 10 ** (len(str_num_1) - 1)) + ((pos + 1) % 10)\n\n    return result",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    # Sort the list using key=lambda to handle both integer and string elements\n    return sorted(lst, key=lambda x: (isinstance(x, int), x))",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def div_even_odd(arr):\n    if len(arr) % 2 == 0:\n        return arr[0]\n    else:\n        return arr[-1]",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(input_str):\n    \"\"\"\n    Rearranges the input string such that no two consecutive characters are the same.\n    \n    Args:\n    input_str (str): The input string consisting of lowercase English letters.\n    \n    Returns:\n    str: A new string where no two consecutive characters are identical.\n    \"\"\"\n    char_counts = Counter(input_str)\n    result = []\n    for char in sorted(char_counts.keys()):\n        count = char_counts[char]\n        while count > 0:\n            result.append(char)\n            count -= 1\n    return ''.join(result)\n\n# Check function with provided data points\nprint(rearange_string(\"aab\"))  # Expected output: 'aba'\nprint(rearange_string(\"aabb\"))  # Expected output: 'abab'\nprint(rearange_string(\"abccdd\"))  # Expected output: 'cdabcd'",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lst_of_lsts):\n    # Flatten the nested list and count the occurrences of each element\n    flat_list = sum(lst_of_lsts, [])\n    return dict(Counter(flat_list))",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Test cases\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # [2, 4, 6, 8, 10]\nprint(filter_evennumbers([10,20,45,67,84,93])) # [10, 20, 84]\nprint(filter_evennumbers([5,7,9,8,6,4,3])) # [8, 6, 4]",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, n):\n    count = {}\n    \n    for i in arr:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n    \n    result = 0\n    for key, value in count.items():\n        if value > 1 and key * value == n:\n            result += key * value\n    \n    return result\n\n# Test cases\nprint(find_Sum([1,2,3,1,1,4,5,6], 8)) # Expected output: 3\nprint(find_Sum([1,2,3,1,1], 5)) # Expected output: 3\nprint(find_Sum([1,1,2], 3)) # Expected output: 2",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define a regex pattern for finding sequences of lowercase letters joined with an underscore\n    pattern = '[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with provided data points\nprint(text_match(\"aab_cbbbc\"))  # Expected output: \"Found a match!\"\nprint(text_match(\"aab_Abbbc\"))  # Expected output: \"Not matched!\"\nprint(text_match(\"Aaab_abbbc\")) # Expected output: \"Not matched!\"",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_string(text):\n    # The regex pattern will check if the 'text' starts with 'python'\n    pattern = '^python'\n    \n    # Search for the pattern in the input text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef get_gcd(arr: List[int]) -> int:\n    def recursive_gcd(a, b):\n        if b == 0:\n            return a\n        return recursive_gcd(b, a % b)\n    \n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = recursive_gcd(result, arr[i])\n    return result",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_distinct(nums):\n    \"\"\"\n    Check if all elements in the list nums are unique.\n    \n    Args:\n        nums (list): A list of integers.\n        \n    Returns:\n        bool: True if all elements are distinct, otherwise False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Calculate the factorial of a and modulo it with 10\n    mod_a = pow(a, a - 1, 10)\n    # Calculate the factorial of b and modulo it with 10\n    mod_b = pow(b, b - 1, 10)\n    \n    # Multiply mod_a and mod_b\n    result = (mod_a * mod_b) % 10\n    \n    return result",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(number):\n    # Initialize an empty list to store odd bits\n    odd_bits = []\n    \n    # Iterate over each bit in the binary representation of the number\n    for i in range(32):  # Since we're working with 32-bit numbers\n        if number & 1:  # Check if the current bit is odd\n            odd_bits.append(1 << i)  # Add the bit to the list\n        else:\n            odd_bits.append(0 << i)  # Set the bit to 0\n    \n    # Return the sum of the odd bits to get the final result\n    return sum(odd_bits)",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return matrix[index]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)) # Output: [2, 5, 1]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(lst, key=lambda x: len(x), default=())\n\nmin_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\nmin_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\nmin_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    # Check if all sides of the triangle are equal\n    return a == b and b == c\n\n# Test cases\nprint(check_equilateral(6, 8, 12) == False)\nprint(check_equilateral(6, 6, 12) == False)\nprint(check_equilateral(6, 6, 6) == True)",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'check_Eequality' is not defined. Did you mean: 'check_Equality'?"
    ],
    "generated_code": "def check_Equality(s):\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Test cases\nprint(check_Eequality('abcda'))  # Output: Equal\nprint(check_Eequality('ab'))     # Output: Not Equal\nprint(check_Eequality('mad'))    # Output: Not Equal",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array 'arr' in ascending order using the Counting Sort algorithm.\n    \n    Parameters:\n    arr (list): The list of integers to be sorted.\n    \n    Returns:\n    list: A new list containing the elements of 'arr' sorted in ascending order.\n    \"\"\"\n    if not arr:\n        return []\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    count_arr = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count_arr[num - min_val] += 1\n    \n    sorted_index = 0\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            arr[sorted_index] = i + min_val\n            count_arr[i] -= 1\n            sorted_index += 1\n    \n    return arr",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tn_gp(t, n, r):\n    return t * (r ** (n - 1))",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(num):\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Check if num is one less than twice its reverse\n    return num == 2 * reversed_num - 1",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max_Num(digits,n_digits):\n    # Sort the list of digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Convert the sorted digits into an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n    \n    # Ensure the maximum number has at least n_digits digits\n    while len(str(max_num)) < n_digits:\n        # If more than one digit is needed, add '0's before the number\n        if n_digits > 1 and str(max_num)[n_digits-1] == '0':\n            max_num *= 10 + int(n_digits)\n        \n        # If two or more consecutive numbers need to be increased, skip it\n        for i in range(len(sorted_digits)-1, -1, -1):\n            if str(sorted_digits[i])[len(str(sorted_digits[i]))-1] != '9' and str(sorted_digits[i+1])[0:len(str(sorted_digits[i]))-1] == str(sorted_digits[i])[len(str(sorted_digits[i])):]:\n                continue\n                \n            else:\n                new_digit = int(str(sorted_digits[i])[:len(str(sorted_digits[i]))-1]) + 1\n                sorted_digits[i] = str(new_digit)\n                \n                break\n    \n    return max_num",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def opposite_Signs(a, b):\n    \"\"\"\n    Function to determine if the two given integers have opposite signs.\n    \n    Parameters:\n    a (int): First integer for comparison.\n    b (int): Second integer for comparison.\n    \n    Returns:\n    bool: True if the numbers have opposite signs, False otherwise.\n    \"\"\"\n    return a*b < 0\n\n# Test cases\nprint(opposite_Signs(1, -2))  # Expected output: True\nprint(opposite_Signs(3, 2))   # Expected output: False\nprint(opposite_Signs(-10, -10))  # Expected output: False",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_octagonal(n):\n    # Calculate the formula for the nth octagonal number and check if it matches n.\n    result = ((2*n - 1)**2 + 7*(n - 1)) // 6\n    return result == n\n\n# Test the function with provided data points\nprint(is_octagonal(5))   # Expected output: True\nprint(is_octagonal(10))  # Expected output: True\nprint(is_octagonal(15))  # Expected output: True",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'jarr' is not defined. Did you mean: 'arr'?"
    ],
    "generated_code": "def max_len_sub(arr, k):\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    # Initialize the first element\n    for i in range(1, k + 1):\n        dp[0][i] = abs(arr[0] % k - i)\n    \n    # Fill the DP table\n    for i in range(1, n):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j+1])\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-jarr[i] % k], dp[i-1][j-jarr[i] % k + k])\n                \n    # Find the minimum value in the last row and subtract it from 'k'\n    return k - max(max(dp[-1]) for d in zip(*dp))\n\n# Example test cases\nprint(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))  # Output: 5\nprint(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7))  # Output: 4\nprint(max_len_sub([9, 11, 13, 15, 18], 5))       # Output: 1",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substrings(s, k):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            if current_sum == k:\n                count += 1\n    return count",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(lst):\n    return min(lst)\n\n# Test cases\nprint(smallest_num([10, 20, 1, 45, 99]))  # Expected output: 1\nprint(smallest_num([1, 2, 3]))            # Expected output: 1\nprint(smallest_num([45, 46, 50, 60]))     # Expected output: 45",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_difference(lst):\n    \"\"\"\n    Finds the maximum difference between available pairs in the given tuple list.\n    \n    Args:\n    lst (list of tuples): A list of tuples where each tuple represents a pair of numbers.\n    \n    Returns:\n    int: The maximum difference between any two numbers in the list of pairs.\n    \"\"\"\n    # Initialize variables to store the minimum value and maximum difference found so far\n    min_val = float('inf')\n    max_diff = -float('inf')\n\n    for first, second in lst:\n        # Calculate the current difference\n        diff = second - first\n        \n        # Update the maximum difference if the current one is greater\n        if diff > max_diff:\n            max_diff = diff\n        \n        # Update the minimum value encountered so far\n        if first < min_val:\n            min_val = first\n\n    return max_diff\n\n# Test cases\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    else:\n        first = lst[0]\n        rest = lst[1:]\n        if isinstance(first, int):\n            return first + recursive_list_sum(rest)\n        elif isinstance(first, list):\n            return recursive_list_sum(first) + recursive_list_sum(rest)",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(numbers):\n    # Initialize counter for positive numbers\n    positive_count = 0\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # If the number is greater than zero, increment the counter\n        if num > 0:\n            positive_count += 1\n            \n    # Return the total count of positive numbers\n    return positive_count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n)) + bell_number(n-1)\n\n# Test cases to verify the correctness of the solution\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    \n    increasing = arr[0] < arr[1]\n    decreasing = arr[0] > arr[1]\n\n    for i in range(2, len(arr)):\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        elif decreasing and arr[i] > arr[i-1]:\n            return False\n    \n    return True",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(list1, list2):\n    for i in range(len(list1) - len(list2) + 1):\n        if list1[i:i+len(list2)] == list2:\n            return True\n    return False",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuple_list, expected_length):\n    \"\"\"\n    This function checks if all tuples in the provided list have the same length.\n    \n    :param tuple_list: A list of tuples whose lengths need to be checked.\n    :param expected_length: The expected length of each tuple.\n    :return: Returns a string indicating whether all tuples have the same length as specified,\n             otherwise returns an error message stating they don't.\n    \"\"\"\n    # Check if every tuple has the same length as expected\n    if all(len(tup) == expected_length for tup in tuple_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))  # Expected output: \"All tuples have same length\"\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))     # Expected output: \"All tuples do not have same length\"\nprint(get_equal([(1, 2), (3, 4)], 2))               # Expected output: \"All tuples have same length\"",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap for this pass.\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        # Find missing numbers in the current gap and place them at correct positions.\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr\n\n# Test Cases\nprint(comb_sort([5, 15, 37, 25, 79]))  # Output should be [5, 15, 25, 37, 79]\nprint(comb_sort([41, 32, 15, 19, 22]))  # Output should be [15, 19, 22, 32, 41]\nprint(comb_sort([99, 15, 13, 47]))  # Output should be [13, 15, 47, 99]",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    # Check if n is odd and greater than 2\n    while n % 4 == 0:\n        n //= 4\n    # If n ends in 5, it cannot be written as the difference of two squares\n    return n % 8 != 7",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(input_string):\n    # Define the pattern for splitting based on newlines and asterisks\n    pattern = r'[\\s\\*\\n]+'\n    \n    # Use re.split() to split the input string according to the defined pattern\n    result = re.split(pattern, input_string)\n    \n    return result",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_samepatterns(patterns, queries):\n    \"\"\"\n    Check if all queries follow the same pattern as any of the patterns.\n    \n    Parameters:\n    patterns (list): A list of strings representing the patterns.\n    queries (list): A list of strings representing the queries.\n    \n    Returns:\n    bool: True if every query matches the pattern found in any pattern string, False otherwise.\n    \"\"\"\n    for q in queries:\n        match = True\n        p = 0\n        while p < len(patterns[0]) and match:\n            if len(q) != len(patterns[p]): break\n            for i in range(len(q)):\n                if patterns[p][i] == 'r' and q[i] != 'r': match = False\n                elif patterns[p][i] == 'g' and q[i] != 'g': match = False\n                else: continue\n            p += 1\n        if match: return True\n    return False\n\n# Test Cases\nprint(is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])) # Expected output: True\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])) # Expected output: False\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])) # Expected output: False",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_tuples(tuples_list, divisor):\n    result = []\n    for tup in tuples_list:\n        if all(x % divisor == 0 for x in tup):\n            result.append(tup)\n    return result\n\n# Test cases\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)) # [('6', '24', '12')]\nprint(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)) # [('5', '25', '30')]\nprint(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)) # [('8', '16', '4')]",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def count_Squares(a, b):\n    # Initialize total count of squares to 0\n    total = 0\n    \n    # Iterate through all possible square sizes within the given dimensions\n    for i in range(1, min(a, b)+1):\n        # Check if the current dimension is less than or equal to the side length of the largest possible square\n        while True:\n            # If not, break the loop as no more valid squares can fit with smaller side lengths\n            if i * i > b or i * i > a:\n                break\n            else:\n                # Calculate the area and add it to the total count of squares\n                total += (a - i + 1) * (b - i + 1)\n                # Update the maximum side length available for future iterations\n                max_side = i\n        # Break out of the inner loop after processing all valid squares for the current dimension\n        break\n    \n    # Return the total count of squares found\n    return total",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(num):\n    \"\"\"\n    This function calculates the difference between the sum of even and odd digits in a given number.\n    Returns:\n        bool: True if the sum of odd digits is less than the sum of even digits, otherwise False.\n    \"\"\"\n    # Initialize sums for odd and even digits\n    odd_sum = 0\n    even_sum = 0\n    \n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        num //= 10\n    \n    # Compare the sums and return the result\n    return odd_sum < even_sum",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    # Counting number of set bits using Brian Kernighan's Algorithm\n    cnt = 0\n    while n:\n        n &= n - 1\n        cnt += 1\n    return cnt % 2",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the word is even\n    return len(word) % 2 != 0",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number represents the number of balls that can be stacked in a tetrahedron shape.\n    The formula for the nth tetrahedral number is n * (n + 1) * (n + 2) / 6\n    \n    Args:\n    - n: An integer representing the position in the sequence.\n    \n    Returns:\n    - The value of the nth tetrahedral number as an integer or float depending on division result.\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) / 6)",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zip_tuples(tuple1, tuple2):\n    # Use list comprehension and zip to create pairs from the two tuples\n    zipped_pairs = [pair for pair in zip(tuple1, tuple2)]\n    return zipped_pairs\n\n# Test cases\nprint(zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6)))  # Expected output: [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nprint(zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7)))  # Expected output: [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nprint(zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8)))  # Expected output: [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Parameters:\n        radius (float): The radius of the sphere.\n        \n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(s):\n    # Initialize result variable\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Convert character to its ASCII value and add it to the result\n        result += str(ord(char))\n    \n    return result",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Calculate n-th centered hexagonal number using the formula:\n    # H_n = (n * (6*n - 3)) / 2\n    result = (n * (6 * n - 3)) // 2\n    return result",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(arr):\n    import collections\n    return dict(collections.Counter(arr))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def closest_num(n):\n    # Calculate the greatest integer less than n\n    result = int(n - ((n // 1) + 1))\n    return result\n\n# Test cases to verify the correctness of the function\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find and return the maximum length of words in the list\n    max_length = max(len(word) for word in words)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_substring(str_list, sub_str):\n    for item in str_list:\n        if sub_str == item:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_undulating(s):\n    \"\"\"\n    Checks if the given string s is an undulating sequence.\n    \n    An undulating sequence has the property that every character in it repeats exactly twice consecutively and there exists at least one repeating character.\n    \n    Args:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string is an undulating sequence, False otherwise.\n    \"\"\"\n    for i in range(1, len(s) - 1):\n        if s[i] != s[0]:\n            break\n    else:\n        return True\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            return False\n    return True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    # Initialize result as 1\n    result = 1\n    \n    # Multiply result with 'a' for 'b' number of times\n    while(b > 0):\n        if(b % 2 == 1):  # If b is odd\n            result *= a\n        a *= a  # Square 'a'\n        b //= 2  # Divide 'b' by 2\n    \n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(lst):\n    # Initialize variables for storing the name and its index with minimum value\n    min_value = float('inf')\n    index_of_min = -1\n    \n    # Iterate through each tuple in the list\n    for i, (name, score) in enumerate(lst):\n        if score < min_value:\n            min_value = score\n            index_of_min = i\n            \n    # Return the name corresponding to the index of minimum value\n    return lst[index_of_min][0]\n\n# Test cases to verify the correctness of the function\nassert index_minimum([(\"Rash\", 143), (\"Manjeet\", 200), (\"Varsha\", 100)]) == \"Varsha\"\nassert index_minimum([(\"Yash\", 185), (\"Dawood\", 125), (\"Sanya\", 175)]) == \"Dawood\"\nassert index_minimum([(\"Sai\", 345), (\"Salman\", 145), (\"Ayesha\", 96)]) == \"Ayesha\"",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lists):\n    # Create an empty dictionary to store the frequency counts\n    freq_dict = {}\n    \n    # Iterate over each sublist in the input list\n    for lst in lists:\n        # For each element in the sublist, increment its count in the dictionary\n        for num in lst:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n                \n    return freq_dict",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product / len(nums)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Converts a given decimal number to its binary equivalent.\n    \n    Parameters:\n    decimal_number (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary equivalent of the decimal number as a string.\n    \"\"\"\n    if decimal_number == 0:\n        return '0'\n    binary = ''\n    while decimal_number > 0:\n        binary = str(decimal_number % 2) + binary\n        decimal_number //= 2\n    return binary",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find and return the next smallest palindrome greater than n.\n    \n    :param n: Integer number from which to start searching for the next palindrome.\n    :return: The next smallest palindrome integer.\n    \"\"\"\n    while True:\n        if str(n) == ''.join(reversed(str(n))):\n            return n + 1\n        n += 1",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, n, k):\n    for i in range(k-1):\n        if arr[i] < arr[k]:\n            continue\n        else:\n            return arr[k]",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def eulerian_num(n, m):\n    # Initialize the result with the first term of the sequence for m=1\n    if m == 1:\n        return pow(2, n-1)\n    \n    # Calculate the Eulerian numbers using dynamic programming approach\n    dp = [[0] * (n+1) for _ in range(m)]\n    dp[0][0] = 1\n    \n    for i in range(1, m):\n        for j in range(i+1):\n            dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n                \n    return sum(dp[-1]) % (10**9 + 7)\n\n# Example usage and test cases\nprint(eulerian_num(3, 1))  # Expected output: 4\nprint(eulerian_num(4, 1))  # Expected output: 11\nprint(eulerian_num(5, 3))  # Expected output: 26",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(true_booleans_list):\n    # Count True values in the list and return the count\n    return true_booleans_list.count(True)\n\n# Test cases to verify the correctness of the function\nassert count([True, False, True]) == 2\nassert count([False, False]) == 0\nassert count([True, True, True]) == 3\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def add_lists(lists, tuples):\n    # Convert each tuple into a list and then concatenate with lists\n    for i in range(len(tuples)):\n        lists.extend(tuples[i])\n    return tuple(lists)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Hexadecimal(start_num, end_num):\n    count = 0\n    # Check each number in the range from start_num to end_num\n    for num in range(start_num, end_num + 1):\n        hex_num = \"{0:x}\".format(num)\n        # Count the occurrences of 'A' and 'B' in the hexadecimal string\n        if 'A' in hex_num or 'B' in hex_num:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nfrom heapq import heappush, heappop\n\ndef merge_sorted_lists(lists):\n    \"\"\"\n    Merge multiple sorted lists into a single sorted list.\n    \n    :param lists: List[List[int]], A list of n sorted lists where each inner list is of size m.\n    :return: List[int], The merged and sorted result.\n    \"\"\"\n    if not lists:\n        return []\n    \n    # Initialize min heap with first element of each list\n    min_heap = [[num] + [] for num in next(zip(*lists))]\n    \n    while min_heap:\n        _, *merged = heappop(min_heap)\n        \n        # If there's another list left in the same index, add its smallest element\n        if len(merged) < len(lists):\n            next_num = heappop(min_heap[-1])[0]\n            if next_num != -1:\n                heappush(min_heap[-1], [-1, next_num])\n                \n        yield from merged\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [\n        ([[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]],\n         [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 48, 54, 56, 110, 154, 233]),\n        ([[1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],\n         [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]),\n        ([[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],\n          [25, 35, 22",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(binary_str, n):\n    # Convert binary string to integer\n    num = int(binary_str, 2)\n    \n    # Calculate number of rotations required to get an odd number\n    rotations = ((num % (1 << n)) + (1 << n) - 1) // (1 << (n-1))\n    \n    return rotations",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def extract_missing(list_of_ranges, start_range, end_range):\n    # Extract all ranges within the specified start and end range\n    extracted_ranges = []\n    for i in range(start_range, end_range + 1):\n        if str(i) not in [str(r[0]) for r in list_of_ranges]:\n            extracted_ranges.append((i, i))\n    \n    # Generate missing ranges based on the extracted ranges\n    missing_ranges = sorted([r for r in range(start_range, end_range + 1) if str(r) not in [str(e[0]) for e in extracted_ranges]])\n    result = [(missing_ranges[i], missing_ranges[i + 1] - 1) for i in range(0, len(missing_ranges), 2)]\n    \n    return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(nested_lists):\n    # Flatten the nested lists and convert each sublist into a set of its elements\n    flat_set = {item for sublist in nested_lists for item in sublist}\n    \n    # Convert the flattened set back into a sorted list and return it\n    return sorted(flat_set)\n\n# Test cases\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) \nprint(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))\nprint(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'perimeter' is not defined",
      "Test 2: FAIL - name 'perimeter' is not defined",
      "Test 3: FAIL - name 'perimeter' is not defined"
    ],
    "generated_code": "def cylinder_perimeter(radius, height):\n    \"\"\"\n    Calculate the circumference of a cylindrical surface.\n    \n    Parameters:\n    radius (float): The radius of the base circle of the cylinder.\n    height (float): The height of the cylinder.\n    \n    Returns:\n    float: The perimeter of the circular base and side surfaces of the cylinder.\n    \"\"\"\n    import math\n    return 2 * math.pi * radius + 2 * math.pi * radius * height",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def assign_freq(tuple_list):\n    import collections\n    freq = {}\n    for t in tuple_list:\n        key = tuple(sorted(t))\n        if key not in freq:\n            freq[key] = 1\n        else:\n            freq[key] += 1\n    result = []\n    for t in tuple_list:\n        result.append([i+1 for i in sorted(t)])\n    final_result = [[freq[tuple(sorted(i))] for i in range(len(result))]+result[i] for i, t in enumerate(tuple_list)]\n    return [str(list(map(str, i))) for i in final_result]\n\n# Test cases\nprint(assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]))  # [(6, 5, 8, 3), (2, 7, 2), (9, 1)]\nprint(assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)]))  # [(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\nprint(assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)]))  # [(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_dicts_empty(dicts_list):\n    \"\"\"\n    Check if every dictionary in the given list is empty.\n    \n    Args:\n        dicts_list (list of dict): The list containing dictionaries to be checked.\n        \n    Returns:\n        bool: True if every dictionary in the list is empty, False otherwise.\n    \"\"\"\n    return all(not d for d in dicts_list)\n\n# Test cases\nprint(is_all_dicts_empty([{}, {}, {}]))  # Expected output: True\nprint(is_all_dicts_empty([{1, 2}, {}, {}]))  # Expected output: False\nprint(is_all_dicts_empty([]))  # Expected output: True\nprint(is_all_dicts_empty([[{'key': 'value'}], [{'key': 'value'}]]))  # Expected output: False",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    result = []\n    for a, b in lst:\n        try:\n            if isinstance(a, str) and isinstance(b, str):\n                result.append((float(a), float(b)))\n            elif not isinstance(a, str) and not isinstance(b, str):\n                raise ValueError(\"Both elements must be strings or numbers\")\n        except ValueError as e:\n            print(f\"Error converting {a} and {b}: {e}\")\n    return result",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(s):\n    return s.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(nums, n):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if mid is less than its next index\n        if nums[mid] < nums[mid+1]:\n            low = mid + 1\n        else:\n            # Check if it's the first unique element after sorting\n            if mid == 0 or nums[mid-1] != nums[mid]:\n                return nums[mid]\n            else:\n                low = mid + 1\n    return -1",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_product_tuple(tuples_list):\n    # Sort each tuple in descending order\n    for i in range(len(tuples_list)):\n        tuples_list[i] = sorted(tuples_list[i], reverse=True)\n    \n    # Multiply the first two elements of each tuple and take the maximum\n    return max([t[0]*t[1] for t in tuples_list])",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_triplet(arr, target_sum, k, l):\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum and abs(k - arr[i]) <= l:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Test cases\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0))  # Output: True\nprint(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0))  # Output: False\nprint(check_triplet([10, 4, 2, 3, 5], 5, 15, 0))         # Output: True",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def smartNumber(n):\n    if n == 1:\n        return 30\n    else:\n        # The formula for generating nth smart number is given as follows:\n        # Smart Number = 2 * prime_number + 1 where prime_number is the nth prime number.\n        # We need to generate the first prime number and then apply the formula until we reach the nth smart number.\n        prime_numbers = [2]\n        while len(prime_numbers) < n:\n            next_prime = prime_numbers[-1] + 2\n            while not all(next_prime % i != 0 for i in range(2, int(next_prime**0.5)+1)):\n                next_prime += 2\n            prime_numbers.append(next_prime)\n        return 2 * prime_numbers[n-1] + 1",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'y' is not defined",
      "Test 2: FAIL - name 'y' is not defined",
      "Test 3: FAIL - name 'y' is not defined"
    ],
    "generated_code": "def amicable_numbers_sum(n):\n    def is_amicable(x):\n        # Calculate sum of proper divisors for x and find its divisor y\n        return sum(d for d in range(1, x // 2 + 1) if x % d == 0) != x and sum(d for d in range(1, y // 2 + 1) if y % d == 0) == x\n    \n    total = 0\n    for i in range(2, n+1):\n        j = is_amicable(i)\n        if j <= n:\n            total += i + j\n    return total",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(x, y):\n    return cmath.phase(complex(x, y))",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_string, n):\n    \"\"\"\n    Finds the maximum difference between the count of '0' and '1' substrings in a binary string of length n.\n    \n    Parameters:\n        binary_string (str): The input binary string.\n        n (int): Length of the binary string.\n        \n    Returns:\n        int: Maximum difference between the count of '0' and '1'.\n    \"\"\"\n    max_diff = -float('inf')\n    left, zero_count, one_count = 0, 0, 0\n    \n    for right in range(n):\n        if binary_string[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > one_count:\n            zero_count -= 1\n            left += 1\n        \n        current_diff = zero_count - one_count\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff\n\n# Check function with provided data points\nprint(find_length(\"11000010001\", 11))  # Expected output: 6\nprint(find_length(\"10111\", 5))         # Expected output: 1\nprint(find_length(\"11011101100101\", 14))  # Expected output: 2",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(a, b):\n    # Find all divisors of both numbers and store them in sets for easy comparison\n    divisor_set_a = {i for i in range(1, int(b**0.5) + 1) if not b % i}\n    divisor_set_b = {j for j in range(1, int(a**0.5) + 1) if not a % j}\n    \n    # Calculate the sum of common divisors\n    common_sum = sum(divisor_set_a.intersection(divisor_set_b))\n    return common_sum\n\n# Test cases\nprint(sum_of_common_divisors(10, 15))  # Output: 6\nprint(sum_of_common_divisors(100, 150))  # Output: 93\nprint(sum_of_common_divisors(4, 6))  # Output: 3",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    if b == 0:\n        return 0\n    elif b > 0:\n        return a + multiply_int(a, b - 1)\n    else:\n        return -(a + multiply_int(-a, abs(b) - 1))",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, words):\n    # Use list comprehension to filter out words shorter than 'n' and return the result.\n    return [word for word in words if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if all rows and columns have the same sum\n    row_sum = sum(matrix[i][i] for i in range(n))\n    col_sum = sum(matrix[j][j] for j in range(n))\n    \n    # Calculate the target sum for each cell based on the size of the matrix\n    target_sum = (n * (n ** 2 + 1) // 2) // n\n    \n    # Verify sums of individual cells\n    for i in range(n):\n        if not (sum(matrix[i]) == row_sum and sum([matrix[j][i] for j in range(n)]) == row_sum):\n            return False\n        if not (sum([matrix[i][j] for j in range(n)]) == col_sum and sum([matrix[j][i] for j in range(n)]) == col_sum):\n            return False\n        if not (sum(matrix[i][:]) == row_sum * n and sum([matrix[j][i] for j in range(n)]) == col_sum * n):\n            return False\n        \n    return True",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(nums):\n    # Create a dictionary to count occurrences of each number\n    num_counts = {}\n    \n    for num in nums:\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    \n    # Find the number with the maximum occurrence and its count\n    max_num = max(num_counts.items(), key=lambda x: x[1])\n    \n    return max_num",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s):\n    # Convert the input string into a list for easy modification\n    s_list = list(s)\n    \n    # Define a set of vowel characters for quick lookup\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize pointers for the start and end of the string\n    left, right = 0, len(s) - 1\n    \n    # Loop until the two pointers meet in the middle\n    while left < right:\n        # Move the left pointer forward as long as it points to a non-vowel character\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        \n        # Move the right pointer backward as long as it points to a non-vowel character\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        \n        # Swap the characters at the current positions of the pointers\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        \n        # Move both pointers towards each other\n        left += 1\n        right -= 1\n    \n    # Join the modified list back into a string and return it\n    return ''.join(s_list)\n\n# Test cases to verify the correctness of the function\nprint(reverse_vowels(\"Python\"))  # Expected output: \"Python\"\nprint(reverse_vowels(\"USA\"))     # Expected output: \"ASU\"\nprint(reverse_vowels(\"ab\"))      # Expected output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(numbers):\n    return sum(x for x in numbers if x < 0)",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_last(arr, n, p):\n    count = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            count += 1\n        else:\n            break\n    if p >= count and (p - count) % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_hexagonal(num):\n    \"\"\"\n    Check if the given number can be represented as a hexagonal number.\n    \n    :param num: Integer - The number to check.\n    :return: bool - True if the number is hexagonal, False otherwise.\n    \"\"\"\n    n = (1 + ((1 + 8 * num) ** 0.5)) / 4\n    return n.is_integer()\n\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    :param n: int - The position of the hexagonal number in the sequence.\n    :return: int - The nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Use the formula for calculating the nth hexagonal number directly\n        return n * (2 * n - 1)\n\n# Test cases to verify the correctness of the solution\nassert hexagonal_num(10) == 190, \"Test case 1 failed\"\nassert hexagonal_num(5) == 45, \"Test case 2 failed\"\nassert hexagonal_num(7) == 91, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(kwh):\n    flat_rate = 32.00\n    rate_per_kwh = 0.95\n    extra_rate = 0.08\n    if kwh <= 50:\n        return flat_rate + (kwh * rate_per_kwh)\n    elif kwh <= 200:\n        extra_1 = min(kwh - 50, 150) * rate_per_kwh\n        return flat_rate + extra_1 + ((kwh - 150) * extra_rate)\n    else:\n        extra_1 = min(kwh - 50, 150) * rate_per_kwh\n        extra_2 = min((kwh - 150), 100) * extra_rate\n        return flat_rate + extra_1 + extra_2 + ((kwh - 250) * extra_rate)\n\n# Test cases\nprint(cal_electbill(75)) # Expected output: 246.25\nprint(cal_electbill(265)) # Expected output: 1442.75\nprint(cal_electbill(100)) # Expected output: 327.5",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(arr):\n    count = arr.count(0)\n    return float(count) / len(arr) if len(arr) != 0 else 0",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given integer n can be represented as the sum of non-zero powers of 2.\n    \n    Parameters:\n    - n (int): The integer to check.\n    \n    Returns:\n    - bool: True if n can be represented as such a sum, False otherwise.\n    \"\"\"\n    # Convert n to binary and remove '0b' prefix\n    bin_n = str(bin(n)[2:])\n    for i in range(len(bin_n)):\n        if int(bin_n[i]) == 1:\n            return True\n    return False",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuple_list):\n    result = []\n    for tpl in tuple_list:\n        for num in tpl:\n            if tpl.count(num) == 1:\n                result.append(num)\n    return result\n\n# Test cases\nprint(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) # Should return [3, 4, 5, 7, 1]\nprint(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) # Should return [1, 2, 3, 4, 7, 8]\nprint(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) # Should return [7, 8, 9, 10, 11, 12]",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pancake_sort(arr):\n    def flip(start):\n        for i in range((start - 1) // 2):\n            arr[i], arr[start - 1 - i] = arr[start - 1 - i], arr[i]\n\n    n = len(arr)\n    while n > 0:\n        if arr[n-1] != n:\n            # Flip all elements from first to index 'n-1'\n            flip(n-1)\n            # If element is not at correct position, flip it to start position and then flip all from index 1 to last.\n            flip(n-1)\n            n -= 1\n        else:\n            n -= 1\n    return arr",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    # Use set intersection and length to find pairs present in all three lists\n    return len(set.intersection(*[set(x) for x in [list1, list2, list3]]))\n\n# Example usage:\nprint(count_samepair([1,2,3,4,5,6,7,8], [2,2,3,1,2,6,7,9], [2,1,3,1,2,6,7,9]))  # Output: 3\nprint(count_samepair([1,2,3,4,5,6,7,8], [2,2,3,1,2,6,7,8], [2,1,3,1,2,6,7,8]))  # Output: 4\nprint(count_samepair([1,2,3,4,2,6,7,8], [2,2,3,1,2,6,7,8], [2,1,3,1,2,6,7,8]))  # Output: 5",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(tup):\n    # Initialize count of lists\n    list_count = 0\n    \n    # Iterate through each item in the tuple\n    for item in tup:\n        # Check if the item is a list\n        if isinstance(item, list):\n            list_count += 1\n            \n    return list_count",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sum_Pairs(arr: List[int], n: int) -> int:\n    result = 0\n    for i in range(len(arr)):\n        temp_sum = 0\n        for j in range(i + 1, len(arr)):\n            temp_sum += abs(arr[i] - arr[j])\n        result += temp_sum\n    return result\n\n# Test cases\nprint(sum_Pairs([1,8,9,15,16], 5))  # Output: 74\nprint(sum_Pairs([1,2,3,4], 4))      # Output: 10\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14], 9))  # Output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Abs_Diff(arr,n):\n    # Initialize the minimum and maximum values with the first element of the array.\n    min_val = arr[0]\n    max_diff = arr[0]\n\n    for i in range(1, n): \n        # Update the minimum value if the current element is smaller than the previous minimum.\n        min_val = min(min_val, arr[i])\n        \n        # Calculate the absolute difference between the current element and the minimum value.\n        diff = abs(arr[i] - min_val)\n\n        # Update the maximum difference if the calculated difference is greater than the previously stored maximum difference.\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n\n# Example test cases\nprint(max_Abs_Diff([2,1,5,3], 4))  # Output: 4\nprint(max_Abs_Diff([9,3,2,5,1], 5))  # Output: 8\nprint(max_Abs_Diff([3,2,1], 3))  # Output: 2",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    return sum([ord(char) for char in s])",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, row, col):\n    # Base case: if we reach the last row, return the value at that cell\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n    \n    # Recursive case: choose the maximum path sum from two possible moves\n    left_max = max_path_sum(triangle, row + 1, col)\n    right_max = max_path_sum(triangle, row + 1, col + 1)\n    \n    # Return the maximum of these two choices plus the current cell's value\n    return triangle[row][col] + max(left_max, right_max)\n\n# Example usage and test cases\ntriangle_1 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\nrow_index_1 = 2\ncolumn_index_1 = 2\nprint(max_path_sum(triangle_1, row_index_1, column_index_1))  # Expected output: 14\n\ntriangle_2 = [[13, 0, 0], [7, 4, 0], [2, 4, 6]]\nrow_index_2 = 2\ncolumn_index_2 = 2\nprint(max_path_sum(triangle_2, row_index_2, column_index_2))  # Expected output: 24\n\ntriangle_3 = [[2, 0, 0], [11, 18, 0], [21, 25, 33]]\nrow_index_3 = 2\ncolumn_index_3 = 2\nprint(max_path_sum(triangle_3, row_index_3, column_index_3))  # Expected output: 53",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import log10, floor\n\ndef sum_digits_twoparts(n):\n    if n < 10:\n        return n\n    \n    # Calculate the number of digits in the given number\n    num_digits = int(floor(log10(n))) + 1\n    \n    # Initialize the result with all ones for each digit place\n    result = [1] * num_digits\n    \n    # Distribute the ones among the tens and units places based on the remainder\n    remainder = n % 10\n    if remainder > 1:\n        result[0], result[1] = 1, remainder - 1\n    else:\n        result[1] = remainder\n    \n    # Adjust the remaining ones accordingly\n    for i in range(num_digits-2):\n        result[i+2] += 1\n    \n    # Sum up all the digits in the resulting list\n    return sum(result)",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list assignment index out of range",
      "Test 2: FAIL - list assignment index out of range",
      "Test 3: FAIL - list assignment index out of range"
    ],
    "generated_code": "from typing import List\nimport bisect\n\ndef longest_subseq_with_diff_one(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    \n    dp = [float('-inf')] * n\n    \n    # Initialize the first element of DP array\n    dp[0] = nums[0]\n    \n    max_length = 1\n    \n    for i in range(1, n):\n        # Check if we can extend the current sequence with the next element\n        extended = nums[i] - nums[i-1] == k\n        if extended:\n            start = bisect.bisect_left(dp, nums[i])\n            if start >= 0 and dp[start] > 0:\n                end = start + 1\n                while end < n and nums[end] - nums[end-1] <= k:\n                    end += 1\n                max_length = max(max_length, end - start)\n                dp[end] = nums[i]\n        \n        # Update the DP array\n        j = bisect.bisect_left(dp, nums[i])\n        if j < n and nums[j] == nums[i]:\n            j -= 1\n        dp[j] = nums[i]\n    \n    return max_length",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'does_Contain_B' is not defined",
      "Test 2: FAIL - name 'does_Contain_B' is not defined",
      "Test 3: FAIL - name 'does_Contain_B' is not defined"
    ],
    "generated_code": "def does_contain_b(num, lower_bound, upper_bound):\n    # Check if the absolute difference between num and both bounds is less than the sum of the bounds\n    return abs(num - lower_bound) < lower_bound + upper_bound or abs(num - upper_bound) < lower_bound + upper_bound",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_coprime(x, y):\n    \"\"\"\n    Check if two numbers x and y are coprimes.\n    \n    Parameters:\n    - x (int): First integer.\n    - y (int): Second integer.\n    \n    Returns:\n    - bool: True if x and y are coprimes, False otherwise.\n    \"\"\"\n    return math.gcd(x, y) == 1",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    merge_sort(left_half)\n    merge_sort(right_half)\n    \n    i = j = k = 0\n    \n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] < right_half[j]:\n            arr[k] = left_half[i]\n            i += 1\n        else:\n            arr[k] = right_half[j]\n            j += 1\n        k += 1\n    \n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i += 1\n        k += 1\n    \n    while j < len(right_half):\n        arr[k] = right_half[j]\n        j += 1\n        k += 1\n    \n    return arr\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Expected output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Expected output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [row[index] for row in matrix]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0))  # Expected output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2))  # Expected output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3))  # Expected output: [2, 2, 5]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def even_bit_toggle_number(number):\n    # Toggle even bits using bitwise XOR operation with a mask that has odd bits set.\n    return number ^ ((number >> 1) & ~1)\n\n# Test cases to verify the correctness of the function\nassert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test cases\nprint(tuple_int_str((('333', '33'), ('1416', '55'))))  # Output: ((333, 33), (1416, 55))\nprint(tuple_int_str((('999', '99'), ('1000', '500'))))  # Output: ((999, 99), (1000, 500))\nprint(tuple_int_str((('666', '66'), ('1500', '555'))))  # Output: ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    encoded = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            count += 1\n        else:\n            encoded.append([count, lst[i - 1]])\n            count = 1\n    encoded.append([count, lst[-1]])\n    return encoded",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(arr, n, m):\n    if len(set(arr)) != 1:\n        return -1\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    total_diff = sum([abs(val - min_val) for val in arr]) + sum([abs(max_val - val) for val in arr])\n    target_operations = total_diff // m\n    diff_sum = total_diff % m\n    \n    if diff_sum == 0:\n        return target_operations\n    else:\n        return target_operations + 1",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def month_season(month, day):\n    # Check if month is in winter range, summer range, autumn range, or spring range\n    if month == 'December' or month == 'January' or month == 'February':\n        return 'winter'\n    elif month == 'March' or month == 'April' or month == 'May':\n        return 'spring'\n    elif month == 'June' or month == 'July' or month == 'August':\n        return 'summer'\n    else:\n        return 'autumn'",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def gcd(a, b):\n    while b:\n        t = b\n        b = a % b\n        a = t\n    return a\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef solution(a, b, n):\n    # Check if there is a solution\n    if n % lcm(a, b) == 0:\n        c = n // lcm(a, b)\n        m = n // a - c // b\n        return f\"x = {m}, y = {c}\"\n    else:\n        return \"No solution\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list1, list2):\n    # Convert list2 into a set for O(1) look-up times.\n    lookup = set(list2)\n    return [x for x in list1 if x not in lookup]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8])) # Expected output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])) # Expected output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7])) # Expected output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    while n >= 0:\n        total_sum += n\n        n -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef area_polygon(n_sides, length_side):\n    \"\"\"\n    Calculate the area of a regular polygon with n_sides sides each of length length_side.\n    \n    Parameters:\n        n_sides (int): The number of sides in the polygon.\n        length_side (float): The length of each side of the polygon.\n        \n    Returns:\n        float: The area of the polygon.\n    \"\"\"\n    area = (n_sides * length_side**2) / (4 * math.tan(math.pi / n_sides))\n    return round(area, 10)\n\n# Test cases\nprint(area_polygon(4, 20)) # Expected output: 400.000000000\nprint(area_polygon(10, 15)) # Expected output: 1731.196989661\nprint(area_polygon(9, 7))   # Expected output: 302.909385495",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def areEquivalent(n, m):\n    total_sum_n = sum(i for i in range(1, n + 1) if n % i == 0)\n    total_sum_m = sum(i for i in range(1, m + 1) if m % i == 0)\n    \n    # Check if both sums are equal\n    return total_sum_n == total_sum_m",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef count_char_position(s):\n    # Normalize the string by converting it to lowercase.\n    normalized_string = s.lower()\n    \n    # Find all unique characters in the normalized string.\n    chars = set(normalized_string)\n    \n    # Calculate the positions of these characters in the English alphabet.\n    char_positions = [ord(char) - ord('a') for char in chars]\n    \n    # Sum up the positions of characters in their original order,\n    # which corresponds to counting occurrences where character appears before another.\n    sum_positions = sum(char_positions[i] + i for i in range(len(chars)))\n    \n    return sum_positions",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def find_even_Pair(arr, n):\n    even_count = sum(x % 2 == 0 for x in arr)\n    odd_count = len(arr) - even_count\n    \n    # XOR of all elements in array\n    xor_arr = reduce(lambda x, y: x ^ y, arr)\n    \n    if xor_arr % 2 == 0:\n        return even_count * odd_count // 2\n    else:\n        # If xor is odd, then there will be no pairs whose XOR is even.\n        return 0",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'next_Power_OF_2' is not defined. Did you mean: 'next_Power_Of_2'?"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    # Initialize the variable to store the closest lower power of 2\n    result = 1\n    # Loop until we reach or exceed the given number 'n'\n    while True:\n        if result >= n:\n            break\n        result *= 2\n    return result\n\n# Test the function with provided data points\nprint(next_Power_Of_2(0))  # Expected output: 1\nprint(next_Power_OF_2(5))  # Expected output: 8\nprint(next_Power_OF_2(17)) # Expected output: 32",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_pell(n):\n    # Base case for n=0 and n=1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Pell numbers\n    pell = [0, 1]\n    \n    # Calculate the next Pell numbers until reaching the desired n\n    for i in range(2, n+1):\n        pell.append(pell[i-1] * 2 + pell[i-2])\n    \n    return pell[n]\n\n# Test cases\nprint(get_pell(4))  # Expected output: 12\nprint(get_pell(7))  # Expected output: 169\nprint(get_pell(8))  # Expected output: 408",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(s):\n    # Initialize counter for 'std'\n    std_count = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is 'std', increment the counter\n        if char == 'std':\n            std_count += 1\n            \n    # Return the total number of occurrences\n    return std_count\n\n# Test cases\nprint(count_occurance(\"letstdlenstdporstd\"))  # Expected output: 3\nprint(count_occurance(\"truststdsolensporsd\"))  # Expected output: 1\nprint(count_occurance(\"makestdsostdworthit\"))  # Expected output: 2",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_splchar(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(keyvalue_pairs):\n    result = {}\n    for k, v in keyvalue_pairs:\n        if k not in result:\n            result[k] = []\n        result[k].append(v)\n    return result\n\n# Test cases\nprint(group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]))\nprint(group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)]))\nprint(group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)]))",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(s):\n    \"\"\"\n    Function to check if all types of parentheses ('()', '{}', '[]') in the input string s are correctly matched and nested.\n    \n    Args:\n        s (str): The string containing various types of parentheses to be validated.\n        \n    Returns:\n        bool: True if the parentheses are valid, False otherwise.\n    \"\"\"\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            # Invalid character\n            return False\n    \n    return not stack",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'answer' is not defined",
      "Test 2: FAIL - name 'answer' is not defined",
      "Test 3: FAIL - name 'answer' is not defined"
    ],
    "generated_code": "def find_lcm_range(a, b, low, high):\n    # Calculate the least common multiple of a and b\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    # Iterate over all possible pairs of numbers in the given range\n    for i in range(max(low, min(a, b)), min(high, max(a, b)) + 1):\n        if lcm(a, b) >= i:\n            return (a, i)\n\n# Test cases\nprint(find_lcm_range(3, 8, 10, 50))  # Expected output: (3, 6)\nprint(find_lcm_range(2, 6, 1, 20))   # Expected output: (2, 4)\nprint(find_lcm_range(1, 3, 1, 10))   # Expected output: (1, 2)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_literals(string_list, target_string):\n    for i in range(len(target_string)):\n        if target_string.startswith(tuple(string_list), i) and len(set(target_string[i:]) - set(\" \")) == len(string_list):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_num_keith(num):\n    def get_next_number(current_sum):\n        \"\"\"Calculate the next number based on current sum and difference.\"\"\"\n        while current_sum > 0:\n            yield current_sum\n            last_digit = current_sum % 10\n            current_sum -= last_digit\n            current_sum //= 10\n    \n    def generate_numbers():\n        num = 2\n        while True:\n            for s in get_next_number(num * num - 2 * num + 1):\n                if s == num:\n                    continue\n                if num * num - 2 * num + 1 < 0:\n                    break\n                yield s\n            num += 1\n    \n    def check_keith(num):\n        k_sum = 0\n        i = 1\n        while k_sum != num and i <= num:\n            k_sum += i ** 2\n            i += 1\n        return k_sum == num\n    \n    result = list(generate_numbers())\n    return all(check_keith(n) for n in result)\n\n# Test cases\nprint(is_num_keith(14))  # Output: True\nprint(is_num_keith(12))  # Output: False\nprint(is_num_keith(197)) # Output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371  # Radius of the Earth in kilometers\n    \n    phi1, phi2 = math.radians(lat1), math.radians(lat2)\n    delta_phi, delta_lambda = math.radians(lon2 - lon1), math.radians(lat2 - lat1)\n\n    a = math.sin(delta_phi / 2)**2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    distance = R * c\n    return round(distance, 3)",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: Not all strings have the same first character"
    ],
    "generated_code": "def common_prefix(strs, n):\n    if len(set(''.join(strs))) != 1:\n        raise ValueError(\"Not all strings have the same first character\")\n    \n    ans = strs[0][:n]\n    for i in range(1, n + 1):\n        if all(s[i - 1] == ans[i - 1] for s in strs):\n            continue\n        else:\n            break\n    else:\n        return ans\n    while n > 0 and ans[n-1] not in \"\".join(strs):\n        n -= 1\n    return ans[:n]\n\n# Test cases\nprint(common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4))  # Should print 'ta'\nprint(common_prefix([\"apples\", \"ape\", \"april\"], 3))  # Should print 'ap'\nprint(common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3))  # Should print 'teen'",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(input_string):\n    uppercase = re.findall(r'[A-Z]', input_string)\n    lowercase = re.findall(r'[a-z]', input_string)\n    special_characters = re.findall(r'[^a-zA-Z0-9]', input_string)\n    numbers = re.findall(r'\\d', input_string)\n\n    return (uppercase, lowercase, special_characters, numbers)\n\n# Test cases\nprint(find_character(\"ThisIsGeeksforGeeks\"))  # Expected output: ([u't', u'i', u'g', u'e', u's'], [u'h', u'i', u's', u's', u'e', u'e', u'u', u's', u'o', u'r', u'e', u'g', u'e', u's'], [], [])\nprint(find_character(\"Hithere2\"))              # Expected output: ([u'H'], [u'h', u'i', u't', u'h', u'e', u'r', u'e'], [u'2'], [])\nprint(find_character(\"HeyFolks32\"))            # Expected output: ([u'H', u'E'], [u'y', u'f', u'o', u'l', u'k', u's'], [u'3', u'2'], [])",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_pairs(arr, diff, target_diff):\n    \"\"\"\n    Counts the number of unique pairs (arr[i], arr[j]) such that |arr[i] - arr[j]| = target_diff.\n    \n    :param arr: List[int]\n    :param diff: int\n    :param target_diff: int\n    :return: int\n    \"\"\"\n    pair_counts = defaultdict(int)\n    result = 0\n    \n    for num in arr:\n        if num + target_diff in pair_counts:\n            result += pair_counts[num + target_diff]\n        if num - target_diff in pair_counts:\n            result += pair_counts[num - target_diff]\n        \n        # Incrementing the count of current element to avoid double counting\n        pair_counts[num] += 1\n    \n    return result",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(nums, num):\n    # Check if every element in nums is greater than num\n    return all(num < i for i in nums)",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    # Calculate the x-coordinate of the focus using the formula derived from the standard form of the parabola equation\n    x = -b / (2*a)\n    \n    # Calculate the y-coordinate of the focus using the formula derived from the standard form of the parabola equation\n    y = (1/(4*a)) * (-c + ((-b)**2)/(4*a))\n    \n    return (x, y)\n\n# Test cases to verify the correctness of the function\nprint(parabola_focus(5,3,2))  # Expected output: (-0.3, 1.6)\nprint(parabola_focus(9,8,4))  # Expected output: (-0.4444444444444444, 2.25)\nprint(parabola_focus(2,4,6))  # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(string, patterns):\n    for pattern in patterns:\n        if re.search(pattern, string):\n            return \"Matched!\"\n    return \"Not Matched!\"\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox', 'horse']))  # Expected output: 'Matched!'\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['dog', 'elephant']))  # Expected output: 'Not Matched!'\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy', 'cat']))  # Expected output: 'Matched!'",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def longest_common_subsequence(s1, s2, m, n):\n    # Initialize a table to store lengths of LCS of substrings\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill the table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # The length of LCS is stored in dp[m][n]\n    lcs_length = dp[m][n]\n    \n    # Backtrack to construct the actual LCS string\n    index = dp[m][n]\n    lcs_str = \"\"\n    while index > 0:\n        if s1[index-1] == s2[index-1]:\n            lcs_str += s1[index-1]\n            index -= 1\n        elif dp[index-1][index] >= dp[index][index-1]:\n            index -= 1\n        else:\n            index -= 1\n    \n    # Reverse the constructed LCS as it was built backwards and then reverse it again\n    return \"\".join(reversed(lcs_str))",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - division by zero",
      "Test 2: FAIL - division by zero",
      "Test 3: FAIL - division by zero"
    ],
    "generated_code": "def prod_Square(n):\n    \"\"\"\n    Checks if the given integer n can be expressed as the product of two perfect squares.\n    \n    Args:\n    - n: An integer\n    \n    Returns:\n    - A boolean value indicating whether n is expressible as a product of two squares.\n    \"\"\"\n    import math\n    for i in range(int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n / i))\n        if i * j == n and i != j:\n            return True\n    return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while nums[i] > 0 and nums[i] <= n and nums[nums[i]-1] != nums[i]:\n            temp = nums[nums[i]-1]\n            nums[nums[i]-1] = nums[i]\n            nums[i] = temp\n    \n    for i in range(n):\n        if nums[i] != i+1:\n            return i + 1\n    return n + 1",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    \"\"\"\n    Counts the number of integral points (x, y) where both coordinates are integers,\n    and they satisfy the conditions 1 <= x1 < x < x2, 1 <= y1 < y < y2.\n    \n    Args:\n    - x1: The starting x-coordinate of the range (inclusive).\n    - y1: The starting y-coordinate of the range (inclusive).\n    - x2: The ending x-coordinate of the range (exclusive).\n    - y2: The ending y-coordinate of the range (exclusive).\n\n    Returns:\n    - An integer representing the number of integral points within the given bounds.\n    \"\"\"\n    # Calculate total possible combinations for each axis before subtraction\n    total_points = (x2 - x1 + 1) * (y2 - y1 + 1)\n    # Subtract invalid areas outside the specified range\n    if x1 == 1:\n        total_points -= x2 - x1\n    if y1 == 1:\n        total_points -= y2 - y1\n    if x1 == x2:\n        total_points -= y2 - y1\n    if y1 == y2:\n        total_points -= x2 - x1\n    return total_points\n\n# Check function with provided data points\nassert count_Intgral_Points(1,1,4,4) == 4, \"Test case 1 failed\"\nassert count_Intgral_Points(1,2,1,2) == 1, \"Test case 2 failed\"\nassert count_Intgral_Points(4,2,6,4) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    # List of months with 30 days\n    thirty_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Check if the month is in the list of months with 30 days\n    return month_name in thirty_days_months",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_String(s):\n    # Check if the string contains at least one alphabet character and one digit\n    return any(char.isalpha() for char in s) and any(char.isdigit() for char in s)",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_tuple' is not defined",
      "Test 2: FAIL - name 'remove_tuple' is not defined",
      "Test 3: FAIL - name 'remove_tuple' is not defined"
    ],
    "generated_code": "def remove_duplicates(input_tuple):\n    # Convert the tuple to a set to remove duplicates and then convert it back to a tuple.\n    result = tuple(set(input_tuple))\n    return result",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_number):\n    # Convert the octal number to decimal\n    decimal_value = int(str(octal_number), 8)\n    return decimal_value",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from bisect import bisect_left\n\ndef first(arr, x, n):\n    \"\"\"\n    Find the index of the first occurrence of 'x' in a sorted list 'arr'.\n    \n    Parameters:\n    arr (list): A sorted list.\n    x (int): The value to search for.\n    n (int): The length of the list 'arr'.\n    \n    Returns:\n    int: The index of the first occurrence of 'x' in 'arr', or -1 if not found.\n    \"\"\"\n    i = bisect_left(arr, x)\n    if i != n and arr[i] == x:\n        return i\n    else:\n        return -1\n\n# Test cases\nprint(first([1,2,3,4,5,6,6],6,6))  # Expected output: 5\nprint(first([1,2,2,2,3,2,2,4,2],2,9))  # Expected output: 1\nprint(first([1,2,3],1,3))  # Expected output: 0",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list.remove(x): x not in list",
      "Test 2: FAIL - list.remove(x): x not in list",
      "Test 3: FAIL - list.remove(x): x not in list"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    # Remove elements from the list whose length is equal to k\n    for _ in range(k): \n        lst.remove(())\n    return lst",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_exponentio(a, b):\n    # Multiply all elements in tuple 'a' with each element in tuple 'b'\n    result = [x * y for x, y in zip(a, b)]\n    return tuple(result)\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))  # Expected output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)))  # Expected output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)))  # Expected output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\nfrom sympy import *\ndef largest_triangle(a, b):\n    x = sqrt((a**2 - b**2)/2)\n    y = sqrt(b**2 - x**2)\n    return (math.sqrt(2)*x*y) * (a/b)**.5",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(num):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to num.\n    \n    Parameters:\n    num (int): The input integer.\n    \n    Returns:\n    int: The highest power of 2 not greater than num.\n    \"\"\"\n    if num < 1:\n        raise ValueError(\"Number must be positive.\")\n    \n    result = 1\n    while result <= num:\n        result *= 2\n    \n    # This loop runs until result becomes larger than num,\n    # but it will always stop before reaching num because we exit when result >= num.\n    result //= 2\n    return result\n\n# Check function with provided data points\nprint(highest_Power_of_2(10))  # Expected output: 8\nprint(highest_Power_of_2(19))  # Expected output: 16\nprint(highest_Power_of_2(32))  # Expected output: 32",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(lst):\n    max_value = max(lst)\n    return [index for index, value in enumerate(lst) if value == max_value]\n\n# Test cases\nprint(position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])) # Output should be [7]\nprint(position_max([1,2,2,2,4,4,4,5,5,5,5])) # Output should be [7,8,9,10]\nprint(position_max([2,1,5,6,8,3,4,9,10,11,8,12])) # Output should be [11]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all items in the list are the same using set operation\n    return len(set(lst)) == 1",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_even(s):\n    return ''.join(char for char in s if char.isalnum() and ord(char) % 2 != 0)",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'hamming_Distance' is not defined",
      "Test 2: FAIL - name 'hamming_Distance' is not defined",
      "Test 3: FAIL - name 'hamming_Distance' is not defined"
    ],
    "generated_code": "def hamming_distance(a, b):\n    # Convert integers to binary strings and compare character by character.\n    str_a = bin(a)[2:] \n    str_b = bin(b)[2:]\n    max_len = max(len(str_a), len(str_b))\n    \n    # Pad shorter string with '0's at the beginning.\n    if len(str_a) < max_len:\n        str_a = \"0\" * (max_len - len(str_a)) + str_a\n    elif len(str_b) < max_len:\n        str_b = \"0\" * (max_len - len(str_b)) + str_b\n    \n    distance = sum(c1 != c2 for c1, c2 in zip(str_a, str_b))\n    return distance",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, char):\n    # Initialize counter for occurrences\n    count = 0\n    \n    # Loop through each character in the string\n    for c in s:\n        # If the current character matches the target character, increment the counter\n        if c == char:\n            count += 1\n            \n    # Return the total count of occurrences\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(tup):\n    inversions = []\n    for i in range(len(tup)):\n        for j in range(i + 1, len(tup)):\n            if tup[i] > tup[j]:\n                inversions.append(tup[j])\n            else:\n                inversions.append(tup[i])\n    return tuple(inversions)\n\n# Test cases\nprint(inversion_elements((7, 8, 9, 1, 10, 7))) # Expected output: (-8, -9, -10, -2, -11, -8)\nprint(inversion_elements((2, 4, 5, 6, 1, 7))) # Expected output: (-3, -5, -6, -7, -2, -8)\nprint(inversion_elements((8, 9, 11, 14, 12, 13))) # Expected output: (-9, -10, -12, -15, -13, -14)",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        if i > 0:\n            current_tuple = '(' + tuples_list[i][:-1] + ')'\n            result.append(current_tuple)\n        else:\n            result.append('(' + tuples_list[i] + ')')\n    return tuple(result)\n\n# Test cases\nprint(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))\nprint(concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")))\nprint(concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")))",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    def is_repeating_subseq(subseq):\n        seen = set()\n        for char in subseq:\n            if char in seen and s.index(char) != subseq.index(char):\n                return True\n            seen.add(char)\n        return False\n    \n    max_length = 0\n    n = len(s)\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                continue\n            if is_repeating_subseq(s[i:j]):\n                length = j - i\n                max_length = max(max_length, length)\n    \n    return max_length\n\n# Test cases\nprint(find_longest_repeating_subseq(\"AABEBCDD\"))  # Output: 3\nprint(find_longest_repeating_subseq(\"aabb\"))      # Output: 2\nprint(find_longest_repeating_subseq(\"aab\"))       # Output: 1",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    # Use regular expression to match the pattern of a valid decimal number with at most two digits after the decimal point.\n    pattern = r'^[+-]?(\\d+(\\.\\d{1,2})?|\\.\\d+)$'\n    if re.match(pattern, decimal_str):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_replace(heap, value_to_insert):\n    \"\"\"\n    Replace the smallest element in the heap with a new value and maintain the heap property.\n    \n    Parameters:\n    - heap: A list representing the heap containing items.\n    - value_to_insert: The new value to be inserted into the heap after replacing the smallest element.\n    \n    Returns:\n    - A modified version of the heap after performing the replacement operation.\n    \"\"\"\n    # Move the new value to the last position\n    index = len(heap) - 1\n    heap[index] = value_to_insert\n    \n    # Restore the heap property by moving the value up the tree until it's smaller than its parent\n    while index > 0 and heap[(index-1)//2] > heap[index]:\n        heap[(index-1)//2], heap[index] = heap[index], heap[(index-1)//2]\n        index = (index-1)//2\n    return heap\n\n# Example usage\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 21))  # Expected output: [21, 25, 23, 44, 39, 68, 89]\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 110))  # Expected output: [23, 25, 68, 44, 39, 110, 89]\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 500))  # Expected output: [23, 25, 68, 44, 39, 500, 89]",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(string):\n    # Define the pattern for allowed characters\n    allowed_pattern = r'^[a-zA-Z0-9]+$'\n    \n    # Check if the string matches the pattern\n    if re.match(allowed_pattern, string):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\"))  # Expected output: True\nprint(is_allowed_specific_char(\"*&%@#!}{\"))           # Expected output: False\nprint(is_allowed_specific_char(\"HELLOhowareyou98765\")) # Expected output: True",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'k'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'k'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'k'"
    ],
    "generated_code": "def count_Num(n, k):\n    \"\"\"\n    This function counts how many numbers from n to k (inclusive) have at least one '0' bit in the same position as 'n'.\n    \n    Parameters:\n    n (int): The number for which we want to find out if it has at least one '0' bit.\n    k (int): The upper limit of the range to check.\n    \n    Returns:\n    int: Count of numbers with at least one '0' bit in the same position as n.\n    \"\"\"\n    # Initialize count to zero\n    count = 0\n    \n    # Loop through each number from n to k inclusive\n    for i in range(n, k + 1):\n        # Check if the ith bit is set (i.e., it's either 1 or 2)\n        if (i & (1 << n)) == (1 << n):\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Calculate the sum of the fourth power of the first n natural numbers\n    total_sum = sum(i**4 for i in range(1, n+1))\n    return total_sum",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: too many values to unpack (expected 2)"
    ],
    "generated_code": "def concatenate_strings(str_tuples_1, str_tuples_2):\n    # Convert tuple elements in each string to strings and then concatenate with spaces\n    concatenated_result = [f\"{x} {y}\" for x, y in zip(*str_tuples_1 + str_tuples_2)]\n    return concatenated_result\n\n# Test cases\nprint(concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")))  # Should print: ['Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg']\nprint(concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")))  # Should print: ['Shaik Dawood', 'Ayesha Begum', 'Sanya Singh']\nprint(concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")))  # Should print: ['HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi']",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def degree_radian(radians):\n    return radians * (180 / 3.141592653589793)",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decode_list(lst):\n    decoded = []\n    i = 0\n    while i < len(lst):\n        if isinstance(lst[i], int) and isinstance(lst[i + 1], list):\n            for _ in range(lst[i]):\n                decoded.extend(lst[i + 1])\n            i += 2\n        else:\n            decoded.append(lst[i])\n            i += 1\n    return decoded",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset_list(list1, list2):\n    return all(sublist in list1 for sublist in list2)\n\n# Test cases\nprint(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) == False)\nprint(check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]) == True)\nprint(check_subset_list([['a', 'b'], ['e'], ['c', 'd']], [['g']]) == False)",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Repeated_Char(s):\n    char_map = {}\n    \n    for i in range(len(s)):\n        if s[i] in char_map:\n            return s[i]\n        else:\n            char_map[s[i]] = i\n    \n    return '\\0'",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Operations(num1, num2):\n    # Find the maximum of the two numbers\n    max_num = max(num1, num2)\n    \n    # If one number is already divisible by the other, return zero operations\n    if max_num % num1 == 0 or max_num % num2 == 0:\n        return 0\n    \n    # Calculate the minimum steps needed to make both numbers equal\n    return abs(max_num - num1) + abs(max_num - num2)\n\n# Test cases\nprint(min_Operations(2, 4))  # Output: 1\nprint(min_Operations(4, 10)) # Output: 4\nprint(min_Operations(1, 4))  # Output: 3",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef extract_min_max(tup: Tuple[int], k: int) -> Tuple[int]:\n    \"\"\"\n    Extracts the minimum and maximum values of 'k' from the provided tuple.\n    \n    Parameters:\n        tup (Tuple[int]): The input tuple containing integer elements.\n        k (int): The number of minimum and maximum values to be extracted.\n        \n    Returns:\n        Tuple[int]: A tuple containing the minimum and maximum 'k' values.\n    \"\"\"\n    # Sort the tuple and then take the first 'k' elements which will contain both min and max\n    sorted_tup = sorted(tup)[:k]\n    return (sorted_tup[0], sorted_tup[-1])\n\n# Example check function\ndef check_function():\n    test_cases = [\n        ((5, 20, 3, 7, 6, 8), 2),\n        ((4, 5, 6, 1, 2, 7), 3),\n        ((2, 3, 4, 8, 9, 11, 7), 4)\n    ]\n    passed = True\n    for inputs, k in test_cases:\n        result = extract_min_max(inputs, k)\n        expected_result = (inputs[k-1] if k > 0 else None,\n                           inputs[-k] if k > 0 else None)\n        if not isinstance(result, tuple) or len(result) != 2 or \\\n           not all(isinstance(x, int) for x in result) or \\\n           result[0] is not expected_result[0] or \\\n           result[1] is not expected_result[1]:\n            print(f\"Failed on {inputs} with k={k}. Expected {expected_result}, got {result}\")\n            passed = False\n    if passed:\n        print(\"All test cases passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def replace_max_specialchar(s,n=1):\n    # Splitting the string into words based on special characters\n    split_words = s.split(' ')\n    result = []\n    \n    for word in split_words:\n        if len(word) > n and word[-n:] == '.' * n or word.count(',') >= n or word.count('_') >= n:\n            # If the word meets the condition, add the colon prefix followed by the trimmed word\n            result.append(f'{word[:-n] if n else \"\"}:{word}')\n        else:\n            # Otherwise, just append the original word\n            result.append(word)\n    \n    return ''.join(result)\n\n# Test cases\nprint(replace_max_specialchar('Python language, Programming language.'))  # Expected output: 'Python:language: Programming language.'\nprint(replace_max_specialchar('a b c,d e f'))  # Expected output: 'a:b:c:d e f'\nprint(replace_max_specialchar('ram reshma,ram rahim'))  # Expected output: 'ram:reshma,ram rahim'",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    first = tup[0]\n    for i in range(1, len(tup)):\n        if type(first) != type(tup[i]):\n            return False\n    return True",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef is_majority(nums: List[int], n: int, k: int) -> bool:\n    left = 0\n    right = len(nums)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == k and (mid == 0 or nums[mid-1] != k):\n            return True\n        elif nums[mid] == k:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return False",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of 1's in the binary representation of n.\n    \n    Parameters:\n    - n (int): The integer whose set bits are to be counted.\n    \n    Returns:\n    int: The count of 1's in the binary representation of n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count\n\n# Check function with provided data points\nprint(count_Set_Bits(2))  # Expected output: 1\nprint(count_Set_Bits(4))  # Expected output: 1\nprint(count_Set_Bits(6))  # Expected output: 2",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) // 2\n    \n    # Check if mid+1 is less than mid, which would mean we're looking at the unsorted part of the array.\n    if mid < end and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    # Check if mid-1 is greater than mid, which would mean the left half is the unsorted part.\n    elif mid > start and arr[mid - 1] > arr[mid]:\n        return arr[mid - 1]\n    else:\n        # Decide whether to go to the right half or left half.\n        if arr[end] > arr[mid]:\n            return find_Min(arr, mid + 1, end)\n        else:\n            return find_Min(arr, start, mid)\n\n# Test cases\nprint(find_Min([1,2,3,4,5],0,4))  # Expected output: 1\nprint(find_Min([4,6,8],0,2))      # Expected output: 4\nprint(find_Min([2,3,5,7,9],0,4))  # Expected output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(input_str):\n    result = ''\n    for i in range(len(input_str)):\n        if i % 2 == 0:\n            result += input_str[i]\n    return result\n\n# Test cases\nprint(odd_values_string('abcdef'))  # Output: ace\nprint(odd_values_string('python'))   # Output: pto\nprint(odd_values_string('data'))     # Output: dt",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(n, start, end):\n    mask = ~(end ^ (start - 1)) << (end.bit_length() - start.bit_length())\n    if n & mask:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Separate negative and positive numbers into two lists\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n\n    # Concatenate the negative list with the positive list\n    result = negatives + positives\n\n    return result[:n]  # Return only the first n elements of the combined list",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s, ch):\n    return s.replace(' ', ch)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum(triangle, target):\n    \"\"\"\n    Find the maximum sum of numbers in a given right triangle of a matrix.\n    \n    Parameters:\n    triangle (List[List[int]]): The right triangle with numbers.\n    target (int): The length of each path to reach the base of the triangle.\n    \n    Returns:\n    int: Maximum sum possible from starting at 'target' and ending at one corner of the triangle.\n    \"\"\"\n    if not triangle or not triangle[0]:\n        raise ValueError(\"Triangle must be non-empty.\")\n    \n    for i in range(len(triangle)):\n        if len(triangle[i]) != i + 1:\n            raise ValueError(f\"Row {i} has incorrect number of elements.\")\n        \n    rows = len(triangle)\n    dp = [[float('-inf')] * (target+1) for _ in range(rows)]\n    dp[0][0] = triangle[0][0]\n    \n    for row in range(1, rows):\n        for col in range(row + 1):\n            if col == 0:\n                dp[row][col] = dp[row-1][col] + triangle[row][col]\n            elif col == row:\n                dp[row][col] = dp[row-1][col-1] + triangle[row][col]\n            else:\n                dp[row][col] = max(dp[row-1][col-1], dp[row-1][col]) + triangle[row][col]\n                \n    return max(max(row) for row in dp)\n\n# Example usage\ntriangle_1 = [[1], [2, 1], [3, 3, 2]]\nprint(max_sum(triangle_1, 3))  # Output: 6\n\ntriangle_2 = [[1], [1, 2], [4, 1, 12]]\nprint(max_sum(triangle_2, 3))  # Output: 15\n\ntriangle_3 = [[2], [3, 2], [13, 23, 12]]\nprint(max_sum(triangle_3, 3))  # Output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(data, n):\n    return sorted(data, reverse=True)[:n]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsuface_cylinder(radius, height):\n    return 2 * 3.1415 * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def even_bit_set_number(num):\n    \"\"\"\n    This function takes an integer 'num' and returns a new integer with all its even bits set.\n    \n    Example:\n    - even_bit_set_number(10) returns 10 because binary representation is already all odd bits\n    - even_bit_set_number(20) returns 30 because binary representation becomes 11010 which has all even bits set\n    \n    :param num: Integer representing the number whose even bits we want to set\n    :return: New integer with all even bits of 'num' set\n    \"\"\"\n    # Calculate the shift amount needed to make every bit at position i even (i.e., divisible by 2)\n    shift_amount = len(bin(num & (-num))) - 3\n    # Set the even bits using bitwise OR operation from the left\n    result = num | ((-num) << shift_amount)\n    return result\n\n# Test cases\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sqrt' is not defined"
    ],
    "generated_code": "def no_of_triangle(side_length, max_angle):\n    \"\"\"\n    Returns the number of distinct equilateral triangles that can be formed\n    within an equilateral triangle of side length 'side_length' and angle range 'max_angle'.\n    \n    Parameters:\n    side_length (int): The length of each side of the outer equilateral triangle.\n    max_angle (int): The maximum possible angle in degrees for the inner angles of the equilateral triangles.\n    \n    Returns:\n    int: The number of different equilateral triangles that satisfy the conditions.\n         If no such triangles exist, returns -1.\n    \"\"\"\n    if side_length < 3 or max_angle > 90 or max_angle % 3 != 0:\n        return -1\n    \n    # Base case when all sides have been used up and there's no more space to form new triangles\n    def recursive_count(sides_used):\n        nonlocal count\n        if sides_used == 0:\n            if all(angle <= max_angle for _, angle in points):\n                count += 1\n            return\n        for i in range(3):\n            next_side = sides[i] + 1\n            if next_side > side_length:\n                break\n            next_points = [(next_x, y) for x in points for y in range(x+1, next_side)]\n            recursive_count(sides_used-1)\n        \n    points = [(0, 0), (side_length//2, side_length*sqrt(3)//2), \n              (side_length//2, -side_length*sqrt(3)//2)]\n    count = 0\n    sides = [1, 1, 1]\n    recursive_count(len(points))\n    \n    return count\n\n# Example usage\nprint(no_of_triangle(4, 2))  # Output should be 7\nprint(no_of_triangle(4, 3))  # Output should be 3\nprint(no_of_triangle(1, 3))  # Output should be -1",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef check_occurences(tuples_list):\n    # Dictionary to store counts of each tuple occurrence\n    occurrence_counts = defaultdict(int)\n    \n    # Loop through each tuple in the list\n    for tup in tuples_list:\n        # Increment the count for the tuple\n        occurrence_counts[tup] += 1\n    \n    # Dictionary to store results with tuple occurrences and their counts\n    result_dict = {}\n    \n    # Loop through all keys in the dictionary to find unique occurrences\n    for key in occurrence_counts.keys():\n        if occurrence_counts[key] > 1:\n            result_dict[(key[0], key[1])] = occurrence_counts[key]\n    \n    return result_dict",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def number_of_substrings(s):\n    \"\"\"\n    Counts the total number of non-empty substrings in a given string s.\n    \n    Args:\n        s (str): The input string for which the number of substrings is to be calculated.\n        \n    Returns:\n        int: The total number of non-empty substrings in the given string.\n    \"\"\"\n    n = len(s)\n    total_count = n * (n + 1) // 2\n    \n    # Subtracting 'n' because each substring is counted twice when we consider all possible starting points.\n    return total_count - n\n\n# Test cases\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import factorial\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    Calculate the total number of sequences of length n where each term is between k and m.\n    \n    Args:\n    n (int): The length of the sequence.\n    m (int): The maximum value for each term in the sequence.\n    \n    Returns:\n    int: The total number of valid sequences.\n    \"\"\"\n    # Initialize DP table with zeros\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] != 0:\n                lower_bound = max(dp[j], 2 * j)\n                upper_bound = min(m, dp[j])\n                count = min(dp[i - j], (m - lower_bound + 1) // 2)\n                dp[i] += count * dp[j]\n                \n    return dp[n]\n\n# Check function with provided data points\nprint(get_total_number_of_sequences(10, 4))  # Expected output: 4\nprint(get_total_number_of_sequences(5, 2))   # Expected output: 6\nprint(get_total_number_of_sequences(16, 3))  # Expected output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_list(old_list, new_list):\n    old_list[-1:] = new_list\n    return old_list",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - array_3d() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - array_3d() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - array_3d() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "import numpy as np\n\ndef array_3d(dims):\n    \"\"\"\n    Generate a 3D numpy array where every element is '*'.\n    \n    Args:\n    dims (tuple): A tuple of three integers representing depth, height and width respectively.\n    \n    Returns:\n    numpy.ndarray: A 3-dimensional numpy array with each element set to '*'.\n    \"\"\"\n    return np.full(dims, \"*\", dtype=str).reshape(*dims)\n\n# Check function using provided data points\nprint(array_3d((6, 4, 3)))\nprint(array_3d((5, 3, 4)))\nprint(array_3d((1, 2, 3)))",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(s):\n    return len(s)",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef sort_on_occurence(lst):\n    # Create a dictionary to count occurrences of each tuple's first element\n    count = defaultdict(int)\n    for tup in lst:\n        count[tup[0]] += 1\n    \n    # Sort the original list based on the number of times each tuple's first element appears\n    sorted_lst = sorted(lst, key=lambda x: (-count[x[0]], x))\n    \n    return sorted_lst",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    This function takes an integer as input and returns the smallest perfect square that is strictly greater than the input number.\n    \n    :param num: Integer - The starting point from where we need to find the next perfect square.\n    :return: Integer - The smallest perfect square greater than the input number.\n    \"\"\"\n    # Find the largest integer whose square is less than or equal to num\n    root = int(math.sqrt(num))\n    # Calculate the next perfect square using the formula: (root + 1) * (root + 1)\n    next_square = (root + 1) ** 2\n    \n    return next_square",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arr, n):\n    dp = [[-float('inf')] * (n+1) for _ in range(3)]\n    \n    for i in range(n):\n        currMax = arr[i]\n        prevMax = -float('inf')\n        \n        for j in range(i+1, n):\n            if arr[j] > prevMax:\n                prevMax = arr[j]\n                temp = currMax + prevMax\n            else:\n                temp = currMax\n            \n            if temp > dp[(i+1)%3][j]:\n                dp[(i+1)%3][j] = temp\n    \n    maxSum = -float('inf')\n    for i in range(n+1):\n        maxSum = max(maxSum, dp[i%3][-1])\n    \n    return maxSum\n\n# Test cases\nprint(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9))  # Expected output: 194\nprint(max_sum([80, 60, 30, 40, 20, 10], 6))              # Expected output: 210\nprint(max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8))         # Expected output: 138",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    x = n / 2\n    while True:\n        y = (x + n/x) / 2\n        if abs(y - x) < 0.0001:\n            return y\n        x = y",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in a given string.\n    \n    Parameters:\n    s (str): The input string\n    \n    Returns:\n    int: Length of the longest palindromic subsequence\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]\n\n# Test cases\nprint(lps(\"TENS FOR TENS\")) # Expected output: 5\nprint(lps(\"CARDIO FOR CARDS\")) # Expected output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\")) # Expected output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef harmonic_sum(n):\n    total = 0.0\n    for i in range(1, n + 1):\n        total += 1 / i\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    # Initialize counter to zero\n    count = 0\n    \n    # Loop through each item in the tuple\n    for item in tup:\n        if item == x:\n            count += 1\n            \n    # Return the final count\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, element):\n    for i in range(len(lst)):\n        lst.insert(i+1+i%2, element)\n    return lst\n\n# Test cases\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))  # ['c', 'Red', 'c', 'Green', 'c', 'Black']\nprint(insert_element(['python', 'java'], 'program'))  # ['program', 'python', 'program', 'java']\nprint(insert_element(['happy', 'sad'], 'laugh'))      # ['laugh', 'happy', 'laugh', 'sad']",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import cmath\n\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to its polar representation.\n    \n    Args:\n    complex_number (complex): The complex number in rectangular form.\n    \n    Returns:\n    tuple: A tuple containing two elements - magnitude and angle in radians.\n    \"\"\"\n    magnitude = abs(complex_number)\n    angle = cmath.phase(complex_number)\n    return (magnitude, angle)\n\n# Test cases to verify the correctness of the solution\nassert convert(1j) == (1.0, 0.0), \"Test case 1 failed\"\nassert convert(-1) == (1.0, 3.141592653589793), \"Test case 2 failed\"\nassert convert(1 + 1j) == (1.4142135623730951, 0.7853981633974483), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    # Initialize counter for integers\n    integer_count = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Check if the current element is an instance of int\n        if isinstance(item, int):\n            # Increment the counter if it's an integer\n            integer_count += 1\n            \n    # Return the total count of integers found\n    return integer_count",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def words_ae(text):\n    result = []\n    for word in text.split():\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def combinations_colors(colours, n):\n    import itertools\n    return list(itertools.product(colours, repeat=n))",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than n.\n    \n    Args:\n    n (int): A non-negative integer\n    \n    Returns:\n    int: The count of prime numbers less than n\n    \"\"\"\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    p = 2\n    while p * p < n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    return sum(primes)",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(x, y):\n    return(y,x)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef count_odd(nums: List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 != 0, nums)))",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'repeat' is not defined",
      "Test 2: FAIL - name 'repeat' is not defined",
      "Test 3: FAIL - name 'repeat' is not defined"
    ],
    "generated_code": "def maximize_elements(tuple1, tuple2):\n    # Sort each tuple based on the second element in descending order\n    sorted_tuple1 = sorted(tuple1, key=lambda x: x[1], reverse=True)\n    sorted_tuple2 = sorted(tuple2, key=lambda x: x[1], reverse=True)\n    \n    # Combine the sorted tuples and sort them again for maximum values at first position\n    combined_sorted = sorted(zip(sorted_tuple1 + sorted_tuple2, repeat(1)))\n    max_values, result = [], []\n    \n    # Assign elements from both sorted lists with the maximum value to new list\n    for item in combined_sorted:\n        if len(result) < 2 or item[1] > result[-1][1]:\n            result.append(item[0])\n            \n    return tuple(result)",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "import math\n\ndef newman_shanks_williams(n):\n    def is_newman_shanks_williams_prime(x):\n        # Implementing the logic for checking if x is a Newman-Shanks-Wilkins prime\n        # This function would contain the algorithm specific to identifying such primes\n        pass  # Placeholder, implement the actual logic here\n    \n    current = 1\n    while True:\n        if is_newman_shanks_williams_prime(current):\n            return current\n        current += 1\n\n# Test the function with provided data points\nassert newman_shanks_williams(3) == 7, \"Test case 1 failed\"\nassert newman_shanks_willsamn(4) == 17, \"Test case 2 failed\"\nassert newman_shanks_willsan(5) == 41, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def division_elements(tuple1, tuple2):\n    # Check if lengths of both tuples are equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n\n    # Perform element-wise division\n    result = [x / y for x, y in zip(tuple1, tuple2)]\n    \n    return result",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, k):\n    return lst[:k], lst[k:]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(age_human_years):\n    # Conversion factor from human years to dog years\n    conversion_factor = 7\n    \n    # Calculate dog's age in dog years\n    dog_years = age_human_years * conversion_factor + 2\n    return dog_years",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'square_Sum' is not defined",
      "Test 2: FAIL - name 'square_Sum' is not defined",
      "Test 3: FAIL - name 'square_Sum' is not defined"
    ],
    "generated_code": "def square_sum(n):\n    # Initialize sum of squares\n    total = 0\n    \n    # Loop through the first n odd natural numbers and calculate their squares\n    for i in range(1, 2*n, 2):\n        total += i**2\n    \n    return total",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    A star number is defined as n^3 - (n-1)^3 for all n >= 1.\n    This function returns the value of the specified nth star number.\n    \n    Args:\n    n : int\n        The position in the sequence of star numbers.\n        \n    Returns:\n    int\n        The nth star number.\n    \"\"\"\n    return n**3 - (n-1)**3\n\n# Test cases\nprint(find_star_num(3))  # Expected output: 37\nprint(find_star_num(4))  # Expected output: 73\nprint(find_star_num(5))  # Expected output: 121",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_even_and_even_index(arr, index):\n    # Initialize sum of even numbers at even indices to zero\n    sum_even = 0\n    \n    # Loop through the array starting from the second element (index starts from 0)\n    for i in range(1, len(arr), 2):  # Skipping every other element\n        if arr[i] % 2 == 0:  # Check if the number is even\n            sum_even += arr[i]\n    \n    return sum_even\n\n# Test cases\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6))  # Expected output: 30\nprint(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10))  # Expected output: 26\nprint(sum_even_and_even_index([5, 6, 12, 1], 4))  # Expected output: 12",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 5\n    return total",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(lst):\n    # Extracting the last elements of each tuple in the list\n    return [item[2] for item in lst]\n\n# Test cases to verify the correctness of the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple_a, tuple_b):\n    # Extracting elements at each index from both tuples and subtracting them element-wise\n    result = [a - b for a, b in zip(tuple_a, tuple_b)]\n    return tuple(result)\n\n# Test cases to verify the correctness of the function\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'binom' is not defined",
      "Test 2: FAIL - name 'binom' is not defined",
      "Test 3: FAIL - name 'binom' is not defined"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n):\n    # Calculate the sum of even-indexed binomial coefficients for n elements\n    return sum(binom(n, i) * pow(-1, i) for i in range(n+1 if n % 2 == 0 else n) if i % 2 == 0)",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, n, x):\n    # Find the index of the first occurrence of x in arr.\n    idx = -1\n    for i in range(n):\n        if arr[i] == x:\n            idx = i\n            break\n    \n    # If x is not found, return -1 indicating no occurrence.\n    if idx == -1:\n        return -1\n    else:\n        # Calculate the number of times x has been removed until it's at the end.\n        count_removed_until_end = idx + 1\n        \n        # Calculate the total length of the array.\n        total_length = len(arr)\n        \n        # Return the position where the last occurrence was located before removal.\n        return total_length - count_removed_until_end",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    This function calculates the volume of a cylinder given its radius and height.\n    \n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * (radius ** 2) * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(dict_input, threshold):\n    # Filter out keys whose corresponding values are less than the threshold\n    filtered_dict = {key:value for key,value in dict_input.items() if value >= threshold}\n    return filtered_dict\n\n# Test cases to verify the correctness of the solution\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190) == {'Pierre Cox': 190}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_first_elements(tuple_like_data):\n    \"\"\"\n    This function takes a tuple-like data structure and returns the count of elements that occur \n    immediately after an opening parenthesis.\n    \n    Args:\n    - tuple_like_data (tuple): A tuple containing various types of elements including tuples themselves.\n    \n    Returns:\n    - int: The count of elements occurring right after each opening parenthesis found in the input tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(tuple_like_data)):\n        if isinstance(tuple_like_data[i], tuple):\n            for j in range(i + 1, len(tuple_like_data)):\n                if isinstance(tuple_like_data[j], int):\n                    count += 1\n    return count",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_num_decagonal(n):\n    \"\"\"\n    This function calculates the nth decagonal number.\n    \n    Args:\n        n (int): The position of the decagonal number in the sequence.\n        \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    # Calculate the nth decagonal number using the formula and add 1 for 1-based indexing\n    return 4 * n ** 2 - 3 * n + 1\n\n# Test cases to verify the correctness of the solution\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return True, i\n    return False, -1\n\n# Test cases\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31))\nprint(sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61))\nprint(sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48))",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(lst):\n    # Convert list to set and compare its length with original list's length\n    return len(lst) == len(set(lst))\n\n# Test cases\nprint(all_unique([1,2,3]))   # Expected output: True\nprint(all_unique([1,2,1,2])) # Expected output: False\nprint(all_unique([1,2,3,4,5])) # Expected output: True",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validate(number):\n    # Convert the number to a string for easier processing\n    num_str = str(number)\n    \n    # Create a dictionary to count occurrences of each digit\n    digit_count = {str(i): 0 for i in range(10)}\n    \n    # Count the occurrences of each digit\n    for digit in num_str:\n        digit_count[digit] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for key, value in digit_count.items():\n        if int(key) > value:\n            return False\n    return True\n\n# Test cases\nprint(validate(1234))  # Expected output: True\nprint(validate(51241)) # Expected output: False\nprint(validate(321))   # Expected output: True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, item):\n    return lst == [item] * len(lst)",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"ab{2,3}\"  # Regex pattern for matching strings with 'a' followed by two to three 'b's\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_two_three(\"ac\"))  # Expected output: Not matched!\nprint(text_match_two_three(\"dc\"))  # Expected output: Not matched!\nprint(text_match_two_three(\"abbbba\"))  # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport itertools\n\ndef max_sub_array_sum_repeated(arr: List[int], n: int, m: int) -> int:\n    arr *= m # Repeat the array 'm' times\n    dp = [[0] * len(arr) for _ in range(len(arr))] # Dynamic Programming table\n    \n    # Initialize DP table with 0s\n    for i in range(len(arr)):\n        dp[i][i] = arr[i]\n    \n    for length in range(2, len(arr) + 1): # Iterate over all possible lengths\n        for start in range(len(arr) - length + 1):\n            end = start + length - 1\n            if arr[start] > 0 and arr[end] > 0: # If both elements are positive\n                dp[start][end] = dp[start+1][end-1] + arr[start] + arr[end]\n            elif arr[start] < 0 and arr[end] < 0: # If both elements are negative\n                dp[start][end] = min(dp[start+1][end], dp[start][end-1])\n            else: # If one element is positive and other is negative\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n                \n    return max(dp[0]) # Return the maximum value from the DP table",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'square_Sum' is not defined",
      "Test 2: FAIL - name 'square_Sum' is not defined",
      "Test 3: FAIL - name 'square_Sum' is not defined"
    ],
    "generated_code": "def square_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += (i ** 2)\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from functools import reduce\n\ndef modular_inverse(numbers, mod, p):\n    # Calculate nCr using Binomial Theorem and Modular Inverse\n    def binomial(n, r, p):\n        if r == 0 or r == n:\n            return 1\n        res = 1\n        for i in range(r):\n            res *= ((n - i) * pow(i + 1, p - 2, p)) % p\n            res %= p\n        return res\n    \n    total_count = len(numbers)\n    \n    # Count elements with their indices as their modular inverses under mod\n    counts = [0] * (total_count + 1)\n    for i in numbers:\n        inv = pow(i, mod - 2, mod)\n        counts[inv] += 1\n    \n    result = reduce(lambda x, y: x * y, counts[1:], 1)\n    \n    # Check each element from mod-1 down to 2\n    for num in reversed(range(mod)):\n        idx = mod - 1 - num\n        if idx >= 0 and counts[idx] > 0:\n            result -= counts[idx]\n    \n    return result\n\n# Example test cases\nprint(modular_inverse([1, 6, 4, 5], 4, 7))  # Expected output: 2\nprint(modular_inverse([1, 3, 8, 12, 12], 5, 13))  # Expected output: 3\nprint(modular_inverse([2, 3, 4, 5], 4, 6))  # Expected output: 1",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    # Initialize count of odd days\n    odd_days = 0\n    \n    # Loop through each month in the year\n    for month in range(1, 13):\n        if month in [4, 6, 9, 11]:\n            # Leap year condition check for April, June, September, November\n            leap_year = True if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)) else False\n            if not leap_year:\n                odd_days += 1  # Extra day added to every 4th non-leap year\n        elif month == 2:\n            # February in non-leap years\n            if year % 4 != 0:\n                odd_days += 1  # February has an extra day on common years\n        else:\n            # All other months\n            odd_days += 1\n            \n    return odd_days",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_length(lists):\n    # Find the list with the maximum length and return its length along with the list itself.\n    return len(max(lists, key=len)), max(lists, key=len)",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1  # Base case: no way to paint an empty fence\n    \n    prev = 0  # Number of ways to paint with 'prev' posts\n    curr = k  # Current number of ways to paint current post\n    \n    for _ in range(1, n + 1):\n        # Update values for next state\n        temp = curr % 2  # Calculate previous value modulo 2\n        curr = (k * (curr - temp)) % (10**9 + 7)  # New number of ways\n        prev = temp\n    \n    return curr\n\n# Test cases\nprint(count_no_of_ways(2, 4))  # Expected output: 16\nprint(count_no_of_ways(3, 2))  # Expected output: 6\nprint(count_no_of_ways(4, 4))  # Expected output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero.\")\n    \n    quotient = dividend // divisor\n    return quotient",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, c):\n    b = math.sqrt(c**2 - a**2)\n    return round(b, 5)",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    # Initialize max_value with the first element of the list\n    max_value = lst[0]\n    \n    # Iterate through each item in the list\n    for i in range(1, len(lst)):\n        # If the current item is greater than max_value, update max_value\n        if lst[i] > max_value:\n            max_value = lst[i]\n            \n    return max_value",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(n):\n    # Initialize sum of divisors\n    s = 0\n    # Loop from 1 to n/2\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            # If both divisors are equal, add it once\n            if i * i == n:\n                s += i\n            else:\n                # Add both divisors\n                s += i + n // i\n    return s",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(list1, list2):\n    return [[item] for item in list1 if any(item == sublist for sublist in list2)]",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    # Initialize variables to store the name and total score with the smallest score so far\n    name = ''\n    min_score = float('-inf')\n    \n    for name, score in lst:\n        if score > min_score:\n            # Update both the name and total score when finding a higher score\n            min_score = score\n            name = name\n    \n    return (name, sum(score for _, score in lst))",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\nfrom typing import List\n\ndef count_binary_seq(n: int) -> float:\n    \"\"\"\n    Calculate the number of binary sequences of length 2n where the sum of the first n bits equals the sum of the last n bits.\n    \n    Args:\n    n : int - The total number of bits in each sequence pair.\n    \n    Returns:\n    float - The count of valid binary sequences.\n    \"\"\"\n    # Number of ways to choose n elements from k elements (C(k,n))\n    # Here we need to calculate C(2*n, n)\n    count = 2 ** ((2 * n) + (2 * n)) / math.factorial(2 * n)\n    # Since we have counted both pairs and single element twice, divide by 2\n    return count / 2\n\n# Check function with provided data points\nassert abs(count_binary_seq(1) - 2.0) < 1e-9\nassert abs(count_binary_seq(2) - 6.0) < 1e-9\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object has no attribute 'items'",
      "Test 2: FAIL - 'int' object has no attribute 'items'",
      "Test 3: FAIL - 'str' object has no attribute 'items'"
    ],
    "generated_code": "def dict_depth(d):\n    return max([len(list(flatten(d))) for d in d.values()]) if isinstance(d, dict) else 0\n\ndef flatten(x):\n    return sum(map(flatten, x.items()) + list(x.values()), [])",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_Bit_Number(number):\n    # Count the number of bits in the binary representation of the given number.\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    \n    return count",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solve(nums, n):\n    # Count inversions in the array\n    def count_inversions(arr):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    count += 1\n        return count\n    \n    # Check if the number of inversions is equal to the given threshold 'n'\n    return count_inversions(nums) == n\n\n# Test cases\nprint(solve([1,0,2],3))  # Expected output: True\nprint(solve([1,2,0],3))  # Expected output: False\nprint(solve([1,2,1],3))  # Expected output: True",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_Element() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - find_Element() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - find_Element() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def find_Element(arr, k_rotations, target_index):\n    n = len(arr)\n    if k_rotations == 0:\n        return arr[target_index]\n    \n    # Rotate array to the right\n    rotated_array = arr[-k_rotations:] + arr[:-k_rotations]\n    \n    # Find the new position of the target element in the rotated array\n    for i in range(n - k_rotations + 1):\n        if rotated_array[i] == target_index:\n            return i\n    \n    return None",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words):\n    for i in range(len(words) - 1):\n        if words[i].startswith(\"p\") and words[i + 1].startswith(\"p\"):\n            return (words[i], words[i + 1])\n    return None",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_increasing_subseq(nums, n, k, m):\n    # Initialize a list to store the maximum sums for each index up to the end\n    dp = [float('-inf')] * len(nums)\n    \n    # Set initial values\n    dp[-1] = nums[-1]\n    dp[-2] = max(nums[-2], nums[-1])\n    \n    # Fill the DP table in reverse order up to the ith index\n    for i in range(len(nums)-3, -1, -1):\n        if i < n-1:\n            continue\n        \n        # Check all possible starting points from k onwards\n        for j in range(k+1):\n            if j >= i + 1:\n                break\n            \n            # Calculate the maximum sum ending at the current position with the element at 'k'\n            dp[i] = max(dp[j] + nums[k], dp[i])\n        \n        # Update the maximum sum ending at the last index\n        dp[i] = max(dp[i], nums[i])\n    \n    # The result will be stored in dp[0], adjusted for the case where no valid subsequence exists\n    return dp[n-1] if dp[n-1] != float('-inf') else -float('inf')",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def colon_tuplex(tuplex, start_index, end_index):\n    return tuplex[:start_index] + tuplex[end_index:]",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - min() arg is an empty sequence",
      "Test 2: FAIL - min() arg is an empty sequence",
      "Test 3: FAIL - min() arg is an empty sequence"
    ],
    "generated_code": "from typing import List\n\ndef large_product(list1: List[int], list2: List[int], num_products: int) -> List[int]:\n    max_length = len(list1)\n    result = []\n    for i in range(max_length - num_products + 1):\n        product = 1\n        for j in range(num_products):\n            product *= list1[i + j] * list2[j]\n        if product > min(result):\n            result.clear()\n            result.append(product)\n        elif product == min(result):\n            result.append(product)\n    return result",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    \"\"\"\n    This function takes two arguments 'a' and 'b', compares them, and returns the larger of the two.\n    \n    Parameters:\n        a (int): First number to compare.\n        b (int): Second number to compare.\n        \n    Returns:\n        int: The larger of the two input numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_left_most_unset_bit(n):\n    # Loop until n becomes zero\n    while n and (n & -n) == n:\n        n &= n - 1\n    return n",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\nfrom scipy.constants import pi\n\ndef volume_cone(radius, height):\n    return (1/3) * pi * radius**2 * height",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    # Filter out non-positive numbers from the list and convert the result to a set for uniqueness\n    unique_positives = set(filter(lambda x: x > 0, lst))\n    \n    # Convert the set back to a list if necessary and return it\n    return list(unique_positives)\n\n# Test cases\nprint(pos_nos([-1,-2,1,2]))  # Should return [1, 2]\nprint(pos_nos([3,4,-5]))     # Should return [3, 4]\nprint(pos_nos([-2,-3,1]))    # Should return [1]",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, m):\n    # Initialize variables to store the current row and previous row sums\n    cur_row_sum = 0\n    prev_row_sum = 0\n    \n    for i in range(len(grid[0])):\n        # Update the previous row sum with the current row sum plus the current element minus its position from the start\n        prev_row_sum += cur_row_sum + grid[i][m]\n        \n        # Add the current element to the current row sum\n        cur_row_sum = prev_row_sum - grid[m-1][i]\n    \n    return prev_row_sum",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    # Initialize variables to store the maximum length and its corresponding word\n    max_len = -1\n    result_word = \"\"\n\n    # Split the string into words\n    for word in s.split():\n        if len(word) % 2 == 0:\n            # Update the maximum length and result word if necessary\n            if len(word) > max_len:\n                max_len = len(word)\n                result_word = word\n    \n    return result_word",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, x):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1] != x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 6, 9, 9, 9], 9))  # Output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6))  # Output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modified_encode(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        value = lst[i]\n        i += 1\n        while i < len(lst) and lst[i] == value:\n            count += 1\n            i += 1\n        if count > 1:\n            result.append([count, value])\n        else:\n            result.append(value)\n    return result",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_volume(sum_of_sides):\n    \"\"\"\n    Finds the maximum volume of a cuboid with integer side lengths whose total sum is equal to the input.\n    \n    Parameters:\n        sum_of_sides (int): The total sum of the cube's side lengths.\n        \n    Returns:\n        int: The maximum possible volume of the cuboid.\n    \"\"\"\n    # Since we want to maximize the volume and all dimensions must be positive integers,\n    # one dimension will be as large as possible while satisfying the equation.\n    largest_side = min(sum_of_sides // 6, 5)\n    remaining_sum = sum_of_sides - largest_side * 6\n    \n    # One dimension remains at its maximum value which is half of the remaining sum.\n    second_largest_side = remaining_sum // 2\n    \n    # Calculate third side assuming it equals first two for maximum volume.\n    third_largest_side = largest_side + 1 if remaining_sum % 2 else second_largest_side + 1\n    \n    return largest_side * second_largest_side * third_largest_side\n\n# Test cases\nassert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(input_string):\n    # Define the pattern for a five-character word\n    pattern = r'\\b\\w{5}\\b'\n    \n    # Use regex to find all matches of the pattern in the input string\n    words = re.findall(pattern, input_string)\n    \n    return words",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_difference' is not defined",
      "Test 2: FAIL - name 'sum_difference' is not defined",
      "Test 3: FAIL - name 'sum_difference' is not defined"
    ],
    "generated_code": "import math\nfrom functools import reduce\n\ndef sum_square_diff(n):\n    # Calculate the square of the sum of first n natural numbers using reduce\n    square_of_sum = reduce(lambda x, y: x + y, range(1, n+1)) ** 2\n    \n    # Calculate the sum of the squares of first n natural numbers using reduce\n    sum_of_squares = reduce(lambda x, y: x + y, map(lambda x: x * x, range(1, n+1)))\n    \n    # Return the difference between the two calculated values\n    return square_of_sum - sum_of_squares\n\n# Check function with provided data points\nprint(sum_square_diff(12))  # Expected output: 5434\nprint(sum_square_diff(20))  # Expected output: 41230\nprint(sum_square_diff(54))  # Expected output: 2151270",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_demlo(num_str):\n    num_list = list(map(int, num_str))\n    demlo_num = ''\n    while len(demlo_num) < len(num_str):\n        if len(demlo_num) % 2 == 0:\n            for i in range(len(demlo_num), -1, -1):\n                demlo_num += str(sum([num_list[i], num_list[-i-1]]))\n        else:\n            for i in range(1, len(num_str)+1):\n                demlo_num += str(sum([num_list[i-1], num_list[len(num_str)-i]]))\n    return demlo_num[::-1]\n\n# Test cases\nprint(find_demlo(\"111111\"))  # Expected output: \"12345654321\"\nprint(find_demlo(\"1111\"))    # Expected output: \"1234321\"\nprint(find_demlo(\"13333122222\"))  # Expected output: \"123456789101110987654321\"",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_min(nums):\n    \"\"\"\n    Finds and returns the indices of the minimum value in a given list.\n    \n    Parameters:\n    nums (list): A list of integers.\n    \n    Returns:\n    list: Indices of the minimum integer values in 'nums'.\n    \"\"\"\n    min_index = nums.index(min(nums))\n    return [min_index + i for i in range(len(nums)) if nums[i] == min(nums)]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    pos = []\n    neg = []\n    \n    # Separate elements into two lists based on their sign\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    \n    result = []\n    \n    # Alternate between positive and negative elements\n    j = 0\n    k = 0\n    \n    while j < len(pos) or k < len(neg):\n        if j < len(pos):\n            result.append(pos[j])\n            j += 1\n        if k < len(neg):\n            result.append(neg[k])\n            k += 1\n            \n    return result\n\nprint(re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)) # Output: [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nprint(re_arrange([1, 2, 3, -4, -1, 4], 6)) # Output: [-4, 1, -1, 2, 3, 4]\nprint(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)) # Output: [-4, 4, -3, 7, -9, 9, 77, 5]",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_alternates(lst):\n    result = []\n    i = 0\n    while i < len(lst) - 1:\n        result.append(lst[i + 1] + lst[i])\n        i += 2\n    return tuple(result)\n\n# Test cases\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34)))  # Expected output: ((46, 18))\nprint(sum_of_alternates((1, 2, 3, 4, 5)))       # Expected output: ((6, 9))\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))    # Expected output: ((21, 18))",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef get_Min_Squares(n):\n    if n <= 0:\n        return 0\n    \n    count = 0\n    while n > 0:\n        # Find the largest square less than or equal to n\n        i = int(math.sqrt(n))\n        count += 1\n        n -= i**2\n    \n    return count",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def most_occurrences(words_list):\n    from collections import Counter\n    \n    # Count occurrences of each word\n    word_counts = Counter(words_list)\n    \n    # Find the word with maximum occurrences\n    max_word = max(word_counts.items(), key=lambda x: x[1])[0]\n    \n    return max_word",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    \"\"\"\n    Function to determine if the given sides of a triangle form an isosceles triangle.\n    \n    Parameters:\n    a (int): Length of side A\n    b (int): Length of side B\n    c (int): Length of side C\n    \n    Returns:\n    bool: True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    # Check for isosceles condition and return boolean value accordingly\n    return a == b or b == c or a == c\n\n# Test cases to verify the correctness of the function\nprint(check_isosceles(6,8,12))   # Expected output: False\nprint(check_isosceles(6,6,12))   # Expected output: True\nprint(check_isosceles(6,16,20))  # Expected output: False",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, n, k):\n    \"\"\"\n    Rotate a given list by 'n' elements in the left direction.\n    \n    Args:\n        lst (list): The original list to be rotated.\n        n (int): Number of positions to shift each item in the list.\n        k (int): The length of sublists to perform rotation on.\n        \n    Returns:\n        list: The new list after rotating by 'k' sublists.\n    \"\"\"\n    return [lst[i:i+k] for i in range(n)][::-1]\n\n# Test Cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # Expected output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))   # Expected output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))   # Expected output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(nums):\n    # Initialize counter for negative numbers\n    neg_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is less than zero, increment the counter\n        if num < 0:\n            neg_count += 1\n            \n    # Return the total count of negative numbers\n    return neg_count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_char(input_string):\n    # Define a lambda function to match strings of length 4, 5, and 6 letters\n    word_match = lambda s: re.findall(r'\\b\\w{4,}\\b|(?<=\\s)\\w{5,}(?=\\s)|\\W+\\w{6}\\W+', s)\n    result = word_match(input_string.lower())\n    return [word for word in result if len(word) > 3]  # Filter out words shorter than 3 characters\n\n# Test cases\nprint(find_char('For the four consumer complaints contact manager AKR reddy'))  # Output: ['For', 'the', 'four', 'AKR', 'reddy']\nprint(find_char('Certain service are subject to change MSR'))  # Output: ['are', 'MSR']\nprint(find_char('Third party legal desclaimers'))  # Output: ['Third', 'party', 'legal']",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_unset_bits(number):\n    # Count the number of unset bits in the binary representation of the number\n    return bin(number).count('0')",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(input_string):\n    frequency = {}\n    for char in input_string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_by_second_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test cases\nprint(sort_by_second_element([['a', 10], ['b', 5], ['c', 20], ['d', 15]]))\nprint(sort_by_second_element([['452', 10], ['256', 5], ['100', 20], ['135', 15]]))\nprint(sort_by_second_element([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]))",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check for the validity of a triangle based on the Pythagorean theorem.\n    return abs(a**2 + b**2 - c**2) < 1e-6 or abs(b**2 + c**2 - a**2) < 1e-6 or abs(c**2 + a**2 - b**2) < 1e-6",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(start, end, step):\n    return ((start + end) * (end - start + 1)) // 2 * step",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import calendar\n\ndef check_monthnum(month_name):\n    \"\"\"\n    This function checks if the provided month name has exactly 28 days.\n    \n    Args:\n        month_name (str): The name of the month to check.\n        \n    Returns:\n        bool: True if the month has exactly 28 days, False otherwise.\n    \"\"\"\n    # Get the number of days in the month from the calendar module\n    days_in_month = calendar.monthrange(2023, 1)[1]\n    \n    return days_in_month == 28 and month_name.lower() != \"february\"\n\n# Test cases\nprint(check_monthnum(\"February\"))   # Expected output: True\nprint(check_monthnum(\"January\"))    # Expected output: False\nprint(check_monthnum(\"March\"))      # Expected output: False",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    \"\"\"\n    This function checks if a given text ends with a word.\n    \n    Args:\n        text (str): The input text to check.\n        \n    Returns:\n        str: A message indicating whether a match was found ('Found a match!') or not ('Not matched!').\n    \"\"\"\n    # Use regex to search for a whole word at the end of the text\n    pattern = r'\\w+\\.$'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_word(\"python.\"))   # Expected output: Found a match!\nprint(text_match_word(\"python.\"))   # Expected output: Found a match!\nprint(text_match_word(\"  lang  \"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    result = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                result += 1\n    return result",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(l, r):\n    # Initialize the maximum occurrence and the current divisor\n    max_occurrence = 0\n    curr_divisor = 1\n    \n    # Loop through all possible divisors from l to r\n    for i in range(l, r + 1):\n        count = 0\n        \n        # Check if i is divisible by every number from l to r\n        for j in range(l, r + 1):\n            if j % i == 0:\n                count += 1\n        \n        # Update the maximum occurrence if necessary\n        if count > max_occurrence:\n            max_occurrence = count\n            curr_divisor = i\n            \n    return curr_divisor",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Sort the array in ascending order\n    sorted_nums = sorted(set(nums))\n    # Return the sum of the first three elements\n    return sum(sorted_nums[:3])",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    # Convert the input set into an ordered tuple and return it.\n    return tuple(sorted(input_set))",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from heapq import heappush, heappop\nimport math\nfrom typing import List\n\ndef find_minimum_range(arrays: List[List[int]]) -> tuple:\n    min_heap = []\n    max_value = -math.inf\n    \n    for i in range(len(arrays)):\n        if arrays[i]:\n            heappush(min_heap, (arrays[i][0], i))\n            max_value = max(max_value, arrays[i][0])\n    \n    result = (-min_heap[0][0], max_value)\n    \n    while len(min_heap) == len(arrays):\n        _, array_index = heappop(min_heap)\n        next_val = arrays[array_index].pop(0)\n        \n        if next_val > result[1]:\n            result = (next_val, result[1])\n            \n        if arrays[array_index]:\n            if next_val < arrays[array_index][-1]:\n                arrays[array_index].append(next_val)\n                heappush(min_heap, (arrays[array_index][0], array_index))\n                max_value = max(max_value, next_val)\n            else:\n                heappush(min_heap, (arrays[array_index].pop(), array_index))\n                \n    return result",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    num_digits = sum(c.isdigit() for c in s)\n    num_letters = len(s) - num_digits\n    return num_digits, num_letters",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Odd_Squares(n_start, n_end):\n    count = 0\n    for i in range(n_start, n_end + 1):\n        is_odd_factor_count = 0\n        root = int(i ** 0.5)\n        if root * root == i:\n            is_odd_factor_count += 1\n        for j in range(1, root + 1):\n            if i % (j * (i // j)) == 0 and j != i // j:\n                is_odd_factor_count += 1\n        if is_odd_factor_count > 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(lst):\n    diffs = []\n    for i in range(1, len(lst)):\n        diff = lst[i] - lst[i-1]\n        diffs.append(diff)\n    return diffs",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zigzag' is not defined",
      "Test 2: FAIL - name 'zigzag' is not defined",
      "Test 3: FAIL - name 'zigzag' is not defined"
    ],
    "generated_code": "import math\n\ndef calculate_zigzag_number(n, k):\n    if n == k:\n        return int(math.pow(k, k))\n    else:\n        return int((k - 1) * pow(k, n - 1))\n\n# Test cases\nprint(calculate_zigzag_number(4, 3))  # Expected output: 5\nprint(calculate_zigzag_number(4, 2))  # Expected output: 4\nprint(calculate_zigzag_number(3, 1))  # Expected output: 1",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length, breadth):\n    # Initialize total and corner counters\n    total = 0\n    corner = 0\n    \n    # Iterate through each possible square size within the given dimensions\n    for i in range(1, min(length, breadth) + 1):\n        if length >= i:\n            # Check if there is enough space to form an i x i square horizontally\n            if length - i >= 0:\n                total += length // i * ((length - i) // i + 1)\n            else:\n                total += (i * (i - 1)) // 2\n            \n            if breadth >= i:\n                # Check if there is enough space to form an i x i square vertically\n                if breadth - i >= 0:\n                    total += breadth // i * ((breadth - i) // i + 1)\n                else:\n                    total += (i * (i - 1)) // 2\n        else:\n            break\n    \n    # Subtract the corners counted twice due to overlapping\n    total -= corner\n    \n    return total\n\n# Test cases\nprint(count_Squares(4, 3))  # Expected output: 20\nprint(count_Squares(1, 2))  # Expected output: 2\nprint(count_Squares(2, 2))  # Expected output: 5",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import defaultdict\n\ndef find_ways(n):\n    # Create an empty dictionary to store results for different lengths\n    dp = defaultdict(int)\n    \n    # Base case initialization\n    dp[0] = 1\n    \n    # Iterate over possible values and their corresponding sum increments\n    for i in range(1, n + 1):\n        increment = 0\n        while True:\n            if increment > n // 2:\n                break\n            dp[i] += dp[increment]\n            increment += i\n    \n    return dp[n]\n\n# Test cases to verify the correctness of the function\nassert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check(binary_string):\n    # Check if the string contains only '0's and '1's\n    if re.fullmatch(r'[01]+', binary_string) is None:\n        return \"No\"\n    \n    return \"Yes\"\n\n# Test cases\nprint(check(\"01010101010\"))  # Expected output: Yes\nprint(check(\"name0\"))       # Expected output: No\nprint(check(\"101\"))         # Expected output: Yes",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def minimum_Length(s):\n    char_count = {}\n    \n    # Count occurrences of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    min_length = len(s)\n    \n    # Try removing each character and find the minimum length possible\n    for char in char_count:\n        new_string = \"\"\n        remaining_chars = set()\n        \n        # Check characters left after removal\n        for i in range(len(s)):\n            if char_count[s[i]] > 1:\n                remaining_chars.add(s[i])\n            elif char != s[i]:\n                new_string += s[i]\n        \n        # Update maximum length found\n        if len(new_string) < min_length:\n            min_length = len(new_string)\n        \n        # Add back removed characters if needed\n        while remaining_chars:\n            for j in reversed(range(len(new_string))):\n                if s[j] not in remaining_chars:\n                    continue\n                new_string += s[j]\n                remaining_chars.remove(s[j])\n                break\n                \n    return min_length",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    # Initialize an empty list to store the elements and their counts\n    data = []\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the element is not already in the list, add it with count 1\n        if arr[i] not in data:\n            data.append((arr[i], 1))\n        else:\n            # If the element is found, increment its count\n            data[data.index((arr[i], 1))][1] += 1\n    \n    # Sort the list based on the second item of each tuple (count)\n    data.sort(key=lambda x: x[1])\n    \n    # Check if there exists at least one element that occurs exactly 'k' times\n    if len(data) >= k:\n        # Return the first element from the sorted list whose count equals 'k'\n        return data[k-1][0]\n    else:\n        # If no such element exists, return -1 (though this case shouldn't happen as per problem constraints)\n        return -1\n\n# Example check function calls\nprint(first_Element([0,1,2,3,4,5],6,1))  # Expected output: 0\nprint(first_Element([1,2,1,3,4],5,2))    # Expected output: 1\nprint(first_Element([2,3,4,3,5,7,1,2,3,5],10,2))  # Expected output: 2",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_chars(input_string):\n    # Check if the length of the string is equal to its length when converted to a set.\n    # If they are not equal, it means there is at least one duplicate character.\n    return len(set(input_string)) == len(input_string)",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(data_list, col_index):\n    return [[row[i] for i in range(len(row)) if i != col_index] for row in data_list]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(n, first_term, common_difference):\n    # Calculate the nth term using the formula for arithmetic progression\n    return first_term + (n - 1) * common_difference",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - float division by zero"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    # Calculate the area covered by one rectangle within the circle\n    area_of_one_rectangle = math.pi * r**2\n    \n    # Calculate the total area of all possible rectangles\n    total_area_of_rectangles = 4 * math.sqrt(math.pi) * r**2 - 2 * math.pi * r**2\n    \n    # The number of rectangles is the total area divided by the area of one rectangle\n    num_of_rectangles = int(total_area_of_rectangles / area_of_one_rectangle)\n    \n    return num_of_rectangles",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    \"\"\"\n    This function takes in two angles and returns the third angle of a triangle.\n    \n    :param angle1: int - one angle of the triangle\n    :param angle2: int - second angle of the triangle\n    :return: int - the third angle of the triangle\n    \n    Example usage:\n    >>> find_angle(47, 89)\n    44\n    >>> find_angle(45, 95)\n    40\n    >>> find_angle(50, 40)\n    90\n    \"\"\"\n    return 180 - angle1 - angle2\n\n# Check function with provided data points\nassert find_angle(47, 89) == 44\nassert find_angle(45, 95) == 40\nassert find_angle(50, 40) == 90\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_max(tuples_list):\n    # Initialize max_value with the first tuple's max value\n    max_value = max(x for _, x in tuples_list)\n    return max_value\n\n# Test cases\nprint(find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]))  # Expected output: 10\nprint(find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]))  # Expected output: 11\nprint(find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]))  # Expected output: 12",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y if y else x, list1, list2))",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef Check_Solution(a, b, c):\n    # Calculate discriminant\n    D = (b**2) - (4*a*c)\n    \n    # If discriminant is zero, there's exactly one real root\n    if D == 0:\n        # Calculate and compare roots\n        x = -b / (2 * a)\n        y = x * 2\n        return str(x == y)\n    else:\n        return \"No\"\n\n# Test cases\nprint(Check_Solution(1, 3, 2))  # Expected output: \"Yes\"\nprint(Check_Solution(1, 2, 3))  # Expected output: \"No\"\nprint(Check_Solution(1, -5, 6)) # Expected output: \"No\"",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    \"\"\"\n    Returns the nth Carol number.\n    \n    A Carol number is defined as C_n = 2^n + 1.\n    \n    Parameters:\n    n (int): The position of the Carol number in the sequence.\n    \n    Returns:\n    int: The nth Carol number.\n    \"\"\"\n    return 2**n + 1",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    # Use list comprehension to filter out empty lists and return the result\n    return [item for item in lst if item]\n\n# Test cases to verify the correctness of the solution\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]) == ['Red', 'Green', [1, 2], 'Blue'], \"Test case 1 failed\"\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []]) == ['Green', [1, 2], 'Blue'], \"Test case 2 failed\"\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []]) == ['Python', 'programming', 'language'], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(arr):\n    from collections import Counter\n    counts = Counter(arr)\n    max_count = max(counts.values())\n    for item, count in counts.items():\n        if count == max_count:\n            return item\n\n# Example usage and test cases\nprint(max_occurrences([1,2,3,1,2,3,12,4,2]))  # Output: 2\nprint(max_occurrences([1,2,6,7,0,1,0,1,0]))   # Output: 1\nprint(max_occurrences([1,2,3,1,2,4,1]))       # Output: 1",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'repeat' is not defined"
    ],
    "generated_code": "def add_K_element(tuples_list, K):\n    \"\"\"\n    Adds K elements to each tuple within the given list of tuples.\n    \n    Parameters:\n    tuples_list (list): A list of tuples where each tuple contains integers.\n    K (int): The number of elements to add to each tuple.\n    \n    Returns:\n    list: A new list of tuples with K added to each original tuple.\n    \"\"\"\n    result = []\n    for t in tuples_list:\n        temp_t = [x + y for x, y in zip(t, repeat(K))]\n        result.append(tuple(temp_t))\n    return result\n\n# Test cases\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)) # Expected output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)) # Expected output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)) # Expected output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'str' object does not support item assignment",
      "Test 2: FAIL - 'str' object does not support item assignment",
      "Test 3: FAIL - 'str' object does not support item assignment"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    count = 0\n    left, right = 0, len(binary_str) - 1\n    \n    while left < right:\n        if binary_str[left] != binary_str[right]:\n            if binary_str[left] == '0':\n                binary_str[left] = '1'\n                binary_str[right] = '0'\n            else:\n                binary_str[left] = '0'\n                binary_str[right] = '1'\n            \n            count += 1\n        left += 1\n        right -= 1\n    \n    return count",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(n):\n    # Initialize counter for digit count\n    digit_count = 0\n    \n    # Loop through each character in the string representation of n\n    for i in str(n):\n        # Increment count if character is a digit\n        if i.isdigit():\n            digit_count += 1\n            \n    return digit_count\n\n# Test the function with provided data points\nprint(count_Digit(12345))   # Expected output: 5\nprint(count_Digit(11223305)) # Expected output: 8\nprint(count_Digit(4123459))  # Expected output: 7",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    # Initialize the result with the product of the first two numbers\n    result = nums[0] * nums[1]\n    \n    # Iterate through the list starting from the third element\n    for i in range(2, len(nums)):\n        # Update the result if the current product is greater than the previous one\n        result = max(result, nums[i-1] * nums[i])\n        \n    return result",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def is_tree_balanced(root):\n    def get_height(node):\n        if node is None:\n            return 0\n        left_height = get_height(node.left)\n        right_height = get_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return get_height(root) != -1",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def repeat_tuples(input_tuple, repetitions):\n    result = []\n    for _ in range(repetitions):\n        result.append(input_tuple)\n    return tuple(result)\n\n# Test cases\nprint(repeat_tuples((1, 3), 4))  # Expected output: ((1, 3), (1, 3), (1, 3), (1, 3))\nprint(repeat_tuples((1, 2), 3))   # Expected output: ((1, 2), (1, 2), (1, 2))\nprint(repeat_tuples((3, 4), 5))   # Expected output: ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    # Calculate and return the lateral surface area of the cuboid\n    return 2 * (length * width + length * height + width * height)",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def smallest_missing(arr, l, r):\n    if arr[l] > 0 and arr[r] < len(arr):\n        for i in range(l + 1, r):\n            if arr[i] - i != arr[i - 1]:\n                return i\n    elif arr[l] <= 0:\n        for i in range(r + 1):\n            if i not in arr and i > 0:\n                return i\n    else:\n        return r + 1",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_assending(nums):\n    # Use the heapq module's nlargest method to get the n largest elements from the nums list.\n    # The n is set to len(nums) so it gets all elements in ascending order.\n    return sorted(heapq.nlargest(len(nums), nums))",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def permute_string(s):\n    def backtrack(path, remaining):\n        if not remaining:\n            result.append(\"\".join(path))\n            return\n        \n        for i in range(len(remaining)):\n            new_path = path + [remaining[i]]\n            new_remaining = remaining[:i] + remaining[i+1:]\n            backtrack(new_path, new_remaining)\n    \n    result = []\n    backtrack([], s)\n    return result",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(num, multiple):\n    # Calculate the remainder when num is divided by multiple.\n    remainder = num % multiple\n    # If remainder is less than half of multiple, subtract remainder from num.\n    if remainder < multiple / 2:\n        return int(num - remainder)\n    else:\n        return int(num + multiple - remainder)\n\n# Test cases\nprint(round_num(4722,10))  # Expected output: 4720\nprint(round_num(1111,5))   # Expected output: 1110\nprint(round_num(219,2))    # Expected output: 218",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 2: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 3: FAIL - can only concatenate list (not \"tuple\") to list"
    ],
    "generated_code": "def remove_replica(data):\n    \"\"\"\n    Removes elements from data that occur more than once and replaces duplicates with \"MSP\".\n    \n    Parameters:\n    - data: A list of tuples where each tuple can have duplicate elements.\n    \n    Returns:\n    - A new list of tuples with duplicates replaced by \"MSP\".\n    \"\"\"\n    # Remove duplicates and keep track of replacements\n    modified_data = [(x if x != y else 'MSP') for i, x in enumerate(data) \n                     for y in [x] + data[i+1:] if y == x]\n    return modified_data",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(s, char):\n    # Initialize an empty result string\n    res = ''\n    for i in s:\n        if i != char:\n            # If current character is not equal to the target character, add it to result string\n            res += i\n    return res",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\n    return lst[-1:] + lst[:-1]",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate the surface area of a cuboid using the formula:\n    # Surface Area = 2*(lw + lh + wh)\n    return 2 * (length*width + length*height + width*height)\n\n# Test cases\nassert surfacearea_cuboid(1,2,3) == 22\nassert surfacearea_cuboid(5,7,9) == 286\nassert surfacearea_cuboid(10,15,21) == 1350",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multi_list(n_rows, n_cols):\n    return [[i * j for i in range(1, n_cols + 1)] for j in range(n_rows)]",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, idx):\n    lst.sort(key=lambda x: x[idx])\n    return lst",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rotation_count(nums):\n    \"\"\"\n    Finds the number of rotations performed on the input list.\n    \n    Args:\n    nums: List[int] - A list of integers representing the circularly sorted part followed by an unsorted part.\n    \n    Returns:\n    int - The number of times the given list has been rotated.\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n    \n    while left <= right:\n        if nums[left] < nums[right]:\n            return left + 1\n        \n        mid = (left + right) // 2\n        next_mid = (mid + 1) % len(nums)\n        \n        if nums[mid] >= nums[0]: \n            left = mid + 1\n        else:\n            right = mid\n            \n    return left",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    # Calculate the number of bits in n\n    num_bits = int(math.log2(n)) + 1\n    \n    # Create a mask with every other bit set (0 for even, 1 for odd)\n    mask = ((1 << (num_bits - 1)) - 1) ^ (1 << (num_bits % 2))\n    \n    # Use bitwise AND and XOR to toggle the odd bits\n    result = n & mask\n    \n    return result",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(n,arr):\n    min_value = min(arr)  # Find the minimum value in the array\n    count = arr.count(min_value)  # Count how many times the minimum value appears\n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(s):\n    count = 0\n    left_brackets = 0\n    \n    for char in s:\n        if char == '[':\n            left_brackets += 1\n        elif char == ']':\n            if left_brackets > 0:\n                left_brackets -= 1\n            else:\n                count += 1\n                \n    # Check if there are unmatched brackets at the end\n    if left_brackets > 0:\n        count += left_brackets\n        \n    return count",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_num):\n    # Convert the hexadecimal string to an integer and then divide by 2.\n    result = int(hex_num, 16) / 2\n    if result == int(result):\n        return \"Even\"  # If the result of division is not exactly divisible by 2, it means the number is odd.\n    else:\n        return \"Odd\"\n\n# Test cases\nprint(even_or_odd(\"AB3454D\"))  # Output should be \"Odd\"\nprint(even_or_odd(\"ABC\"))      # Output should be \"Even\"\nprint(even_or_odd(\"AAD\"))      # Output should be \"Odd\"",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    This function calculates the highest power of 2 that is less than or equal to a given number.\n    \n    Args:\n        n (int): The input number for which the highest power of 2 needs to be calculated.\n        \n    Returns:\n        int: The highest power of 2 less than or equal to the input number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        i = 0\n        while 2 ** i <= n:\n            i += 1\n        return 2 ** (i - 1)\n\n# Test cases\nassert highest_Power_of_2(10) == 8, \"Test case 1 failed\"\nassert highest_Power_of_2(19) == 16, \"Test case 2 failed\"\nassert highest_Power_of_2(32) == 32, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_string(lst, s):\n    return [s + str(i) for i in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "from collections import defaultdict\n\ndef convert_list_dictionary(keys, values, mapping):\n    \"\"\"\n    Convert two lists of equal length into a nested dictionary.\n    \n    :param keys: List of keys as strings for each inner dictionary.\n    :param values: List of values corresponding to the key in the same order.\n    :param mapping: List of values representing the 'mapping' which is used to find corresponding value from values list.\n    :return: Nested dictionary formed from the given inputs.\n    \"\"\"\n    result = defaultdict(dict)\n    for i, key in enumerate(keys):\n        if isinstance(mapping[i], int):\n            # Use index if it's an integer, else use the default dict method to get the value\n            result[key][values[i]] = mapping[i]\n        elif isinstance(mapping[i], str):\n            try:\n                result[key][int(values[i])] = int(mapping[i])\n            except ValueError:\n                result[key][float(values[i])] = float(mapping[i])\n    return dict(result)\n\n# Check function with provided data points\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}],\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"], [\"python\",\"program\",\"language\",\"programs\"], [100,200,300,400]) == [{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"], [\"java\",\"C\",\"C++\",\"DBMS\"], [10,20,30,40]) == [{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: integer division or modulo by zero"
    ],
    "generated_code": "import math\n\ndef get_max_sum(n):\n    # Base case: when n is less than or equal to 5, directly calculate and store the result in dp array\n    if n <= 5:\n        return math.floor(math.log10(n+1)) * 10\n    else:\n        # Recursive call for values greater than 5\n        dp = [math.inf] * (n+1)\n        dp[0], dp[1], dp[2], dp[3], dp[4], dp[5] = 0, 1, 2, 3, 4, 5\n        \n        for i in range(6, n+1):\n            # Calculate f(i) using the original formula\n            dp[i] = int(math.pow(10, math.floor(math.log10(i)))) + int((i % 10 == 0))\n            for j in range(2, 6):  # For each divisor up to 5\n                dp[i] = min(dp[i], dp[int(i / j)] + dp[i // j])\n            \n            # Update the result with the maximum value found so far\n            res = dp[i]\n            for k in range(1, 6):  # Try each divisor from 2 to 5\n                temp_res = dp[k * i // (k-1)]\n                if temp_res < res:\n                    res = temp_res\n            dp[i] = res\n            \n        return dp[n]\n\n# Example usage\nprint(get_max_sum(60))  # Expected output: 106\nprint(get_max_sum(10))  # Expected output: 12\nprint(get_max_sum(2))   # Expected output: 2",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst_of_lists):\n    # Use `map` to apply the len() function to each element in lst_of_lists,\n    # then use `max()` with key parameter as `len`.\n    return max(map(len, lst_of_lists), default=0)\n\n# Test cases:\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Expected output: (3, [13, 15, 17])\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))      # Expected output: (5, [1,2,3,4,5])\nprint(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]]))                 # Expected output: (4, [6,7,8,9])",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n# Test cases\nprint(check_distinct((1, 4, 5, 6, 1, 4))) # Expected output: False\nprint(check_distinct((1, 4, 5, 6)))       # Expected output: True\nprint(check_distinct((2, 3, 4, 5, 6)))    # Expected output: True",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(s):\n    # Create a dictionary to store characters and their counts\n    char_count = {}\n    \n    # Count occurrences of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with count equal to 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no unique character is found, return None\n    return None\n\n# Test cases\nprint(first_non_repeating_character(\"abcabc\"))   # Expected output: None\nprint(first_non_repeating_character(\"abc\"))      # Expected output: 'a'\nprint(first_non_repeating_character(\"ababc\"))    # Expected output: 'c'",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(input_string):\n    \"\"\"\n    This function checks if the given string starts and ends with the same character.\n    \n    Args:\n        input_string (str): The string to be checked.\n        \n    Returns:\n        str: 'Valid' if the string starts and ends with the same character, otherwise 'Invalid'.\n    \"\"\"\n    # Regex pattern to match strings that start and end with the same character\n    pattern = r\"^(.).*\\1$\"\n    # Search for the pattern in the input string\n    result = re.search(pattern, input_string)\n    # If found, it's valid; otherwise, it's invalid\n    return \"Valid\" if result else \"Invalid\"\n\n# Test cases\nprint(check_char(\"abba\"))   # Expected output: Valid\nprint(check_char(\"a\"))      # Expected output: Valid\nprint(check_char(\"abcd\"))   # Expected output: Invalid",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(a, b, c):\n    # Sort the list of numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    \n    # Calculate the median based on whether there's an odd or even number of elements\n    if len(sorted_nums) % 2 == 1:\n        return float(sorted_nums[len(sorted_nums) // 2])\n    else:\n        mid_index_1 = len(sorted_nums) // 2 - 1\n        mid_index_2 = len(sorted_nums) // 2\n        return (sorted_nums[mid_index_1] + sorted_nums[mid_index_2]) / 2.0",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: Array elements must be either integers or strings."
    ],
    "generated_code": "def sum_of_digits(arr):\n    total_sum = 0\n    for num in arr:\n        if isinstance(num, int):  # Check if num is an integer\n            total_sum += sum(int(digit) for digit in str(abs(num)))\n        elif isinstance(num, str):  # If it's a string, handle as a numeric value considering ASCII values\n            for char in num.replace('-', '').replace(',', ''):\n                total_sum += ord(char)\n        else:\n            raise ValueError(\"Array elements must be either integers or strings.\")\n    return total_sum\n\n# Test cases\nprint(sum_of_digits([10, 2, 56]))  # Expected output: 14\nprint(sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']]))  # Expected output: 19\nprint(sum_of_digits([10, 20, -4, 5, -70]))  # Expected output: 19",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    # Use map and zip functions to apply the XOR operation element-wise between two tuples.\n    result = tuple(map(lambda x, y: x ^ y, tup1, tup2))\n    return result\n\n# Test the function with provided data points\nprint(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (15, 6, 5, 10)\nprint(bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)))  # Expected output: (13, 6, 3, 14)\nprint(bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)))  # Expected output: (11, 2, 13, 13)",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_freq(tuples_list):\n    # Create an empty dictionary to store frequencies\n    freq_dict = {}\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Increment the count for the tuple in the dictionary\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    \n    # Return the number of unique tuples\n    return len(freq_dict)\n\n# Test cases\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])) # Should print 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])) # Should print 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])) # Should print 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    # Use zip and map to iterate over each corresponding element from both tuples,\n    # then use list comprehension to sum up the elements.\n    result = [sum(x) for x in zip(tup1, tup2)]\n    return tuple(result)",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ncr_modp(n, k, p):\n    def factorialMod(a, p):\n        fact = 1\n        for i in range(1, min(k + 1, n - k) + 1):\n            fact = (fact * i) % p\n        return fact\n    \n    def binomialCoefficientMod(a, b, c):\n        res = 1\n        for i in range(b):\n            res = (res * ((a - i) % c)) % c\n            res = (res * pow(i + 1, -1, c)) % c\n        return res\n    \n    result = binomialCoefficientMod(factorialMod(n, p), factorialMod(k, p) * factorialMod(n - k, p) % p, p)\n    return result",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^https:\\/\\/(www\\.)?([a-zA-Z0-9]+)(\\/[^\\s]*)?$'\n    return bool(re.match(pattern, url))",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuplex(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(number):\n    # Check if the number is even or odd and return 'Even Parity' or 'Odd Parity'\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test the function with provided data points\nprint(find_Parity(12))  # Expected output: Even Parity\nprint(find_Parity(7))   # Expected output: Odd Parity\nprint(find_Parity(10))  # Expected output: Even Parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'rearrange_bigger' is not defined",
      "Test 2: FAIL - name 'rearrange_bigger' is not defined",
      "Test 3: FAIL - name 'rearrange_bigger' is not defined"
    ],
    "generated_code": "from itertools import permutations\n\ndef find_next_bigger(n):\n    \"\"\"\n    Finds the smallest integer greater than n formed by rearranging its digits.\n    \n    :param n: Integer\n    :return: The next bigger integer formed by rearranging the digits of n, or False if no such integer exists.\n    \"\"\"\n    # Convert the number to a list for easy manipulation\n    num_list = [int(d) for d in str(n)]\n    length = len(num_list)\n    \n    # Generate all permutations of the digits and convert them back to integers\n    for perm in sorted(permutations(num_list), reverse=True):\n        new_num_str = ''.join(map(str, perm))\n        try:\n            # Check if the new number is larger than the original one\n            return int(new_num_str) > n\n        except ValueError:\n            continue\n    \n    return False\n\n# Test cases\nprint(find_next_bigger(12))   # Expected output: True\nprint(find_next_bigger(10))   # Expected output: False\nprint(find_next_bigger(102))  # Expected output: True",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef k_smallest_pairs(A: List[int], B: List[int], K: int) -> List[List[int]]:\n    A.sort()\n    B.sort()\n    res = []\n    i, j = 0, 0\n    \n    while len(res) < K and i < len(A) and j < len(B):\n        if i == 0:\n            res.append([A[i], B[j]])\n            i += 1\n        elif j == 0:\n            res.append([B[j], A[i]])\n            i += 1\n        else:\n            if A[i] <= B[j]:\n                res.append([A[i], B[j]])\n                i += 1\n            else:\n                res.append([B[j], A[i]])\n                j += 1\n                \n    return res",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef min_product_tuple(tuples_list: List[Tuple[int]]) -> int:\n    return min([x * y for x, y in tuples_list])",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_val(lst):\n    return min([item for item in lst if isinstance(item, (int, float))])",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Use regular expression to replace '_<lowercase letter>' with uppercase letter\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))\n\n# Test cases\nprint(snake_to_camel('android_tv'))  # Expected output: \"AndroidTv\"\nprint(snake_to_camel('google_pixel'))  # Expected output: \"GooglePixel\"\nprint(snake_to_camel('apple_watch'))  # Expected output: \"AppleWatch\"",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\n    # Use list comprehension to filter out odd numbers and create a new list with the result\n    return [num for num in nums if not num % 2]\n\n# Test cases\nprint(remove_odd([1,2,3]))  # Output: [2]\nprint(remove_odd([2,4,6]))  # Output: [2, 4, 6]\nprint(remove_odd([10,20,3]))  # Output: [10, 20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_nth_element(lst, n):\n    return [item for item in lst if isinstance(item, tuple)][n]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(sequence1, sequence2):\n    # Check if any element of sequence1 is present in sequence2\n    for item in sequence1:\n        if item in sequence2:\n            return True\n    return False",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - UnboundLocalError: local variable 'left' referenced before assignment"
    ],
    "generated_code": "def max_Product(arr):\n    arr.sort()\n    n = len(arr)\n    if arr[0] == 0:\n        # If all elements in the array are non-positive or one is zero,\n        # the maximum product will be between two zeros or a negative number and its corresponding positive counterpart.\n        # In case there's an element other than zero, consider both possible pairs.\n        if n > 1 and arr[0] != 0:\n            for i in range(1, min(n, 2)):\n                if arr[i] * arr[n - i + 1] > 0:\n                    return (arr[i], arr[n - i + 1])\n    else:\n        # Otherwise, sort the array and check if it's possible to form a larger product from adjacent elements.\n        left = right = 0\n        while right < n:\n            left += 1\n            right += 1\n            if left < n and right < n:\n                if arr[left] * arr[right] > 0:\n                    break\n    return tuple(sorted((arr[left-1], arr[right]), reverse=True))\n\n# Test cases\nprint(max_Product([1,2,3,4,7,0,8,4]))  # Expected output: (7, 8)\nprint(max_Product([0,-1,-2,-4,5,0,-6]))  # Expected output: (-4, -6)\nprint(max_Product([1,2,3]))  # Expected output: (2, 3)",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    if n <= 3:\n        return n\n    \n    # Base case: single digit numbers\n    elif n == 4:\n        return 8\n    \n    # Recursively calculate sums of different combinations\n    else:\n        return max((breakSum(n-1) + n), \n                   (breakSum(n-2) + 2*n), \n                   (breakSum(n-3) + 3*n))\n\n# Test cases\nprint(breakSum(12))  # Expected output: 13\nprint(breakSum(24))  # Expected output: 27\nprint(breakSum(23))  # Expected output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def group_tuples(lst):\n    # Group tuples based on the first elements and collect groups with more than one occurrence\n    result = [(k, v) for k, v in lst if len(set(v)) > 1]\n    # Combine repeated elements from different groups into a single element\n    combined = [v[0] + ',' * max(0, len(k) - len(v[0])) + ','.join(v[1:]) for k, v in result]\n    return list(zip(*combined))\n\n# Test cases\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max' is not defined",
      "Test 2: FAIL - name 'Find_Max' is not defined",
      "Test 3: FAIL - name 'Find_Max' is not defined"
    ],
    "generated_code": "def find_max(lst):\n    # Initialize variables to store the sublist with maximum length and its index\n    max_len = 0\n    max_index = -1\n    \n    # Iterate through each sublist in the list\n    for i, sublst in enumerate(lst):\n        if len(sublst) > max_len:\n            max_len = len(sublst)\n            max_index = i\n            \n    # Return the sublist with the maximum length at the corresponding index\n    return lst[max_index]\n\n# Test cases\nprint(find_max([['A'], ['A', 'B'], ['A', 'B', 'C']]))  # Expected output: ['A', 'B', 'C']\nprint(find_max([[1], [1, 2], [1, 2, 3]]))             # Expected output: [1, 2, 3]\nprint(find_max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))    # Expected output: [1, 5, 6, 1]",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_and_sum(numbers):\n    # Round each element in the list to 2 decimal places using the built-in `round()` function\n    rounded_numbers = [round(num, 2) for num in numbers]\n    # Sum all elements in the rounded list\n    total_sum = sum(rounded_numbers)\n    # Multiply the sum by the length of the original list\n    result = total_sum * len(numbers)\n    return result",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    # Initialize total as 0\n    total = 0\n    \n    # Loop through first n even numbers\n    for i in range(1, n + 1):\n        # Calculate each even number and add it to total\n        total += (2 * i) ** 3\n    \n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Tuple contains non-string items",
      "Test 2: FAIL - Tuple contains non-string items",
      "Test 3: FAIL - Tuple contains non-string items"
    ],
    "generated_code": "def concatenate_tuple(test_tuple):\n    # Concatenating elements with spaces as a default delimiter\n    result = ''\n    for item in test_tuple:\n        if isinstance(item, str):\n            result += f\"{item} \"\n        else:\n            raise ValueError(\"Tuple contains non-string items\")\n    return result.strip()",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    # Calculate sum of cubes from 1 to n and divide by n\n    result = (n * (n + 1) * (2*n + 1)) / 6\n    return round(result, 2)",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef get_maxgold(minefield: List[List[int]], rows: int, cols: int) -> int:\n    dp = [[-1] * cols for _ in range(rows)]\n    \n    def dfs(row: int, col: int) -> int:\n        if row == len(dp): return 0\n        if dp[row][col] != -1: return dp[row][col]\n        \n        up = dfs(row + 1, col)\n        left_up_diagonal = dfs(row + 1, col - 1)\n        right_up_diagonal = dfs(row + 1, col + 1)\n        \n        max_gold = max(up, left_up_diagonal, right_up_diagonal) + minefield[row][col]\n        \n        dp[row][col] = max_gold\n        return max_gold\n    \n    dfs(0, 0)\n    return dp[0][0]\n\n# Test cases\nprint(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)) # Expected output: 16\nprint(get_maxgold([[10,20],[30,40]], 2, 2)) # Expected output: 70\nprint(get_maxgold([[4,9],[3,7]], 2, 2)) # Expected output: 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_rear(strings_tuple):\n    # Extract the last character from each string in the tuple and convert them back to strings\n    return tuple(string[-1] for string in strings_tuple)\n\n# Test cases\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Expected output: ('s', 'r', 's')\nprint(extract_rear(('Avenge', 'for', 'People')))  # Expected output: ('e', 'r', 'e')\nprint(extract_rear(('Gotta', 'get', 'go')))  # Expected output: ('a', 't', 'o')",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lst, target):\n    return sum(1 for sublist in lst if target in sublist)",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "filter_oddnumbers = lambda xs: list(filter(lambda x: x % 2 != 0, xs))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_string):\n    # Use regular expression to find and replace hyphens\n    new_date = re.sub(r'(?<=\\D)([0-9]{2})(?=\\D)', lambda match: f\"{match.group(1)}-{match.group(1)[::-1]}\", date_string)\n    return new_date\n\n# Test cases\nprint(change_date_format(\"2026-01-02\"))  # Expected output: '02-01-2026'\nprint(change_date_format(\"2020-11-13\"))  # Expected output: '13-11-2020'\nprint(change_date_format(\"2021-04-26\"))  # Expected output: '26-04-2021'",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    # Extracting elements at each index where both tuples have an element\n    result = tuple(min(a, b) for a, b in zip(tup1, tup2))\n    return result",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a, b, c):\n    # Directrix formula for a parabola is -c/a\n    return -(c/a)",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    # Check if there is at least one common element between the two lists\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - median_trapezium() missing 1 required positional argument: 'd'",
      "Test 2: FAIL - median_trapezium() missing 1 required positional argument: 'd'",
      "Test 3: FAIL - median_trapezium() missing 1 required positional argument: 'd'"
    ],
    "generated_code": "def median_trapezium(a,b,c,d):\n    # Calculate the sum of the bases\n    base_sum = a + d\n    # Use Heron's formula to calculate the area and then divide by 2 for the average length of the sides\n    return (base_sum * (d - c) / 2)**0.5 / 2",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_greater(array, num):\n    if num > max(array):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n\n# Test cases\nprint(check_greater([1, 2, 3, 4, 5], 4))  # Expected output: No, entered number is less than those in the array\nprint(check_greater([2, 3, 4, 5, 6], 8))  # Expected output: Yes, the entered number is greater than those in the array\nprint(check_greater([9, 7, 4, 8, 6, 1], 11))  # Expected output: Yes, the entered number is greater than those in the array",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_one(text):\n    if text.startswith('a') and len([char for char in text[1:] if char == 'b']) >= 1:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(num):\n    # Return the last digit of the given number\n    return num % 10",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def neg_nos(lst):\n    for num in lst:\n        if num < 0:\n            print(num)\n\nassert neg_nos([-1,4,5,-6]) == [-1, -6]\nassert neg_nos([-1,-2,3,4]) == [-1, -2]\nassert neg_nos([-7,-6,8,9]) == [-7, -6]",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    result = ''\n    for char in s:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef count_bidirectional(tuples: List[Tuple[int]]) -> int:\n    # Create a set of all unique elements from the list of tuples\n    unique_elements = set()\n    for tup in tuples:\n        unique_elements.add(min(tup))\n        unique_elements.add(max(tup))\n\n    # Count the number of occurrences of each unique element\n    counts = {}\n    for elem in unique_elements:\n        counts[elem] = tuples.count((min(elem, max(elem)), max(elem, min(elem))))\n\n    # Calculate the total count of bidirectional pairs\n    total_count = sum(count * (count - 1) // 2 for count in counts.values())\n    \n    return total_count",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression pattern to match adverbs ending with an exclamation mark\n    pattern = r\"\\b([A-Z][^!\\.\\?]*\\.)[!.?\\s]\\b\"\n    \n    matches = re.finditer(pattern, sentence)\n    results = [(match.start(), match.end()-1, match.group(1)) for match in matches]\n    \n    return results\n\n# Test cases\nprint(find_adverb_position(\"clearly!! we can see the sky\"))  # Expected output: [(0, 7, 'clearly')]\nprint(find_adverb_position(\"seriously!! there are many roses\"))  # Expected output: [(0, 9, 'seriously')]\nprint(find_adverb_position(\"unfortunately!! sita is going to home\"))  # Expected output: [(0, 13, 'unfortunately')]",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(length):\n    # Calculate the surface area of a cube given its length\n    return 6 * length**2",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    return sum(1 for x in arr if x > 0) / len(arr)",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(nums):\n    # Initialize max_neg with None since we're looking for the smallest of all negatives.\n    max_neg = None\n    \n    for num in nums:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n            \n    return max_neg",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        trimmed_tuple = tuple(x for i, x in enumerate(t) if i < len(t) - k)\n        result.append(trimmed_tuple)\n    return result\n\nprint(trim_tuple([(-1, -10, 3), (-3, 2, 1, 10), (10, 20, 30, 40, 50), (100, 101, 102, 103)], 2))  # [(10,)]\nprint(trim_tuple([(-1, -10, 3), (-3, 2, 1, 10), (10, 20, 30, 40, 50), (100, 101, 102, 103)], 1))  # [(-1,), (-3,), (10,)]\nprint(trim_tuple([(-1, -10, 3), (-3, 2, 1, 10), (10, 20, 30, 40, 50), (100, 101, 102, 103)], 2))  # [(10,)]",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can't multiply sequence by non-int of type 'tuple'"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over both tuples simultaneously using zip()\n    for i in range(len(tup1)):\n        # Multiply corresponding elements from each tuple and append to result\n        result.append((tup1[i] * tup2[i],))\n        \n    # Convert the result list into a tuple and return it\n    return tuple(result)\n\n# Test cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Occurrence(lst, pattern):\n    # Initialize a dictionary to store counts for each element in the pattern\n    count_dict = {}\n    \n    # Count occurrences of each element in the pattern\n    for elem in pattern:\n        if elem not in count_dict:\n            count_dict[elem] = 0\n        count_dict[elem] += 1\n    \n    # Check how many times each item appears in the given list\n    result_count = {item: lst.count(item) for item in count_dict.keys()}\n    \n    return result_count",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [num ** 3 for num in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    \n    # Base cases for the first few terms in the Peral sequence\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    \n    # Calculate the sum using known values and the recurrence relation\n    return cal_sum(n - 1) + cal_sum(n - 2)\n\n# Test cases to verify the correctness of the function\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate distances between all pairs of points\n    dist1 = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    dist2 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    dist3 = ((x2 - x3)**2 + (y2 - y3)**2)**0.5\n    \n    # Check if the sum of any two sides is greater than the third side\n    if (dist1 < dist2 + dist3 and \n        dist2 < dist1 + dist3 and \n        dist3 < dist1 + dist2):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(check_Triangle(1,5,2,5,4,6))  # Expected output: Yes\nprint(check_Triangle(1,1,1,4,1,5))  # Expected output: No\nprint(check_Triangle(1,1,1,1,1,1))  # Expected output: No",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(values, size):\n    return [value[size:] for value in values]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(input_string):\n    # Remove all whitespace characters from the input_string\n    return re.sub(r'\\s+', '', input_string)\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def loss_amount(price_paid, price_received):\n    # Check if the received price is greater than the paid price and calculate the loss amount.\n    if price_received > price_paid:\n        loss = price_received - price_paid\n        return loss\n    else:\n        # If not, return None as there's no loss.\n        return None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            total_sum += i\n    return total_sum",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_wordz(text):\n    # Check if the string contains 'z'\n    if 'z' in text:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases to verify the correctness of the function\nassert text_match_wordz(\"pythonz.\") == 'Found a match!'\nassert text_match_wordz(\"xyz.\") == 'Found a match!'\nassert text_match_wordz(\"  lang  .\") == 'Not matched!'",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_number):\n    if month_number == 2:\n        return False\n    elif month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(lst):\n    # Initialize variables to keep track of min_length and corresponding sublist\n    min_len = float('inf')\n    result_sublist = []\n    \n    # Iterate through each element in the list\n    for sublst in lst:\n        # Check if current sublist is shorter than the previously found minimum\n        if len(sublst) < min_len:\n            # Update the minimum length and reset result sublist\n            min_len = len(sublst)\n            result_sublist = sublst\n    \n    # Return the sublist with the minimum length\n    return result_sublist",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(s):\n    # Define the pattern for matching uppercase characters\n    upper_pattern = '[A-Z]'\n    \n    # Replace all occurrences of uppercase letters in the string with an empty string\n    result = re.sub(upper_pattern, '', s)\n    \n    return result",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension to iterate through each sublist and get its first element.\n    return [sublist[0] for sublist in lst]\n\n# Test cases\nprint(extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))  # Expected output: [1, 3, 6]\nprint(extract([[1,2,3],[4, 5]]))  # Expected output: [1, 4]\nprint(extract([[9,8,1],[1,2]]))  # Expected output: [9, 1]",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase characters\n    upper_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if 'A' <= char <= 'Z':\n            upper_count += 1\n            \n    return upper_count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def combinations_list(lst):\n    def backtrack(start=0, path=[]):\n        # Add current combination to result if it's not empty\n        if path:\n            res.append(path[:])\n        \n        for i in range(start, len(lst)):\n            # Include the current element and continue with next\n            path.append(lst[i])\n            backtrack(i + 1, path)\n            # Exclude the current element and backtrack\n            path.pop()\n    \n    res = []\n    backtrack()\n    return res",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_subarray_product(nums):\n    \"\"\"\n    Finds the maximum product of any subarray within nums.\n    \n    :param nums: List[int] -- A list of integers which may contain positive, negative,\n                              and zeros.\n    :return: int -- The maximum product of any subarray in nums.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Array is empty\")\n\n    min_product = float('inf')\n    max_product = float('-inf')\n    result = float('-inf')\n\n    for num in nums:\n        if num == 0:\n            min_product, max_product, result = float('inf'), float('inf'), float('inf')  # Reset when encountering zero\n        \n        elif num < 0:\n            # If current number is negative, swap min and max products\n            min_product, max_product = max_product, min_product\n        \n        min_product = min(num, min_product * num)\n        max_product = max(num, max_product * num)\n        \n        result = max(result, max_product)  # Update result with the highest found product so far\n    \n    return result\n\n# Check function with provided data points\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_value(dictionary, value):\n    return len(set(dictionary.values())) == 1",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(dct):\n    return {k: v for k, v in dct.items() if v is not None}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    start = 0\n    end = len(arr) - 1\n    \n    while start < end:\n        mid = start + (end - start) // 2\n        \n        if arr[mid] > arr[mid + 1]:\n            end = mid\n        else:\n            start = mid + 1\n            \n    return arr[start]",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_number):\n    \"\"\"\n    Convert the given decimal number to its octal representation.\n    \n    Parameters:\n    decimal_number (int): The decimal number to be converted.\n    \n    Returns:\n    str: The octal representation of the decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    octal = \"\"\n    while decimal_number > 0:\n        octal = str(decimal_number % 8) + octal\n        decimal_number //= 8\n    return octal",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'reduce' is not defined"
    ],
    "generated_code": "def max_product(nums, k):\n    \"\"\"\n    Find the maximum product formed by multiplying elements in an increasing subsequence\n    of length 'k' from the given list 'nums'.\n    \n    Parameters:\n    nums (List[int]): The input list containing positive integers.\n    k (int): The desired length of the increasing subsequence for forming the product.\n    \n    Returns:\n    int: The maximum possible product of an increasing subsequence of length 'k'.\n    \"\"\"\n    # Sort the numbers in ascending order and slice the first 'k' numbers.\n    sorted_nums = sorted(nums)[:k]\n    # Calculate the product of these numbers.\n    max_product = reduce(lambda x, y: x * y, sorted_nums)\n    return max_product\n\n# Example check function with provided data points to verify correctness.\ndef check_solution():\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000, \"Test case 1 failed\"\n    assert max_product([4, 42, 55, 68, 80], 5) == 50265600, \"Test case 2 failed\"\n    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000, \"Test case 3 failed\"\n\ncheck_solution()",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_profit(prices, k):\n    if not prices:\n        return 0\n    \n    n = len(prices)\n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    for j in range(1, k + 1):\n        buy = -prices[0]\n        for i in range(1, n):\n            dp[i][j] = max(dp[i-1][j], buy + prices[i])\n            buy = max(buy, dp[i-1][j-1] - prices[i])\n    \n    return dp[n-1][k]\n\n# Example usage:\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)) # Output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))   # Output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))       # Output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def add_pairwise(tup):\n    # Calculate and return the sum of each pair in the tuple\n    return [sum(pair) for pair in tup]",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    # Initialize the result variable with the first element of the array modulo n and m\n    result = arr[0] % n\n    \n    # Iterate through the rest of the array elements\n    for i in range(1, len(arr)):\n        # Update the result as the product of current element, previous result, and current element modulo n and m\n        result = ((result * arr[i]) % m) % n\n    \n    return result\n\n# Test cases\nprint(find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11))  # Expected output: 9\nprint(find_remainder([1,1,1],3,1))  # Expected output: 0\nprint(find_remainder([1,2,1],3,2))  # Expected output: 0",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(lst):\n    lst.sort()\n    for i in range(len(lst)-1):\n        if abs(lst[i] - lst[i+1]) != 1:\n            return False\n    return True",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(list_of_tuples, expected_result):\n    # Extracting all unique tuples from both lists and sorting them\n    sorted_tup_list = sorted(set(tuple(sorted(t)) for t in list_of_tuples))\n    # Sorting expected result as well\n    sorted_res_list = sorted(set(tuple(sorted(t)) for t in expected_result))\n    \n    # Finding common tuples\n    common_tuples = set().union(*[set(res) & set(sorted_tup) for res, sorted_tup in zip(sorted_res_list, sorted_tup_list)])\n    \n    return common_tuples\n\n# Test Cases\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))  # Output: {(4, 5), (3, 4), (5, 6)}\nprint(tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]))  # Output: {(4, 7), (1, 4)}\nprint(tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]))  # Output: {(1, 3), (2, 3)}",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(str_, char_to_replace, new_char):\n    return str_.replace(char_to_replace, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_counter(counter_dict):\n    # Convert dictionary values into a list of tuples and then sort it.\n    sorted_tuples = sorted(counter_dict.items(), key=lambda item: item[1])\n    return sorted_tuples",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum value in the array\n    max_value = max(arr)\n    \n    # Find the minimum value in the array\n    min_value = min(arr)\n    \n    # Calculate the sum of the maximum and minimum values\n    result = max_value + min_value\n    \n    return result",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\n    \"\"\"\n    Convert the given string 's' to lowercase and return the result.\n    \n    Args:\n        s (str): The input string to be converted.\n        \n    Returns:\n        str: The lowercase version of the input string.\n    \"\"\"\n    return s.lower()",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_lowercase(s):\n    # Remove all lowercase letters from the input string\n    return ''.join(c for c in s if not c.islower())",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Digit(number):\n    # Ensure the input is a positive integer\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Handle negative numbers by taking their absolute value\n    number = abs(number)\n    \n    # Convert the number to a string and remove all digits except the first one\n    while number > 0:\n        last_digit = str(number % 10)\n        number //= 10\n    \n    return last_digit",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(input_str):\n    # Create an empty dictionary to store character frequencies\n    char_count = {}\n    \n    # Loop through each character in the input string\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the maximum frequency of characters\n    max_freq = max(char_count.values())\n    \n    # Loop through the dictionary to find the character with the maximum frequency\n    for char, count in char_count.items():\n        if count == max_freq:\n            return char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef is_subset_sum(nums: List[int], target: int, current_sum: int = 0, start_index: int = 0) -> bool:\n    \"\"\"\n    Determines if there is a subset within nums that sums up to target.\n    \n    :param nums: List of integers representing the numbers in question.\n    :param target: The target sum we want to find among subsets of nums.\n    :param current_sum: The cumulative sum of the current subset being considered. Defaults to 0 for an empty subset.\n    :param start_index: The index in nums from which we start considering elements for our subset. Defaults to 0.\n    :return: True if a subset summing up to target is found, False otherwise.\n    \"\"\"\n    # Base case: If no more numbers can be used and we have not reached target yet, it's impossible\n    if len(nums) == start_index:\n        return current_sum == target\n    \n    # Option 1: Include the current number in the subset and move to the next one\n    include_num = is_subset_sum(nums, target, current_sum + nums[start_index], start_index + 1)\n    \n    # Option 2: Exclude the current number from the subset and continue with the rest\n    exclude_num = is_subset_sum(nums, target, current_sum, start_index + 1)\n    \n    # Return true if either option leads to success\n    return include_num or exclude_num",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(s):\n    # Regex pattern to match strings where there is exactly one uppercase letter at the start,\n    # followed by zero or more lowercase letters.\n    pattern = r\"^[A-Z].*[a-z]$\"\n    \n    # Check if the string matches the pattern.\n    if re.match(pattern, s):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(match(\"Geeks\"))  # Should return 'Yes'\nprint(match(\"geeksforGeeks\"))  # Should return 'Yes'\nprint(match(\"geeks\"))  # Should return 'No'",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    num = 1\n    while True:\n        if factorial(num) % x == 0:\n            return num\n        num += 1\n    \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_matching_tuple(tuple_list_1, tuple_list_2):\n    # Remove tuples in second list that match with first list\n    filtered_list = [tuple for tuple in tuple_list_2 if not any(tup == tuple for tup in tuple_list_1)]\n    return filtered_list\n\n# Test cases\nprint(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))  # Output: [('you', '?')]\nprint(remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]))  # Output: [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nprint(remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]))  # Output: [('Its', 'been'), ('day', 'without')]",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - largest_palindrome() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef largest_palindrome(arr: List[int]) -> int:\n    max_num = arr[0]\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_num:\n            max_num = num\n    return max_num",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Computes the binomial probability of getting exactly k successes in n trials,\n    with success probability p on each trial.\n    \n    Parameters:\n    - n: int, total number of trials\n    - k: int, number of successful outcomes\n    - p: float, probability of success on an individual trial\n    \n    Returns:\n    - prob: float, computed binomial probability\n    \"\"\"\n    # Calculate the binomial coefficient\n    binom_coeff = math.comb(n, k)\n    # Compute the probability using the formula P(X=k) = C(n,k) * p^k * (1-p)^(n-k)\n    prob = binom_coeff * pow(p, k) * pow((1-p), (n-k))\n    return prob\n\n# Example usage and test cases\nprint(binomial_probability(10, 5, 1.0/3)) # Expected output: 0.13656454808718185\nprint(binomial_probability(11, 6, 2.0/4)) # Expected output: 0.2255859375\nprint(binomial_probability(12, 7, 3.0/5)) # Expected output: 0.227030335488",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the second item in each inner tuple\n    return sorted(tuples_list, key=lambda x: x[1])\n\n# Test cases\nprint(sort_tuple([(1, 3), (3, 2), (2, 1)]))  # Expected output: [(2, 1), (3, 2), (1, 3)]\nprint(sort_tuple([(2, 4), (3, 3), (1, 1)]))  # Expected output: [(1, 1), (3, 3), (2, 4)]\nprint(sort_tuple([(3, 9), (6, 7), (4, 3)]))  # Expected output: [(4, 3), (6, 7), (3, 9)]",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef area_pentagon(sides):\n    # Calculate the apothem\n    apothem = sides * (math.sqrt(5) - 1) / 4\n    \n    # Calculate the area using the formula for a regular pentagon\n    area = (sides**2 * math.sqrt(5)) / (4 * math.tan(math.pi / sides))\n    \n    return round(area, 6)",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Largest(n, arr):\n    # Find the maximum element in the array\n    max_val = max(arr)\n    # Count the occurrences of the maximum element in the array\n    count = arr.count(max_val)\n    return count",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_symmetric(tuples_list):\n    symmetric_pairs = set()\n    \n    for pair in tuples_list:\n        if len(pair) == 2 and pair[0] != pair[1]:\n            symmetric_pair = tuple(sorted(pair))\n            symmetric_pairs.add(symmetric_pair)\n            \n    return symmetric_pairs\n\n# Test cases\nprint(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]))  # Expected output: {(8, 9), (6, 7)}\nprint(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)]))  # Expected output: {(9, 10), (7, 8)}\nprint(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)]))  # Expected output: {(8, 9), (10, 11)}",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a1, r, n):\n    # Calculate the sum of geometric progression using formula\n    return a1 * ((1 - pow(r, n)) / (1 - r))",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "import math\n\ndef calculate_polygons(x_0, y_0, n_x, n_y, n_layers=3):\n    polygons = []\n    \n    # Generate points for each layer\n    for i in range(n_layers + 1):\n        dx = ((n_x - x_0) / n_layers)**(1/3)\n        dy = ((n_y - y_0) / n_layers)**(1/3)\n        \n        for j in range(i+1):\n            ddx = dx * (j + 1)\n            ddy = dy * (i - j)\n            \n            if j == 0:\n                pt = ((x_0 + ddx) / math.cos(math.pi / n_layers), (y_0 + ddy) / math.sin(math.pi / n_layers))\n            else:\n                prev_pt = polygons[i-1][j-1]\n                pt = ((prev_pt[0] + ddx) / math.cos(math.pi / n_layers),\n                      (prev_pt[1] + ddy) / math.sin(math.pi / n_layers))\n                \n            polygons.append([pt])\n    \n    return polygons\n\n# Test cases\nprint(calculate_polygons(1,1, 4, 4, 3)) \nprint(calculate_polygons(5,4,7,9,8))\nprint(calculate_polygons(9,6,4,3,2))",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert each element in the tuple to an integer and multiply it with the corresponding power of 2 from right to left.\n    return int(''.join(str(b) for b in binary_tuple), 2)\n\n# Test cases to verify the correctness of the function\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == \"105\"\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == \"101\"\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == \"53\"\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Define the regular expression pattern for matching lowercase letters\n    pattern = '[a-z]'\n    \n    # Use re.sub() to replace all occurrences of the lowercase letters with an empty string\n    result = re.sub(pattern, '', input_string)\n    \n    return result",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: index out of range"
    ],
    "generated_code": "from heapq import heappush, heappop\nimport random\n\ndef heap_queue_smallest(nums, k):\n    if not nums or len(nums) < k:\n        return []\n    \n    # Initialize min heap with first 'k' elements\n    h = nums[:k]\n    for num in nums[k:]:\n        heappush(h, num)\n        \n        # Maintain heap size\n        while h and h[0] <= num:\n            heappop(h)\n            \n    result = []\n    for _ in range(k):\n        result.append(heappop(h))\n    return result\n\n# Check function with provided data points\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3) == [14, 22, 25]\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2) == [14, 22]\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [14, 22, 22, 25, 35]\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef surfacearea_cone(radius, slant_height):\n    # Calculate the base area using pi*r^2 formula.\n    base_area = math.pi * radius**2\n    # Surface Area = Base Area + Circle Area at vertex = Pi*Radius^2 + 2*pi*Radius*Slant Height.\n    return base_area + 2 * radius * math.sqrt(radius**2 + slant_height**2)\n\n# Test the function with provided data points.\nassert round(surfacearea_cone(5,12),2) == 282.74\nassert round(surfacearea_cone(10,15),2) == 880.52\nassert round(surfacearea_cone(19,17),2) == 2655.92\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef gcd(a, b):\n    while(b):\n        a, b = b, a % b\n    return a",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_elements(lst):\n    # Joining all elements in the list with spaces and enclosing them in quotes\n    return f'  {\" \".join(lst)}'\n\n# Test Cases\nprint(concatenate_elements(['hello','there','have','a','rocky','day']))  # Expected output: \"  hello there have a rocky day\"\nprint(concatenate_elements(['Hi', 'there', 'How','are', 'you']))  # Expected output: \"  Hi there How are you\"\nprint(concatenate_elements(['Part', 'of', 'the','journey', 'is', 'end']))  # Expected output: \"  Part of the journey is end\"",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return gcd(x, y)",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    # Check for division by zero\n    if divisor == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    quotient = dividend // divisor\n    remainder = dividend % divisor\n    \n    return remainder",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_consecutive_nums(nums):\n    # Initialize an empty list to store the results\n    result = []\n    i = 0\n    \n    while i < len(nums) - 1:\n        # Calculate the sum of consecutive elements and append it to the result list\n        result.append(sum(nums[i:i+2]))\n        i += 2\n    \n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i**3\n    return total_sum",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_order(arr):\n    # Move non-zero elements to the front and zero elements to the back.\n    i = j = len(arr) - 1\n    \n    while i < j:\n        if arr[i] == 0:\n            i += 1\n        elif arr[j] != 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n            \n    return arr\n\n# Test cases\nprint(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]))  # Expected output: [6, 8, 2, 3, 4, 1, 0, 0, 0]\nprint(re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]))  # Expected output: [4, 2, 7, 9, 12, 0, 0, 0, 0]\nprint(re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]))  # Expected output: [3, 11, 74, 14, 1, 2, 0, 0, 0]",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def factorial(num):\n    \"\"\"Calculate factorial of a number.\"\"\"\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate permutation coefficient of n choose k.\n    \n    Args:\n    n (int): Total items.\n    k (int): Items to choose.\n    \n    Returns:\n    int: Permutation coefficient of n choose k.\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n# Test cases to verify the correctness of the function\nassert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, words_to_remove):\n    # Remove specified words from the word_list\n    for word in words_to_remove:\n        if word in word_list:\n            word_list.remove(word)\n    return word_list\n\n# Test cases\nprint(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange']))  # Output: ['red', 'green', 'blue', 'black']\nprint(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange']))  # Output: ['red', 'green', 'blue', 'white']\nprint(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white']))   # Output: ['red', 'green', 'black', 'orange']",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef same_order(list1: List[str], list2: List[str]) -> bool:\n    # Check if both lists have at least one element\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    \n    # Get the indices of common elements\n    common_indices = set()\n    for i in range(min(len(list1), len(list2))):\n        if list1[i] == list2[i]:\n            common_indices.add(i)\n    \n    # Check if all common elements are in the same order\n    for i in range(1, len(common_indices)):\n        if common_indices[i] - common_indices[i-1] != 1:\n            return False\n    \n    return True",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Odd' is not defined",
      "Test 2: FAIL - name 'average_Odd' is not defined",
      "Test 3: FAIL - name 'average_Odd' is not defined"
    ],
    "generated_code": "def average_odd(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2): # Iterate through all odd numbers up to n\n        sum += i\n        count += 1\n    if count == 0:\n        return 0\n    else:\n        return sum / count",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def no_of_subsequences(arr, target_sum):\n    n = len(arr)\n    dp = [[0] * (target_sum + 1) for _ in range(n + 1)]\n    \n    # Initializing DP table with base case\n    for i in range(n + 1):\n        for j in range(target_sum + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]) % (10**9 + 7)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][target_sum]\n\n# Test cases\nprint(no_of_subsequences([1,2,3,4], 10))  # Expected output: 11\nprint(no_of_subsequences([4,8,7,2], 50))  # Expected output: 9\nprint(no_of_subsequences([5,6,7,8], 15))  # Expected output: 4",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 601,
    "problem_statement": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\nclass Pair:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\ndef max_chain_length(pairs: List[Pair], k: int) -> int:\n    dp = [1] * len(pairs)\n    for i in range(len(pairs)):\n        for j in range(i):\n            if pairs[i].x > pairs[j].y and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                \n    return max(dp)\n\n# Test Cases\npairs1 = [Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)]\nk1 = 4\nprint(max_chain_length(pairs1, k1))  # Expected output: 3\n\npairs2 = [Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)]\nk2 = 4\nprint(max_chain_length(pairs2, k2))  # Expected output: 4\n\npairs3 = [Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)]\nk3 = 5\nprint(max_chain_length(pairs3, k3))  # Expected output: 5",
    "test_cases": [
      "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
      "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
      "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
    ]
  },
  {
    "mbpp_id": 602,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
    "test_cases": [
      "assert first_repeated_char(\"abcabc\") == \"a\"",
      "assert first_repeated_char(\"abc\") == \"None\"",
      "assert first_repeated_char(\"123123\") == \"1\""
    ]
  },
  {
    "mbpp_id": 603,
    "problem_statement": "Write a function to get a lucid number smaller than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_ludic(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    result = []\n    current_num = 1\n    while len(result) <= n:\n        if is_prime(current_num):\n            result.append(current_num)\n        current_num += 1\n    return result[:n+1]\n\nprint(get_ludic(10)) # Expected output: [1, 2, 3, 5, 7]\nprint(get_ludic(25)) # Expected output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nprint(get_ludic(45)) # Expected output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
    "test_cases": [
      "assert get_ludic(10) == [1, 2, 3, 5, 7]",
      "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
      "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
    ]
  },
  {
    "mbpp_id": 604,
    "problem_statement": "Write a function to reverse words in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_words(s):\n    # Splitting the input string into words and reversing them\n    return ' '.join(reversed(s.split()))\n\n# Test cases\nprint(reverse_words(\"python program\"))  # Expected output: \"program python\"\nprint(reverse_words(\"java language\"))   # Expected output: \"language java\"\nprint(reverse_words(\"indian man\"))      # Expected output: \"man indian\"",
    "test_cases": [
      "assert reverse_words(\"python program\")==(\"program python\")",
      "assert reverse_words(\"java language\")==(\"language java\")",
      "assert reverse_words(\"indian man\")==(\"man indian\")"
    ]
  },
  {
    "mbpp_id": 605,
    "problem_statement": "Write a function to check if the given integer is a prime number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prime_num(num):\n    # Edge case for -1 and negative numbers.\n    if num < 2:\n        return False\n    \n    # Optimization: Check divisibility up to sqrt(num) instead of checking all the way up to num.\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
    "test_cases": [
      "assert prime_num(13)==True",
      "assert prime_num(7)==True",
      "assert prime_num(-1010)==False"
    ]
  },
  {
    "mbpp_id": 606,
    "problem_statement": "Write a function to convert degrees to radians.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef radian_degree(degree):\n    return degree * math.pi / 180\n\n# Test cases\nprint(radian_degree(90) == 1.5707963267948966)  # True\nprint(radian_degree(60) == 1.0471975511965976)  # True\nprint(radian_degree(120) == 2.0943951023931953)  # True",
    "test_cases": [
      "assert radian_degree(90)==1.5707963267948966",
      "assert radian_degree(60)==1.0471975511965976",
      "assert radian_degree(120)==2.0943951023931953"
    ]
  },
  {
    "mbpp_id": 607,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        start = match.start()\n        end = match.end()\n        return (pattern, start, end)\n    else:\n        return None",
    "test_cases": [
      "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
      "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
      "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
    ]
  },
  {
    "mbpp_id": 608,
    "problem_statement": "Write a python function to find nth bell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_Number(n):\n    \"\"\"\n    Calculates the n-th Bell number.\n    \n    Parameters:\n    n (int): The position in the sequence of Bell numbers.\n    \n    Returns:\n    int: The n-th Bell number.\n    \"\"\"\n    # Initialize an array to store Bell numbers up to n\n    bell = [0] * (n + 1)\n    bell[0] = 1  # Base case\n    \n    for i in range(1, n + 1):\n        # Update each element in bell[i]\n        for j in range(i, 0, -1):\n            bell[j] += bell[j - 1]\n    \n    return bell[n]\n\n# Test the function with provided data points\nprint(bell_Number(2))  # Expected output: 2\nprint(bell_Number(3))  # Expected output: 5\nprint(bell_Number(4))  # Expected output: 15",
    "test_cases": [
      "assert bell_Number(2) == 2",
      "assert bell_Number(3) == 5",
      "assert bell_Number(4) == 15"
    ]
  },
  {
    "mbpp_id": 609,
    "problem_statement": "Write a python function to find minimum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef floor_Min(a, b, c):\n    # Find the maximum of a and b\n    max_ab = max(a, b)\n    # Calculate the difference between c and the max_ab\n    diff_c_maxab = c - max_ab\n    \n    # If the result is positive, subtract it from a to get the minimum\n    if diff_c_maxab > 0:\n        return a - diff_c_maxab\n    else:\n        # Otherwise, return 0 as no reduction is needed\n        return 0\n\n# Test cases\nprint(floor_Min(10, 20, 30))  # Expected output: 15\nprint(floor_Min(1, 2, 1))     # Expected output: 0\nprint(floor_Min(11, 10, 9))   # Expected output: 9",
    "test_cases": [
      "assert floor_Min(10,20,30) == 15",
      "assert floor_Min(1,2,1) == 0",
      "assert floor_Min(11,10,9) == 9"
    ]
  },
  {
    "mbpp_id": 610,
    "problem_statement": "Write a python function to remove the k'th element from a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]",
    "test_cases": [
      "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
      "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
      "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
    ]
  },
  {
    "mbpp_id": 611,
    "problem_statement": "Write a function to find the maximum of nth column from the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_of_nth(tuples_list, n):\n    # Extracting the nth element from each inner list and finding its maximum value\n    return max(x[n-1] for x in tuples_list)\n\n# Example usage:\nprint(max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2))  # Output: 19\nprint(max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1))  # Output: 10\nprint(max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1))  # Output: 11",
    "test_cases": [
      "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
      "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
      "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
    ]
  },
  {
    "mbpp_id": 612,
    "problem_statement": "Write a python function to merge the first and last elements separately in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: 'm' is not in list"
    ],
    "generated_code": "def merge(lists):\n    # Extracting all unique elements from each sublist\n    all_elements = set()\n    for lst in lists:\n        for item in lst:\n            if item not in all_elements:\n                all_elements.add(item)\n                \n    merged_list = []\n    \n    # Merging first and last elements separately\n    for element in sorted(all_elements):\n        merged_list.append([element])\n        \n        if len(merged_list) < len(lists):\n            merged_list[0].append(element)\n            \n        else:\n            new_item_index = lists.index(merged_list[-1][0][-1]) + 1\n            merged_list[new_item_index] = [merged_list[new_item_index], element]\n    \n    return merged_list\n\n\n# Test Cases\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))  # Should print [['x', 'a', 'm'], ['y', 'b', 'n']]\nprint(merge([[1, 2], [3, 4], [5, 6], [7, 8]]))     # Should print [[1, 3, 5, 7], [2, 4, 6, 8]]\nprint(merge([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']]))   # Should print [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]",
    "test_cases": [
      "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
      "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
      "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
    ]
  },
  {
    "mbpp_id": 613,
    "problem_statement": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def maximum_value(records):\n    max_values = [(key, max(record[1])) for key, record in records]\n    return max_values",
    "test_cases": [
      "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
      "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
      "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
    ]
  },
  {
    "mbpp_id": 614,
    "problem_statement": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cummulative_sum(tuple_list):\n    # Calculate the sum for each sub-tuple and then accumulate them\n    result = [sum(sublist) for sublist in tuple_list]\n    total_sum = sum(result)\n    return total_sum",
    "test_cases": [
      "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
      "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
      "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
    ]
  },
  {
    "mbpp_id": 615,
    "problem_statement": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - too many values to unpack (expected 2)",
      "Test 2: FAIL - too many values to unpack (expected 2)",
      "Test 3: FAIL - too many values to unpack (expected 2)"
    ],
    "generated_code": "def average_tuple(tup_of_tups):\n    total = sum(num for tup in tup_of_tups for num in tup)\n    return [total / (len(x) * len(y)) for x, y in zip(*tup_of_tups)]",
    "test_cases": [
      "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
      "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
      "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
    ]
  },
  {
    "mbpp_id": 616,
    "problem_statement": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_modulo(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] % tup2[i])\n    return tuple(result)\n\n# Test cases\nprint(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (0, 4, 5, 1)\nprint(tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (5, 5, 6, 1)\nprint(tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (5, 6, 7, 1)",
    "test_cases": [
      "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
      "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
      "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
    ]
  },
  {
    "mbpp_id": 617,
    "problem_statement": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - division by zero",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Jumps(d, n, m):\n    return round((d * 2 + n - m) / m)",
    "test_cases": [
      "assert min_Jumps(3,4,11)==3.5",
      "assert min_Jumps(3,4,0)==0",
      "assert min_Jumps(11,14,11)==1"
    ]
  },
  {
    "mbpp_id": 618,
    "problem_statement": "Write a function to divide two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef div_list(list1: List[int], list2: List[int]) -> List[float]:\n    return [x / y for x, y in zip(list1, map(lambda z: float(z), list2))]",
    "test_cases": [
      "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
      "assert div_list([3,2],[1,4])==[3.0, 0.5]",
      "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
    ]
  },
  {
    "mbpp_id": 619,
    "problem_statement": "Write a function to move all the numbers in it to the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: move_num() missing 1 required positional argument: 'num_str'"
    ],
    "generated_code": "def move_num(s, num_str):\n    # Splitting the string into words and removing spaces between them\n    words = s.split()\n    # Converting each word to an integer if possible\n    try:\n        int_words = [int(word) for word in words]\n    except ValueError:\n        int_words = []\n\n    # Joining the integers back together with their corresponding strings\n    result = ''.join([num_str[nums] for nums in int_words])\n    \n    return result\n\n# Test cases\nprint(move_num('I1love143you55three3000thousand'))  # Should return 'Iloveyouthreethousand1143553000'\nprint(move_num('Avengers124Assemble'))              # Should return 'AvengersAssemble124'\nprint(move_num('Its11our12path13to14see15things16do17things'))   # Should return 'Itsourpathtoseethingsdothings11121314151617'",
    "test_cases": [
      "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
      "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
      "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
    ]
  },
  {
    "mbpp_id": 620,
    "problem_statement": "Write a function to find the largest subset where each pair is divisible.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef largest_subset(arr: List[int], n: int) -> int:\n    arr.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] % arr[j] == 0 and 1 + dp[j] > dp[i]:\n                dp[i] = 1 + dp[j]\n    return max(dp)",
    "test_cases": [
      "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
      "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
      "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
    ]
  },
  {
    "mbpp_id": 621,
    "problem_statement": "Write a function to increment the numeric values in the given strings by k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def increment_numerics(strings, k):\n    return [str(int(num) + k) if num.isdigit() else num for num in strings]",
    "test_cases": [
      "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
      "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
      "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
    ]
  },
  {
    "mbpp_id": 622,
    "problem_statement": "Write a function to find the median of two sorted arrays of same size.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_median() takes 2 positional arguments but 3 were given",
      "Test 2: FAIL - get_median() takes 2 positional arguments but 3 were given",
      "Test 3: FAIL - get_median() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "import heapq\nfrom typing import List\n\ndef get_median(nums1: List[int], nums2: List[int]) -> float:\n    \"\"\"\n    Finds and returns the median of two sorted arrays of the same length.\n    \n    Parameters:\n    - nums1 (List[int]): The first sorted array.\n    - nums2 (List[int]): The second sorted array.\n    \n    Returns:\n    - float: The median value of the two arrays combined as one single sorted list.\n    \"\"\"\n    merged_nums = []\n    i, j = 0, 0\n    \n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] <= nums2[j]:\n            heapq.heappush(merged_nums, nums1[i])\n            i += 1\n        else:\n            heapq.heappush(merged_nums, nums2[j])\n            j += 1\n            \n    # Add remaining elements from nums1 or nums2\n    while i < len(nums1):\n        heapq.heappush(merged_nums, nums1[i])\n        i += 1\n    while j < len(nums2):\n        heapq.heappush(merged_nums, nums2[j])\n        j += 1\n    \n    # If even number of elements, take the average of the middle two values\n    if len(merged_nums) % 2 == 0:\n        return (merged_nums[0] + merged_nums[1]) / 2\n    else:\n        return merged_nums[0]",
    "test_cases": [
      "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
      "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
      "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
    ]
  },
  {
    "mbpp_id": 623,
    "problem_statement": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef nth_nums(lst, n):\n    return [math.pow(i, n) for i in lst]\n\n# Test cases\nprint(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)) # Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nprint(nth_nums([10,20,30], 3)) # Output: [1000, 8000, 27000]\nprint(nth_nums([12,15], 5)) # Output: [248832, 759375]",
    "test_cases": [
      "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
      "assert nth_nums([12,15],5)==([248832, 759375])"
    ]
  },
  {
    "mbpp_id": 624,
    "problem_statement": "Write a python function to convert the given string to upper case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_upper(input_str):\n    # Convert the input string to uppercase using the str.upper() method and return the result\n    return input_str.upper()",
    "test_cases": [
      "assert is_upper(\"person\") ==\"PERSON\"",
      "assert is_upper(\"final\") == \"FINAL\"",
      "assert is_upper(\"Valid\") == \"VALID\""
    ]
  },
  {
    "mbpp_id": 625,
    "problem_statement": "Write a python function to interchange first and last elements in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Swap the first and last elements of the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([1,2,3]) == [3,2,1]",
      "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
      "assert swap_List([4,5,6]) == [6,5,4]"
    ]
  },
  {
    "mbpp_id": 626,
    "problem_statement": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def triangle_area(radius):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with radius 'radius'.\n    \n    Parameters:\n        radius (float): The radius of the semicircle.\n        \n    Returns:\n        float: The area of the largest inscribed triangle.\n    \"\"\"\n    # The largest inscribed triangle is an equilateral triangle when its base lies on the diameter.\n    side = 2 * radius\n    height = math.sqrt(radius**2 - (side / 2)**2)\n    return (side * height) / 2",
    "test_cases": [
      "assert triangle_area(0) == 0",
      "assert triangle_area(-1) == -1",
      "assert triangle_area(2) == 4"
    ]
  },
  {
    "mbpp_id": 627,
    "problem_statement": "Write a python function to find the smallest missing number from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_First_Missing' is not defined",
      "Test 2: FAIL - name 'find_First_Missing' is not defined",
      "Test 3: FAIL - name 'find_First_Missing' is not defined"
    ],
    "generated_code": "def find_first_missing(nums, start, end):\n    for i in range(start + 1, end):  # Loop through all indices in the given range excluding the last one.\n        if nums[i] != i:  # If the value at index i is not equal to its actual index, it means there's a gap.\n            return i  # Return the first such index as the missing number.\n    return end  # If no gaps are found within the given range, return the length of the range plus one as the missing number.",
    "test_cases": [
      "assert find_First_Missing([0,1,2,3],0,3) == 4",
      "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
      "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
    ]
  },
  {
    "mbpp_id": 628,
    "problem_statement": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_spaces(input_string):\n    # Replace spaces with %20 using Python's str.replace method\n    return input_string.replace(' ', '%20')\n\n# Test cases\nprint(replace_spaces(\"My Name is Dawood\"))  # Expected output: \"My%20Name%20is%20Dawood\"\nprint(replace_spaces(\"I am a Programmer\"))  # Expected output: \"I%20am%20a%20Programmer\"\nprint(replace_spaces(\"I love Coding\"))      # Expected output: \"I%20love%20Coding\"",
    "test_cases": [
      "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
      "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
      "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
    ]
  },
  {
    "mbpp_id": 629,
    "problem_statement": "Write a python function to find even numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(numbers_list):\n    \"\"\"\n    Returns a list of all even numbers found in the given mixed list.\n    \n    Parameters:\n    - numbers_list (list): A list containing both integers and floats.\n    \n    Returns:\n    - list: A list of even numbers from the input list.\n    \"\"\"\n    even_numbers = [num for num in numbers_list if isinstance(num, int) and num % 2 == 0]\n    return even_numbers",
    "test_cases": [
      "assert Split([1,2,3,4,5]) == [2,4]",
      "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
      "assert Split ([8,12,15,19]) == [8,12]"
    ]
  },
  {
    "mbpp_id": 630,
    "problem_statement": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_coordinates(coord):\n    x, y = coord\n    result = []\n    for i in range(y-1, y+2):\n        if i >= 0 and i < 10:\n            result.append([x, i])\n    return result",
    "test_cases": [
      "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
      "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
      "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
    ]
  },
  {
    "mbpp_id": 631,
    "problem_statement": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef replace_spaces(text):\n    # Replace all whitespace characters with underscores and vice versa.\n    replaced_text = re.sub(r'\\s', '_', text) if re.search(r'\\s', text) else text\n    return replaced_text.replace('_', ' ').replace(' ', '_')",
    "test_cases": [
      "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
      "assert replace_spaces('The Avengers') == 'The_Avengers'",
      "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
    ]
  },
  {
    "mbpp_id": 632,
    "problem_statement": "Write a python function to move all zeroes to the end of the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_zero(nums):\n    \"\"\"\n    Move all zeroes in the list to the end while maintaining the relative order of other elements.\n    \n    :param nums: List[int] - The input list containing integers and possibly zero values.\n    :return: List[int] - The modified list with all zeroes moved to the end.\n    \"\"\"\n    # Use two pointers to swap non-zero elements to the beginning and zeros to the end.\n    i = j = 0\n    while j < len(nums):\n        if nums[j] != 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n        j += 1\n    return nums",
    "test_cases": [
      "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
      "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
      "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
    ]
  },
  {
    "mbpp_id": 633,
    "problem_statement": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pair_OR_Sum(arr, n):\n    # Calculate the total XOR of all elements in the array\n    total_xor = 0\n    for num in arr:\n        total_xor ^= num\n    \n    result = 0\n    # Iterate through each element in the array and calculate the contribution to the result\n    for i in range(n):\n        result += total_xor ^ arr[i]\n    \n    return result",
    "test_cases": [
      "assert pair_OR_Sum([5,9,7,6],4) == 47",
      "assert pair_OR_Sum([7,3,5],3) == 12",
      "assert pair_OR_Sum([7,3],2) == 4"
    ]
  },
  {
    "mbpp_id": 634,
    "problem_statement": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    # Initialize sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the fourth power and add it to the total sum\n        total_sum += (i * 2) ** 4\n    \n    return total_sum",
    "test_cases": [
      "assert even_Power_Sum(2) == 272",
      "assert even_Power_Sum(3) == 1568",
      "assert even_Power_Sum(4) == 5664"
    ]
  },
  {
    "mbpp_id": 635,
    "problem_statement": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_sort(nums):\n    # Convert list to a min-heap\n    heapq.heapify(nums)\n    \n    # Extract elements from the heap one by one and store them in a new list\n    result = []\n    while nums:\n        result.append(heapq.heappop(nums))\n    \n    return result\n\n# Test cases\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))  # Expected output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]))  # Expected output: [14, 22, 25, 25, 35, 58, 65, 75, 85]\nprint(heap_sort([7, 1, 9, 5]))  # Expected output: [1, 5, 7, 9]",
    "test_cases": [
      "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
    ]
  },
  {
    "mbpp_id": 636,
    "problem_statement": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def is_reciprocal_roots(a, b, c):\n    discriminant = b**2 - 4*a*c\n    \n    # If discriminant is zero, there is exactly one root which is also its reciprocal.\n    if discriminant == 0:\n        return \"Yes\"\n    \n    # For non-zero discriminant, calculate two roots and check if they are reciprocals.\n    sqrt_discriminant = math.sqrt(discriminant)\n    root_1 = (-b + sqrt_discriminant) / (2 * a)\n    root_2 = (-b - sqrt_discriminant) / (2 * a)\n    \n    return \"Yes\" if root_1 == 1/root_2 else \"No\"\n\n# Test Cases\nprint(is_reciprocal_roots(2, 0, 2))  # Expected output: \"Yes\"\nprint(is_reciprocal_roots(2, -5, 2))  # Expected output: \"Yes\"\nprint(is_reciprocal_roots(1, 2, 3))  # Expected output: \"No\"",
    "test_cases": [
      "assert Check_Solution(2,0,2) == \"Yes\"",
      "assert Check_Solution(2,-5,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\""
    ]
  },
  {
    "mbpp_id": 637,
    "problem_statement": "Write a function to check whether the given amount has no profit and no loss",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def noprofit_noloss(n, m):\n    return n == m",
    "test_cases": [
      "assert noprofit_noloss(1500,1200)==False",
      "assert noprofit_noloss(100,100)==True",
      "assert noprofit_noloss(2000,5000)==False"
    ]
  },
  {
    "mbpp_id": 638,
    "problem_statement": "Write a function to calculate wind chill index.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def wind_chill(temp, humidity):\n    # Calculate and return the wind chill index based on given formula\n    return round((0.069 * temp - 0.5) * humidity + 10)\n\n# Test the function with provided data points\nassert wind_chill(120, 35) == 40, \"Test case 1 failed\"\nassert wind_chill(40, 70) == 86, \"Test case 2 failed\"\nassert wind_chill(10, 100) == 116, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert wind_chill(120,35)==40",
      "assert wind_chill(40,70)==86",
      "assert wind_chill(10,100)==116"
    ]
  },
  {
    "mbpp_id": 639,
    "problem_statement": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sample_nam' is not defined",
      "Test 2: FAIL - name 'sample_nam' is not defined",
      "Test 3: FAIL - name 'sample_nam' is not defined"
    ],
    "generated_code": "def sample_name(name_list):\n    # Filter out names starting with a lowercase letter and sum their lengths\n    return sum(len(name) for name in name_list if name[0].isupper())",
    "test_cases": [
      "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
      "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
      "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
    ]
  },
  {
    "mbpp_id": 640,
    "problem_statement": "Write a function to remove the parenthesis area in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'list' object has no attribute 'split'"
    ],
    "generated_code": "def remove_parenthesis(s):\n    # Split the input string into words based on '(' and ')' \n    s = [w for w in s.split('(') if w]\n    return ''.join(s)\n\n# Test cases to verify the correctness of the solution\nassert remove_parenthesis([\"python (chrome)\"]) == \"python\"\nassert remove_parenthesis([\"string(.abc)\"]) == \"string\"\nassert remove_parenthesis([\"alpha(num)\"]) == \"alpha\"\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
      "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
      "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
    ]
  },
  {
    "mbpp_id": 641,
    "problem_statement": "Write a function to find the nth nonagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def is_nonagonal(n):\n    # Formula to calculate nth nonagonal number\n    result = n * (7*n - 5)\n    return result\n\n# Test cases to verify the correctness of the function\nassert is_nonagonal(10) == 325, \"Test case 1 failed\"\nassert is_nonagonal(15) == 750, \"Test case 2 failed\"\nassert is_nonagonal(18) == 1089, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_nonagonal(10) == 325",
      "assert is_nonagonal(15) == 750",
      "assert is_nonagonal(18) == 1089"
    ]
  },
  {
    "mbpp_id": 642,
    "problem_statement": "Write a function to remove similar rows from the given tuple matrix.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'list' object has no attribute 'split'"
    ],
    "generated_code": "def remove_similar_row(mat):\n    unique_rows = set()\n    for row in mat:\n        # Sort each row and convert it to a string so we can use it as a key for a set.\n        sorted_row_str = str(sorted(row))\n        unique_rows.add(sorted_row_str)\n    # Convert back to list of tuples for output.\n    return {(tuple(map(int, row.split(','))), tuple(map(int, other_row.split(',')))) \n            for (row, other_row) in zip(mat, unique_rows)}\n\n# Test cases\nprint(remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]]))\nprint(remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]]))\nprint(remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]]))",
    "test_cases": [
      "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
      "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
      "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
    ]
  },
  {
    "mbpp_id": 643,
    "problem_statement": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_wordz_middle(text):\n    # Check if the string contains 'z' and is neither at the start nor at the end\n    return ('Found a match!' if 'z' in text[1:-1] else 'Not matched!')\n\n# Test cases to verify the correctness of the function\nprint(text_match_wordz_middle(\"pythonzabc.\"))   # Expected output: Found a match!\nprint(text_match_wordz_middle(\"xyzabc.\"))       # Expected output: Found a match!\nprint(text_match_wordz_middle(\"  lang  \"))      # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 644,
    "problem_statement": "Write a python function to reverse an array upto a given position.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def reverse_Array_Upto_K(arr, k):\n    start = 0\n    end = len(arr) - 1\n    \n    while start < k:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    \n    return arr",
    "test_cases": [
      "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
      "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
      "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
    ]
  },
  {
    "mbpp_id": 645,
    "problem_statement": "Write a function to find the product of it’s kth index in the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_k_product(tuples_list, k):\n    # Extracting elements from each tuple at the k-th position and calculating their product\n    result = 1\n    for i in range(len(tuples_list)):\n        if k < len(tuples_list[i]):\n            result *= tuples_list[i][k]\n        else:\n            break\n    return result\n\n# Example test cases\nprint(find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2))  # Output: 665\nprint(find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1))  # Output: 280\nprint(find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0))  # Output: 210",
    "test_cases": [
      "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
      "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
      "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
    ]
  },
  {
    "mbpp_id": 646,
    "problem_statement": "Write a python function to count number of cubes of size k in a cube of size n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_cubes' is not defined",
      "Test 2: FAIL - name 'No_of_cubes' is not defined",
      "Test 3: FAIL - name 'No_of_cubes' is not defined"
    ],
    "generated_code": "def no_of_cubes(n, k):\n    # Initialize the total count of cubes\n    total_count = 0\n    \n    # Iterate over all possible positions for the center of the smaller cube within the larger cube\n    for i in range(k + 1): \n        for j in range(k + 1): \n            for l in range(k + 1): \n                if i * i + j * j + l * l == k * k:\n                    total_count += 1\n                    \n    return total_count\n\n# Test the function with provided data points\nprint(no_of_cubes(2, 1))  # Expected output: 8\nprint(no_of_cubes(5, 2))  # Expected output: 64\nprint(no_of_cubes(1, 1))  # Expected output: 1",
    "test_cases": [
      "assert No_of_cubes(2,1) == 8",
      "assert No_of_cubes(5,2) == 64",
      "assert No_of_cubes(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 647,
    "problem_statement": "Write a function to split a string at uppercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_upperstring(s):\n    # Split the string and remove empty strings from the result\n    return [word for word in s.split(' ') if word != '']\n\n# Test cases\nprint(split_upperstring(\"PythonProgramLanguage\"))  # Expected output: ['Python', 'Program', 'Language']\nprint(split_upperstring(\"PythonProgram\"))           # Expected output: ['Python', 'Program']\nprint(split_upperstring(\"ProgrammingLanguage\"))    # Expected output: ['Programming', 'Language']",
    "test_cases": [
      "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
      "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
      "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
    ]
  },
  {
    "mbpp_id": 648,
    "problem_statement": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def exchange_elements(lst):\n    return [lst[i-1] if i%2 == 1 else lst[i] for i in range(1, len(lst)+1)]",
    "test_cases": [
      "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
      "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
      "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
    ]
  },
  {
    "mbpp_id": 649,
    "problem_statement": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Range_list(arr, start_index, end_index):\n    \"\"\"\n    Calculate the sum of elements in the array from index start_index to end_index - 1.\n    \n    Parameters:\n    arr (list): The input list of integers.\n    start_index (int): The starting index for the range.\n    end_index (int): The ending index (exclusive) for the range.\n    \n    Returns:\n    int: The sum of the elements within the given range.\n    \"\"\"\n    return sum(arr[start_index:end_index])\n\n# Test cases\nprint(sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)) # Expected output: 29\nprint(sum_Range_list([1,2,3,4,5], 1, 2)) # Expected output: 5\nprint(sum_Range_list([1,0,1,2,5,6], 4, 5)) # Expected output: 11",
    "test_cases": [
      "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
      "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
      "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
    ]
  },
  {
    "mbpp_id": 650,
    "problem_statement": "Write a python function to check whether the given two arrays are equal or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Equal(arr1, arr2, n1, n2):\n    # Check if both arrays have the same length and each element is also equal in count for comparison\n    return sorted(arr1) == sorted(arr2)\n\n# Test cases\nprint(are_Equal([1,2,3],[3,2,1],3,3))  # Expected output: True\nprint(are_Equal([1,1,1],[2,2,2],3,3))  # Expected output: False\nprint(are_Equal([8,9],[4,5,6],2,3))    # Expected output: False",
    "test_cases": [
      "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
      "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
      "assert are_Equal([8,9],[4,5,6],2,3) == False"
    ]
  },
  {
    "mbpp_id": 651,
    "problem_statement": "Write a function to check if one tuple is a subset of another tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset(subset, superset):\n    \"\"\"\n    Check if all elements in 'subset' are present in 'superset'.\n    \n    Parameters:\n    subset (tuple): The tuple to be checked as a subset.\n    superset (tuple): The tuple in which membership of 'subset' is to be verified.\n    \n    Returns:\n    bool: True if 'subset' is a subset of 'superset', otherwise False.\n    \"\"\"\n    # Convert both tuples into sets for easy comparison\n    set_superset = set(superset)\n    set_subset = set(subset)\n    \n    # Return True if all elements of 'subset' are in 'superset'\n    return set_subset.issubset(set_superset)\n\n# Test cases to verify the correctness of the solution\nprint(check_subset((10, 4, 5, 6), (5, 10)))  # Expected output: True\nprint(check_subset((1, 2, 3, 4), (5, 6)))   # Expected output: False\nprint(check_subset((7, 8, 9, 10), (10, 8))) # Expected output: True",
    "test_cases": [
      "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
      "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
      "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
    ]
  },
  {
    "mbpp_id": 652,
    "problem_statement": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def matrix_to_list(matrix):\n    flat_matrix = [item for sublist in matrix for item in sublist]\n    columns = len(flat_matrix) // len(matrix)\n    result = []\n    for i in range(columns):\n        temp = []\n        for j in range(len(matrix)):\n            if i < len(matrix[j]):\n                temp.append(flat_matrix[i * len(matrix[0]) + j])\n        result.append(tuple(temp))\n    return '[' + ', '.join(map(str, result)) + ']'\n\n# Test cases\nprint(matrix_to_list([[['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]])) # Output: [('a', 'e'), ('b', 'f'), ('c', 'g'), ('d', 'h')]",
    "test_cases": [
      "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
      "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
      "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
    ]
  },
  {
    "mbpp_id": 653,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef grouping_dictionary(lst):\n    result = defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)\n\n# Example usage and test cases\nprint(grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])) \nprint(grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)]))\nprint(grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)]))",
    "test_cases": [
      "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
      "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
      "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
    ]
  },
  {
    "mbpp_id": 654,
    "problem_statement": "Write a function to find the perimeter of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_cases": [
      "assert rectangle_perimeter(10,20)==60",
      "assert rectangle_perimeter(10,5)==30",
      "assert rectangle_perimeter(4,2)==12"
    ]
  },
  {
    "mbpp_id": 655,
    "problem_statement": "Write a python function to find the sum of fifth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fifth_Power_Sum(n):\n    total = sum([i**5 for i in range(1, n+1)])\n    return total",
    "test_cases": [
      "assert fifth_Power_Sum(2) == 33",
      "assert fifth_Power_Sum(4) == 1300",
      "assert fifth_Power_Sum(3) == 276"
    ]
  },
  {
    "mbpp_id": 656,
    "problem_statement": "Write a python function to find the minimum sum of absolute differences of two arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_Min_Sum(arr1: List[int], arr2: List[int], n: int) -> int:\n    # Calculate the difference between corresponding elements and their indices\n    diff = [abs(a - b) + abs(i - j) for i, a in enumerate(arr1) for j, b in enumerate(arr2)]\n    \n    # Return the sum of the differences with a minimum value multiplied by -1\n    return min(diff) * -1 if min(diff) != float('inf') else 0",
    "test_cases": [
      "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
      "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
      "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
    ]
  },
  {
    "mbpp_id": 657,
    "problem_statement": "Write a python function to find the first digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Digit(n):\n    # Calculate n! and then get the last digit\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return str(fact)[-1]",
    "test_cases": [
      "assert first_Digit(5) == 1",
      "assert first_Digit(10) == 3",
      "assert first_Digit(7) == 5"
    ]
  },
  {
    "mbpp_id": 658,
    "problem_statement": "Write a function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(arr):\n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n    \n    # Find the element with the maximum count\n    max_count_element = max(counts, key=counts.get)\n    \n    return max_count_element\n\n# Test cases\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]) == 2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11]) == 1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1]) == 1",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
      "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
      "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
    ]
  },
  {
    "mbpp_id": 659,
    "problem_statement": "Write a python function to print duplicants from a list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Repeat' is not defined",
      "Test 2: FAIL - name 'Repeat' is not defined",
      "Test 3: FAIL - name 'Repeat' is not defined"
    ],
    "generated_code": "def repeat(lst):\n    duplicates = []\n    for num in lst:\n        if lst.count(num) > 1 and num not in duplicates:\n            duplicates.append(num)\n    return duplicates",
    "test_cases": [
      "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
      "assert Repeat([-1, 1, -1, 8]) == [-1]",
      "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
    ]
  },
  {
    "mbpp_id": 660,
    "problem_statement": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Points(start_range_1, end_range_1, start_range_2, end_range_2):\n    # Find maximum of the smaller range's starting point and minimum of the larger range's ending point.\n    min_end = max(start_range_2, end_range_2)\n\n    # If the first range starts after the second range ends, swap them for easier calculation.\n    if start_range_1 > end_range_2:\n        start_range_1, end_range_1 = end_range_2, start_range_1\n    \n    # The result is the sum of these two points plus one extra unit as we can't include points within the intersection.\n    return [start_range_1, min_end + 1]",
    "test_cases": [
      "assert find_Points(5,10,1,5) == (1,10)",
      "assert find_Points(3,5,7,9) == (3,9)",
      "assert find_Points(1,5,2,8) == (1,8)"
    ]
  },
  {
    "mbpp_id": 661,
    "problem_statement": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: free variable 'dp' referenced before assignment in enclosing scope"
    ],
    "generated_code": "def max_sum_of_three_consecutive(arr, k):\n    n = len(arr)\n    if n < k:\n        return None\n    \n    dp = [arr[0]] + [max(0, arr[i] - min(dp[i-1], dp[i-k])) for i in range(1, n)]\n    \n    # Calculate the prefix and suffix sums\n    pre_sum = dp[0]\n    suf_sum = [dp[-1]]\n    for i in range(1, n):\n        pre_sum += dp[i]\n        suf_sum.append(pre_sum - dp[n-i])\n    \n    # Find the maximum sum from both ends\n    left_max = max(dp[1:n//2+1])\n    right_max = max(suf_sum[:-1])\n    \n    return pre_sum + suf_sum[1:-1] + left_max + right_max\n\n# Test cases\nprint(max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5))  # Expected output: 2101\nprint(max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5))  # Expected output: 5013\nprint(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8))   # Expected output: 27",
    "test_cases": [
      "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
      "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
      "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
    ]
  },
  {
    "mbpp_id": 662,
    "problem_statement": "Write a function to sort a list in a dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_cases": [
      "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
      "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
      "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
    ]
  },
  {
    "mbpp_id": 663,
    "problem_statement": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max_val(x, y, k):\n    \"\"\"\n    Finds the maximum value of k such that k % x = y.\n    \n    Parameters:\n    x (int): The divisor.\n    y (int): The remainder desired when k is divided by x.\n    k (int): The initial guess for k.\n    \n    Returns:\n    int: The largest possible value of k satisfying the condition.\n    \"\"\"\n    # Increment k until it satisfies the equation k % x == y\n    while k % x != y:\n        k += 1\n    return k",
    "test_cases": [
      "assert find_max_val(15, 10, 5) == 15",
      "assert find_max_val(187, 10, 5) == 185",
      "assert find_max_val(16, 11, 1) == 12"
    ]
  },
  {
    "mbpp_id": 664,
    "problem_statement": "Write a python function to find the average of even numbers till a given even number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_Even(n):\n    total = 0\n    count = 0\n    for i in range(2, n+1, 2):  # Start from 2 and increment by 2 until n\n        total += i\n        count += 1\n    if count == 0:\n        return 0  # Avoid division by zero error\n    else:\n        return total / count",
    "test_cases": [
      "assert average_Even(2) == 2",
      "assert average_Even(4) == 3",
      "assert average_Even(100) == 51"
    ]
  },
  {
    "mbpp_id": 665,
    "problem_statement": "Write a python function to shift first element to the end of given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def move_last(lst):\n    \"\"\"\n    Shifts the last element of lst to the beginning and returns the modified list.\n    \n    Parameters:\n    lst (list): The input list from which the last element is removed and moved to the front.\n    \n    Returns:\n    list: A new list with the last element moved to the front.\n    \"\"\"\n    if not lst: \n        raise ValueError(\"List cannot be empty\")\n    last_element = lst.pop()\n    lst.insert(0, last_element)\n    return lst\n\n# Check function with provided data points\nassert move_last([1,2,3,4]) == [2,3,4,1], \"Test case 1 failed\"\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2], \"Test case 2 failed\"\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert move_last([1,2,3,4]) == [2,3,4,1]",
      "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
      "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
    ]
  },
  {
    "mbpp_id": 666,
    "problem_statement": "Write a function to count occurrence of a character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_char(s, char):\n    return s.count(char)",
    "test_cases": [
      "assert count_char(\"Python\",'o')==1",
      "assert count_char(\"little\",'t')==2",
      "assert count_char(\"assert\",'s')==2"
    ]
  },
  {
    "mbpp_id": 667,
    "problem_statement": "Write a python function to count number of vowels in the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Check_Vow(s, word):\n    # Counting vowels in the given word within the string\n    vowel_count = sum(1 for char in s if char.lower() in 'aeiou' and char not in word)\n    \n    return vowel_count",
    "test_cases": [
      "assert Check_Vow('corner','AaEeIiOoUu') == 2",
      "assert Check_Vow('valid','AaEeIiOoUu') == 2",
      "assert Check_Vow('true','AaEeIiOoUu') ==2"
    ]
  },
  {
    "mbpp_id": 668,
    "problem_statement": "Write a python function to replace multiple occurence of character by single.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace' is not defined",
      "Test 2: FAIL - name 'replace' is not defined",
      "Test 3: FAIL - name 'replace' is not defined"
    ],
    "generated_code": "def replace_char(s, old_char, new_char):\n    # Replace all occurrences of old_char with new_char in s\n    return ''.join([new_char if c == old_char else c for c in s])\n\n# Test cases\nprint(replace_char('peep', 'e', ''))  # Output: \"pep\"\nprint(replace_char('Greek', 'e', 'r'))  # Output: \"Grek\"\nprint(replace_char('Moon', 'o', 'm'))  # Output: \"Mon\"",
    "test_cases": [
      "assert replace('peep','e') == 'pep'",
      "assert replace('Greek','e') == 'Grek'",
      "assert replace('Moon','o') == 'Mon'"
    ]
  },
  {
    "mbpp_id": 669,
    "problem_statement": "Write a function to check whether the given ip address is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_IP(ip_address):\n    # Regular expression for validating an IP address\n    pattern = r'^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$'\n    \n    if re.match(pattern, ip_address):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n\n# Test cases\nprint(check_IP(\"192.168.0.1\"))  # Output: Valid IP address\nprint(check_IP(\"110.234.52.124\"))  # Output: Valid IP address\nprint(check_IP(\"366.1.2.2\"))  # Output: Invalid IP address",
    "test_cases": [
      "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
      "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
      "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
    ]
  },
  {
    "mbpp_id": 670,
    "problem_statement": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decreasing_trend(numbers):\n    # Check if each number is greater than the previous one in the list\n    for i in range(1, len(numbers)):\n        if numbers[i] <= numbers[i - 1]:\n            return False\n    return True",
    "test_cases": [
      "assert decreasing_trend([-4,-3,-2,-1]) == True",
      "assert decreasing_trend([1,2,3]) == True",
      "assert decreasing_trend([3,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 671,
    "problem_statement": "Write a python function to set the right most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_Right_most_Unset_Bit(n):\n    # Create a mask with all bits set to 1 except the rightmost unset bit.\n    mask = n - ((n >> 1) & (n << 1))\n    \n    # Apply the mask to n to set the right most unset bit.\n    result = n | mask\n    \n    return result",
    "test_cases": [
      "assert set_Right_most_Unset_Bit(21) == 23",
      "assert set_Right_most_Unset_Bit(11) == 15",
      "assert set_Right_most_Unset_Bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 672,
    "problem_statement": "Write a function to find maximum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_cases": [
      "assert max_of_three(10,20,30)==30",
      "assert max_of_three(55,47,39)==55",
      "assert max_of_three(10,49,30)==49"
    ]
  },
  {
    "mbpp_id": 673,
    "problem_statement": "Write a python function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(lst):\n    # Convert each element in the list to string and join them together to form the final integer.\n    return int(''.join(map(str, lst)))",
    "test_cases": [
      "assert convert([1,2,3]) == 123",
      "assert convert([4,5,6]) == 456",
      "assert convert([7,8,9]) == 789"
    ]
  },
  {
    "mbpp_id": 674,
    "problem_statement": "Write a function to remove duplicate words from a given string using collections module.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    \"\"\"\n    Remove duplicate words from the given string.\n    \n    Args:\n        s (str): The input string with possibly duplicated words.\n        \n    Returns:\n        str: A new string with all duplicate words removed.\n    \"\"\"\n    # Splitting the string into words, converting them to lowercase, and removing duplicates while preserving order\n    unique_words = list(OrderedDict.fromkeys(word.lower() for word in s.split()))\n    # Joining the words back together with spaces as separators\n    return ' '.join(unique_words)\n\n# Test cases to verify the correctness of the function\nassert remove_duplicate(\"Python Exercises Practice Solution Exercises\") == \"Python Exercises Practice Solution\"\nassert remove_duplicate(\"Python Exercises Practice Solution Python\") == \"Python Exercises Practice Solution\"\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\") == \"Python Exercises Practice Solution\"",
    "test_cases": [
      "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
    ]
  },
  {
    "mbpp_id": 675,
    "problem_statement": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_nums(a, b, c, d):\n    total = a + b + c + d\n    # Check if the sum falls within the given range and return accordingly\n    if total >= 18 and total <= 29:\n        return 20\n    else:\n        return total",
    "test_cases": [
      "assert sum_nums(2,10,11,20)==20",
      "assert sum_nums(15,17,1,10)==32",
      "assert sum_nums(10,15,5,30)==20"
    ]
  },
  {
    "mbpp_id": 676,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_extra_char(input_str):\n    # Remove everything except alphanumeric characters and spaces\n    result = re.sub('[\\W_]+', '', input_str)\n    return result.strip()",
    "test_cases": [
      "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
      "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
      "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
    ]
  },
  {
    "mbpp_id": 677,
    "problem_statement": "Write a function to check if the triangle is valid or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validity_triangle(side1, side2, side3):\n    # Check if all sides are positive numbers\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return False\n    \n    # Sort the sides so they can be used in the comparison\n    sides = sorted([side1, side2, side3])\n    \n    # Check for the triangle inequality theorem\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    \n    return True",
    "test_cases": [
      "assert validity_triangle(60,50,90)==False",
      "assert validity_triangle(45,75,60)==True",
      "assert validity_triangle(30,50,100)==True"
    ]
  },
  {
    "mbpp_id": 678,
    "problem_statement": "Write a python function to remove spaces from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_spaces(input_string):\n    # Remove all spaces from the input string using str.replace()\n    result = input_string.replace(\" \", \"\")\n    return result\n\n# Test cases\nprint(remove_spaces(\"a b c\"))  # Expected output: abc\nprint(remove_spaces(\"1 2 3\"))  # Expected output: 123\nprint(remove_spaces(\" b c\"))   # Expected output: bc",
    "test_cases": [
      "assert remove_spaces(\"a b c\") == \"abc\"",
      "assert remove_spaces(\"1 2 3\") == \"123\"",
      "assert remove_spaces(\" b c\") == \"bc\""
    ]
  },
  {
    "mbpp_id": 679,
    "problem_statement": "Write a function to access dictionary key’s element by index.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not subscriptable",
      "Test 2: FAIL - 'int' object is not subscriptable",
      "Test 3: FAIL - 'int' object is not subscriptable"
    ],
    "generated_code": "def access_key(dct, idx):\n    # Check if the index is within the bounds of the dictionary keys\n    if idx >= len(dct) or idx < -len(dct):\n        return None\n    else:\n        # Accessing the value using negative indexing\n        return dct[next(iter(reversed(list(dct.keys()))))][idx]",
    "test_cases": [
      "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
      "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
      "assert access_key({'program':15,'computer':45},1)== 'computer'"
    ]
  },
  {
    "mbpp_id": 680,
    "problem_statement": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'increasing_trend' is not defined",
      "Test 2: FAIL - name 'increasing_trend' is not defined",
      "Test 3: FAIL - name 'increasing_trend' is not defined"
    ],
    "generated_code": "def is_increasing(seq):\n    \"\"\"\n    Checks if the given sequence of numbers has an increasing trend.\n    \n    Args:\n        seq (list): A list of integers representing the sequence.\n        \n    Returns:\n        bool: True if the sequence is in increasing order, otherwise False.\n    \"\"\"\n    for i in range(len(seq) - 1):\n        if seq[i] >= seq[i + 1]:\n            return False\n    return True",
    "test_cases": [
      "assert increasing_trend([1,2,3,4]) == True",
      "assert increasing_trend([4,3,2,1]) == False",
      "assert increasing_trend([0,1,4,9]) == True"
    ]
  },
  {
    "mbpp_id": 681,
    "problem_statement": "Write a python function to find the smallest prime divisor of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_Divisor(n):\n    # Check if n is divisible by any integer from 2 up to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    # If no divisors were found within the loop, n is prime and its own smallest divisor\n    return n",
    "test_cases": [
      "assert smallest_Divisor(10) == 2",
      "assert smallest_Divisor(25) == 5",
      "assert smallest_Divisor(31) == 31"
    ]
  },
  {
    "mbpp_id": 682,
    "problem_statement": "Write a function to multiply two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from functools import reduce\n\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))\n\n# Test cases\nprint(mul_list([1, 2, 3], [4, 5, 6])) # Expected output: [4, 10, 18]\nprint(mul_list([1, 2], [3, 4])) # Expected output: [3, 8]\nprint(mul_list([90, 120], [50, 70])) # Expected output: [4500, 8400]",
    "test_cases": [
      "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
      "assert mul_list([1,2],[3,4])==[3,8]",
      "assert mul_list([90,120],[50,70])==[4500,8400]"
    ]
  },
  {
    "mbpp_id": 683,
    "problem_statement": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Square(n):\n    # Iterate through all possible values of i from 0 to sqrt(n)\n    for i in range(int(n**0.5) + 1):\n        # Check if n - i^2 is also a perfect square\n        j = int((n - i * i)**0.5)\n        if j * j == n - i * i:\n            return True\n    return False",
    "test_cases": [
      "assert sum_Square(25) == True",
      "assert sum_Square(24) == False",
      "assert sum_Square(17) == True"
    ]
  },
  {
    "mbpp_id": 684,
    "problem_statement": "Write a python function to count occurences of a character in a repeated string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Char(repeat_str, char_to_count):\n    total_count = len(repeat_str)\n    occurrences_of_char = repeat_str.count(char_to_count)\n    return min(occurrences_of_char, total_count)\n\n# Test cases\nprint(count_Char(\"abcac\", 'a'))  # Expected output: 4\nprint(count_Char(\"abca\", 'c'))   # Expected output: 2\nprint(count_Char(\"aba\", 'a'))    # Expected output: 7",
    "test_cases": [
      "assert count_Char(\"abcac\",'a') == 4",
      "assert count_Char(\"abca\",'c') == 2",
      "assert count_Char(\"aba\",'a') == 7"
    ]
  },
  {
    "mbpp_id": 685,
    "problem_statement": "Write a python function to find sum of prime numbers between 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Primes' is not defined",
      "Test 2: FAIL - name 'sum_Of_Primes' is not defined",
      "Test 3: FAIL - name 'sum_Of_Primes' is not defined"
    ],
    "generated_code": "def sum_of_primes(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes_sum = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            primes_sum += num\n    return primes_sum\n\n# Test cases\nprint(sum_of_primes(10))  # Expected output: 17\nprint(sum_of_primes(20))  # Expected output: 77\nprint(sum_of_primes(5))   # Expected output: 10",
    "test_cases": [
      "assert sum_Of_Primes(10) == 17",
      "assert sum_Of_Primes(20) == 77",
      "assert sum_Of_Primes(5) == 10"
    ]
  },
  {
    "mbpp_id": 686,
    "problem_statement": "Write a function to find the frequency of each element in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_element(lst):\n    from collections import Counter\n    result = dict(Counter(lst))\n    return str(result)",
    "test_cases": [
      "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
      "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
      "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
    ]
  },
  {
    "mbpp_id": 687,
    "problem_statement": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)",
    "test_cases": [
      "assert recur_gcd(12,14) == 2",
      "assert recur_gcd(13,17) == 1",
      "assert recur_gcd(9, 3) == 3"
    ]
  },
  {
    "mbpp_id": 688,
    "problem_statement": "Write a function to get the length of a complex number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef len_complex(real_part, imag_part):\n    return math.sqrt(real_part**2 + imag_part**2)",
    "test_cases": [
      "assert len_complex(3,4)==5.0",
      "assert len_complex(9,10)==13.45362404707371",
      "assert len_complex(7,9)==11.40175425099138"
    ]
  },
  {
    "mbpp_id": 689,
    "problem_statement": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unterminated string literal (detected at line 8)"
    ],
    "generated_code": "def min_jumps(arr, n):\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        if i > arr[i-1]:\n            return float('inf)\n        \n        for j in range(i):\n            if i <= j + arr[j] and dp[j] != float('inf'):\n                dp[i] = min(dp[i], dp[j] + 1)\n                break\n                \n    return dp[-1]\n\n# Example usage:\nprint(min_jumps([1, 3, 6, 1, 0, 9], 6))  # Output: 3\nprint(min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11))  # Output: 3\nprint(min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11))  # Output: 10",
    "test_cases": [
      "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
      "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
      "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
    ]
  },
  {
    "mbpp_id": 690,
    "problem_statement": "Write a function to multiply consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef mul_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums) - 1):\n        if i % 2 == 0:\n            result.append(nums[i] * nums[i + 1])\n        else:\n            result.append(nums[i] * nums[-1])\n    return result",
    "test_cases": [
      "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
      "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
      "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
    ]
  },
  {
    "mbpp_id": 691,
    "problem_statement": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_element(lst):\n    result = {}\n    for key, value in lst:\n        if value not in result:\n            result[value] = []\n        result[value].append(key)\n    return result\n\n# Test cases\nprint(group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)])) # {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nprint(group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)])) # {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nprint(group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)])) # {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
    "test_cases": [
      "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
      "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
      "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
    ]
  },
  {
    "mbpp_id": 692,
    "problem_statement": "Write a python function to find the last two digits in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Two_Digits(n):\n    # Calculate n! modulo 100 using Euler's theorem and properties of modular arithmetic.\n    result = pow(n-1, 2, 100)\n    return str(result)[-2:]",
    "test_cases": [
      "assert last_Two_Digits(7) == 40",
      "assert last_Two_Digits(5) == 20",
      "assert last_Two_Digits(2) == 2"
    ]
  },
  {
    "mbpp_id": 693,
    "problem_statement": "Write a function to remove multiple spaces in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_multiple_spaces(s):\n    # Replace sequences of one or more whitespace characters with a single space\n    s = re.sub(r'\\s+', ' ', s)\n    return s.strip()\n\n# Test cases to verify the correctness of the solution\nassert remove_multiple_spaces('Google      Assistant') == 'Google Assistant', \"Test case 1 failed\"\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core', \"Test case 2 failed\"\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
      "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
      "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
    ]
  },
  {
    "mbpp_id": 694,
    "problem_statement": "Write a function to extract unique values from the given dictionary values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_unique(dictionary):\n    result = set()\n    for key in dictionary:\n        if dictionary[key]:\n            result.update(set(dictionary[key]))\n    return list(result)",
    "test_cases": [
      "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
      "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
      "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
    ]
  },
  {
    "mbpp_id": 695,
    "problem_statement": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(tup1, tup2):\n    # Check if length of both tuples is same\n    if len(tup1) != len(tup2): \n        return False\n  \n    # Compare elements from both tuples\n    for i in range(len(tup1)):\n        if not tup1[i] > tup2[i]:\n            return False\n    \n    return True\n\n# Test cases\nprint(check_greater((10, 4, 5), (13, 5, 18)))  # Expected output: True\nprint(check_greater((1, 2, 3), (2, 1, 4)))     # Expected output: False\nprint(check_greater((4, 5, 6), (5, 6, 7)))     # Expected output: True",
    "test_cases": [
      "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
      "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
      "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
    ]
  },
  {
    "mbpp_id": 696,
    "problem_statement": "Write a function to zip two given lists of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zip_list(list1, list2):\n    return [[x, y] for x, y in zip(*[iter(zip(*list1))] * 2)]",
    "test_cases": [
      "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
      "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
      "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
    ]
  },
  {
    "mbpp_id": 697,
    "problem_statement": "Write a function to find number of even elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from functools import reduce\n\ndef count_even(lst):\n    # Use filter and lambda with map to check if each element is divisible by 2,\n    # then use len to count how many pass the condition.\n    return reduce(lambda x, y: x + int(y % 2 == 0), lst, 0)",
    "test_cases": [
      "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
      "assert count_even([10,15,14,13,-18,12,-20])==5",
      "assert count_even([1, 2, 4, 8, 9])==3"
    ]
  },
  {
    "mbpp_id": 698,
    "problem_statement": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_dict_item(dct):\n    # Sort dictionary by key tuples' products in descending order.\n    sorted_items = sorted(dct.items(), key=lambda item: item[0][0] * item[0][1], reverse=True)\n    return dict(sorted_items)\n\n# Test cases\nprint(sort_dict_item({(5, 6): 3, (2, 3): 9, (8, 4): 10, (6, 4): 12}))\nprint(sort_dict_item({(6, 7): 4, (3, 4): 10, (9, 5): 11, (7, 5): 13}))\nprint(sort_dict_item({(7, 8): 5, (4, 5): 11, (10, 6): 12, (8, 6): 14}))",
    "test_cases": [
      "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
      "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
      "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
    ]
  },
  {
    "mbpp_id": 699,
    "problem_statement": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    # Count the number of mismatches between s1 and s2\n    mismatch_count = sum(a != b for a, b in zip(s1, s2))\n    \n    # If there are more than 2 mismatches, it's not possible to swap to make them equal\n    if mismatch_count > 2:\n        return \"Not Possible\"\n    else:\n        return str(mismatch_count)",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
      "assert min_Swaps(\"1110000\",\"0001101\") == 3"
    ]
  },
  {
    "mbpp_id": 700,
    "problem_statement": "Write a function to count the number of elements in a list which are within a specific range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_range_in_list(lst, lower_bound, upper_bound):\n    return sum(lower_bound <= num <= upper_bound for num in lst)",
    "test_cases": [
      "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
      "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
      "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
    ]
  },
  {
    "mbpp_id": 701,
    "problem_statement": "Write a function to find the equilibrium index of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        if left_sum == (total_sum - left_sum - arr[i]):\n            return i\n        left_sum += arr[i]\n    return -1\n\n# Test cases\nprint(equilibrium_index([1, 2, 3, 4, 1, 2, 3]))  # Output should be 3\nprint(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]))  # Output should be 3\nprint(equilibrium_index([1, 2, 3]))  # Output should be -1",
    "test_cases": [
      "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
      "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
      "assert equilibrium_index([1, 2, 3]) == -1"
    ]
  },
  {
    "mbpp_id": 702,
    "problem_statement": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def removals(A, k, n):\n    A.sort()\n    count = 0\n    \n    for i in range(len(A)):\n        if A[i] - A[0] > k:\n            break\n        elif A[len(A)-1] - A[i] > k:\n            count += 1\n        else:\n            continue\n    \n    return len(A) - count",
    "test_cases": [
      "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
      "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
      "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
    ]
  },
  {
    "mbpp_id": 703,
    "problem_statement": "Write a function to check whether the given key is present in the dictionary or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_key_present(dct, key):\n    return key in dct.keys()\n\n# Test cases\nprint(is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 5)) # True\nprint(is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 6)) # True\nprint(is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 10)) # False",
    "test_cases": [
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
    ]
  },
  {
    "mbpp_id": 704,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result",
    "test_cases": [
      "assert harmonic_sum(10)==2.9289682539682538",
      "assert harmonic_sum(4)==2.083333333333333",
      "assert harmonic_sum(7)==2.5928571428571425 "
    ]
  },
  {
    "mbpp_id": 705,
    "problem_statement": "Write a function to sort a list of lists by length and value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_cases": [
      "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
      "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
      "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
    ]
  },
  {
    "mbpp_id": 706,
    "problem_statement": "Write a function to find whether an array is subset of another array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset(main_list, length_main, sub_list, length_sub):\n    if main_list == [] and sub_list == []:\n        return True\n    elif main_list == [] or sub_list == []:\n        return False\n    else:\n        for i in range(length_sub - length_main + 1):\n            temp = list(sub_list)\n            temp.remove(temp[0])\n            temp.insert(0, main_list[i])\n            if temp == main_list[i+length_main:]:\n                return True\n        return False",
    "test_cases": [
      "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
      "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
      "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
    ]
  },
  {
    "mbpp_id": 707,
    "problem_statement": "Write a python function to count the total set bits from 1 to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Counts and returns the total number of set bits (1s) in all numbers from 1 to n.\n    \n    Parameters:\n    n (int): The upper limit till which we need to calculate the sum of set bits.\n    \n    Returns:\n    int: The total number of set bits in all numbers from 1 to n.\n    \"\"\"\n    total_set_bits = 0\n    for i in range(1, n + 1):\n        # Counting set bits using Brian Kernighan's algorithm\n        count = 0\n        while i > 0:\n            if i & 1 == 1:\n                count += 1\n            i >>= 1\n        total_set_bits += count\n    return total_set_bits",
    "test_cases": [
      "assert count_Set_Bits(16) == 33",
      "assert count_Set_Bits(2) == 2",
      "assert count_Set_Bits(14) == 28"
    ]
  },
  {
    "mbpp_id": 708,
    "problem_statement": "Write a python function to convert a string to a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Convert' is not defined",
      "Test 2: FAIL - name 'Convert' is not defined",
      "Test 3: FAIL - name 'Convert' is not defined"
    ],
    "generated_code": "def convert(s):\n    # Split the input string into words and return them as a list\n    return s.split()",
    "test_cases": [
      "assert Convert('python program') == ['python','program']",
      "assert Convert('Data Analysis') ==['Data','Analysis']",
      "assert Convert('Hadoop Training') == ['Hadoop','Training']"
    ]
  },
  {
    "mbpp_id": 709,
    "problem_statement": "Write a function to count unique keys for each value present in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_unique(tup):\n    # Create a dictionary to hold counts of each key\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for item in tup:\n        # Check if the second element of the tuple is already a key in the dictionary\n        if item[1] not in count_dict:\n            count_dict[item[1]] = 0\n        # Increment the count for this key\n        count_dict[item[1]] += 1\n    \n    # Format the result as required\n    formatted_result = '{' + ', '.join(f\"{key}: {value}\" for key, value in sorted(count_dict.items())) + '}'\n    \n    return formatted_result",
    "test_cases": [
      "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
      "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
      "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
    ]
  },
  {
    "mbpp_id": 710,
    "problem_statement": "Write a function to access the initial and last data of the given tuple record.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def front_and_rear(data_tuple):\n    # Accessing the first element from the beginning of the tuple\n    front_element = data_tuple[0]\n    # Accessing the second last element from the end of the tuple\n    rear_element = data_tuple[-2]\n    \n    return (front_element, rear_element)\n\n# Test cases to verify the correctness of the function\nassert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
    "test_cases": [
      "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
      "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
      "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
    ]
  },
  {
    "mbpp_id": 711,
    "problem_statement": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def product_Equal(n):\n    # Convert the number to string to access individual digits\n    num_str = str(n)\n    \n    # Initialize variables for calculating products\n    even_product = 1\n    odd_product = 1\n    \n    # Iterate through each digit in the number\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            even_product *= int(num_str[i])\n        else:\n            odd_product *= int(num_str[i])\n    \n    # Check if the product of digits at even positions equals the product of digits at odd positions\n    return even_product == odd_product",
    "test_cases": [
      "assert product_Equal(2841) == True",
      "assert product_Equal(1234) == False",
      "assert product_Equal(1212) == False"
    ]
  },
  {
    "mbpp_id": 712,
    "problem_statement": "Write a function to remove duplicates from a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_duplicate' is not defined",
      "Test 2: FAIL - name 'remove_duplicate' is not defined",
      "Test 3: FAIL - name 'remove_duplicate' is not defined"
    ],
    "generated_code": "def remove_duplicates(lst):\n    return list(set(lst))",
    "test_cases": [
      "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
      "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
      "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
    ]
  },
  {
    "mbpp_id": 713,
    "problem_statement": "Write a function to check if the given tuple contains all valid values or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_valid(test_tuple):\n    # Check each value in the tuple and count the number of 'False' values\n    false_count = test_tuple.count(False)\n    \n    # If there is more than one 'False', it means there's at least one invalid value\n    if false_count > 0:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert check_valid((True, True, True, True) ) == True",
      "assert check_valid((True, False, True, True) ) == False",
      "assert check_valid((True, True, True, True) ) == True"
    ]
  },
  {
    "mbpp_id": 714,
    "problem_statement": "Write a python function to count the number of distinct power of prime factor of given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Fac(n):\n    if n <= 0:\n        return 0\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    factors = set()\n    while n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0 and is_prime(i):\n                factors.add(i)\n                break\n        n //= i\n    \n    return len(factors)\n\n# Test cases\nprint(count_Fac(24))  # Expected output: 3\nprint(count_Fac(12))  # Expected output: 2\nprint(count_Fac(4))   # Expected output: 1",
    "test_cases": [
      "assert count_Fac(24) == 3",
      "assert count_Fac(12) == 2",
      "assert count_Fac(4) == 1"
    ]
  },
  {
    "mbpp_id": 715,
    "problem_statement": "Write a function to convert the given string of integers into a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def str_to_tuple(input_string):\n    # Split the input string by comma and convert each element to an integer,\n    # then create a tuple from these elements.\n    return tuple(map(int, input_string.split(',')))",
    "test_cases": [
      "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
      "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
      "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
    ]
  },
  {
    "mbpp_id": 716,
    "problem_statement": "Write a function to find the perimeter of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_perimeter(side_length):\n    # The perimeter of a rhombus is four times the length of one side.\n    return 4 * side_length",
    "test_cases": [
      "assert rombus_perimeter(10)==40",
      "assert rombus_perimeter(5)==20",
      "assert rombus_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 717,
    "problem_statement": "Write a function to calculate the standard deviation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)\n\n# Test cases\nprint(sd_calc([4, 2, 5, 8, 6]))  # Expected output: approximately 2.236\nprint(sd_calc([1,2,3,4,5,6,7]))  # Expected output: approximately 2.160\nprint(sd_calc([5,9,10,15,6,4]))  # Expected output: approximately 4.070",
    "test_cases": [
      "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
      "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
      "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
    ]
  },
  {
    "mbpp_id": 718,
    "problem_statement": "Write a function to create a list taking alternate elements from another given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def alternate_elements(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]",
    "test_cases": [
      "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
      "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
      "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
    ]
  },
  {
    "mbpp_id": 719,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match(text):\n    return 'Found a match!' if text.startswith('a') and text[1:] == \"b\" * int(len(text) > 1) else 'Not matched!'",
    "test_cases": [
      "assert text_match(\"ac\")==('Found a match!')",
      "assert text_match(\"dc\")==('Not matched!')",
      "assert text_match(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 720,
    "problem_statement": "Write a function to add a dictionary to the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_dict_to_tuple(tup, new_dict):\n    # Convert the original tuple into a list for modification\n    converted_list = list(tup)\n    # Append the new dictionary as a key-value pair after the last element of the tuple\n    converted_list.append(new_dict)\n    # Return the modified tuple with the added dictionary\n    return tuple(converted_list)\n\n# Test cases to verify the correctness of the function\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}))  # Expected output: (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nprint(add_dict_to_tuple((1, 2, 3), {\"UTS\": 2, \"is\": 3, \"Worst\": 4}))  # Expected output: (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nprint(add_dict_to_tuple((8, 9, 10), {\"POS\": 3, \"is\": 4, \"Okay\": 5}))  # Expected output: (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
    "test_cases": [
      "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
      "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
      "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
    ]
  },
  {
    "mbpp_id": 721,
    "problem_statement": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can only concatenate list (not \"int\") to list"
    ],
    "generated_code": "def maxAverageOfPath(matrix, n):\n    \"\"\"\n    Finds the path with the maximum average in an n x n matrix.\n    \n    Parameters:\n    - matrix (list): A list of lists representing the n x n matrix.\n    - n (int): The size of the matrix along both dimensions.\n    \n    Returns:\n    float: The maximum average value found in the path.\n    \"\"\"\n    # Initialize variables\n    total_sum = sum(sum(row) for row in matrix)\n    min_sum = total_sum / n * n  # Initial minimum sum assumption\n    \n    for i in range(n):\n        for j in range(i+1):\n            current_sum = sum(matrix[k][j:n-j] + matrix[i+n-1-k][i] if k <= n-1-i else 0 for k in range(n))\n            if current_sum > min_sum:\n                min_sum = current_sum\n                \n    return min_sum / n\n\n# Check function with provided data points\nprint(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3))  # Expected output: 5.2\nprint(maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3))  # Expected output: 6.2\nprint(maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3))  # Expected output: 7.2",
    "test_cases": [
      "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
      "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
      "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
    ]
  },
  {
    "mbpp_id": 722,
    "problem_statement": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def filter_data(students, min_height, max_width):\n    filtered_students = {student: height for student, (height, width) in students.items() if min_height <= height <= max_width}\n    return filtered_students",
    "test_cases": [
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
    ]
  },
  {
    "mbpp_id": 723,
    "problem_statement": "Write a function to count the same pair in two given lists using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_same_pair(list_1, list_2):\n    return sum(map(lambda x, y: int(x == y), list_1, list_2))",
    "test_cases": [
      "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
      "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
      "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
    ]
  },
  {
    "mbpp_id": 724,
    "problem_statement": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power_base_sum(base, exp):\n    # Initialize sum with zero\n    total = 0\n    \n    # Calculate the sum of digits in base^exp\n    for i in str(base**exp):\n        if int(i) != 0:\n            total += int(i)\n    \n    return total",
    "test_cases": [
      "assert power_base_sum(2,100)==115",
      "assert power_base_sum(8,10)==37",
      "assert power_base_sum(8,15)==62"
    ]
  },
  {
    "mbpp_id": 725,
    "problem_statement": "Write a function to extract values between quotation marks of the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_quotation(input_string):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, input_string)\n    return matches\n\n# Test cases\nprint(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'))  # Should return ['A53', 'multi', 'Processor']\nprint(extract_quotation('Cast your \"favorite\" entertainment \"apps\"'))  # Should return ['favorite', 'apps']\nprint(extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support'))  # Should return ['4k Ultra HD', 'HDR 10']",
    "test_cases": [
      "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
      "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
      "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
    ]
  },
  {
    "mbpp_id": 726,
    "problem_statement": "Write a function to multiply the adjacent elements of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_elements(tup):\n    # Multiply each element with its successor in the tuple\n    result = tuple(x * y for x, y in zip(tup, tup[1:]))\n    return result",
    "test_cases": [
      "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
      "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
      "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
    ]
  },
  {
    "mbpp_id": 727,
    "problem_statement": "Write a function to remove all characters except letters and numbers using regex",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_char(s):\n    # Use regular expression to match and replace non-letter/number characters with an empty string\n    cleaned_string = re.sub('[^a-zA-Z0-9]', '', s)\n    return cleaned_string\n\n# Test cases\nprint(remove_char(\"123abcjw:, .@! eiw\"))  # Expected output: \"123abcjweiw\"\nprint(remove_char(\"Hello1234:, ! Howare33u\"))  # Expected output: \"Hello1234Howare33u\"\nprint(remove_char(\"Cool543Triks@:, Make@987Trips\"))  # Expected output: \"Cool543TriksMake987Trips\"",
    "test_cases": [
      "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
      "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
      "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
    ]
  },
  {
    "mbpp_id": 728,
    "problem_statement": "Write a function to sum elements in two lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]",
    "test_cases": [
      "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
      "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
      "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
    ]
  },
  {
    "mbpp_id": 729,
    "problem_statement": "Write a function to add two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef add_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x + y, lst1, lst2))",
    "test_cases": [
      "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
      "assert add_list([1,2],[3,4])==[4,6]",
      "assert add_list([10,20],[50,70])==[60,90]"
    ]
  },
  {
    "mbpp_id": 730,
    "problem_statement": "Write a function to remove consecutive duplicates of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]",
    "test_cases": [
      "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
      "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
      "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
    ]
  },
  {
    "mbpp_id": 731,
    "problem_statement": "Write a function to find the lateral surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsurface_cone(radius, height):\n    slant_height = ((radius ** 2 + height ** 2) ** 0.5)\n    return 3.14 * radius * slant_height",
    "test_cases": [
      "assert lateralsurface_cone(5,12)==204.20352248333654",
      "assert lateralsurface_cone(10,15)==566.3586699569488",
      "assert lateralsurface_cone(19,17)==1521.8090132193388"
    ]
  },
  {
    "mbpp_id": 732,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')",
    "test_cases": [
      "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
      "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
      "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
    ]
  },
  {
    "mbpp_id": 733,
    "problem_statement": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_occurrence(sorted_array, target):\n    left, right = 0, len(sorted_array) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if sorted_array[mid] < target:\n            left = mid + 1\n        elif sorted_array[mid] > target:\n            right = mid - 1\n        else:\n            # If mid is not the first occurrence and the previous element is also equal to target,\n            # move the end pointer one step back.\n            if mid > 0 and sorted_array[mid - 1] == target:\n                right = mid - 1\n            else:\n                return mid\n    return -1  # Return -1 if the target is not found in the array.",
    "test_cases": [
      "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
      "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
      "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
    ]
  },
  {
    "mbpp_id": 734,
    "problem_statement": "Write a python function to find sum of products of all possible subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Subarray_Prod' is not defined",
      "Test 2: FAIL - name 'sum_Of_Subarray_Prod' is not defined",
      "Test 3: FAIL - name 'sum_Of_Subarray_Prod' is not defined"
    ],
    "generated_code": "from itertools import combinations_with_replacement\n\ndef sum_of_subarray_prods(arr, n):\n    \"\"\"\n    Calculate the sum of products of all possible subarrays of an array.\n    \n    Parameters:\n    arr (List[int]): The input array of integers.\n    n (int): The length of each subarray for which the product is calculated.\n    \n    Returns:\n    int: The sum of products of all possible subarrays with length 'n'.\n    \"\"\"\n    # Generate all unique pairs in the array based on their relative order\n    ordered_pairs = [(arr[i], arr[j]) for i, j in combinations_with_replacement(range(len(arr)), 2)]\n    \n    total_sum = 0\n    \n    # Iterate through each pair and calculate its product if it has length 'n'\n    for pair in ordered_pairs:\n        prod = 1\n        for item in range(0, len(pair), 2):\n            prod *= pair[item] * pair[item + 1]\n        \n        if len(pair) == n:\n            total_sum += prod\n            \n    return total_sum\n\n# Test cases\nprint(sum_of_subarray_prods([1,2,3],3))  # Expected output: 20\nprint(sum_of_subarray_prods([1,2],2))    # Expected output: 5\nprint(sum_of_subarray_prods([1,2,3,4],4))# Expected output: 84",
    "test_cases": [
      "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
      "assert sum_Of_Subarray_Prod([1,2],2) == 5",
      "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
    ]
  },
  {
    "mbpp_id": 735,
    "problem_statement": "Write a python function to toggle bits of the number except the first and the last bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_middle_bits(n):\n    \"\"\"\n    This function takes an integer n as input and returns a new integer with all middle bits toggled.\n    The first and last bits remain unchanged.\n    \n    Example:\n    >>> toggle_middle_bits(9)\n    15\n    >>> toggle_middle_bits(10)\n    12\n    >>> toggle_middle_bits(11)\n    13\n    \"\"\"\n    mask = ~(1 << 0) | ~((1 << (len(bin(n)[2:]) - 3)) - 1) # Create a bitmask for all but the first and last bits\n    return n ^ mask\n\n# Check function with provided data points\nprint(toggle_middle_bits(9))  # Expected output: 15\nprint(toggle_middle_bits(10)) # Expected output: 12\nprint(toggle_middle_bits(11)) # Expected output: 13",
    "test_cases": [
      "assert toggle_middle_bits(9) == 15",
      "assert toggle_middle_bits(10) == 12",
      "assert toggle_middle_bits(11) == 13"
    ]
  },
  {
    "mbpp_id": 736,
    "problem_statement": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_insertion(lst, target):\n    \"\"\"\n    Finds the index where 'target' should be inserted to maintain the sorted order of 'lst'.\n    \n    Parameters:\n        lst (List[int]): The list of integers which is assumed to be already sorted.\n        target (int): The integer to find the insertion position for.\n        \n    Returns:\n        int: The index at which 'target' should be inserted.\n    \"\"\"\n    low, high = 0, len(lst) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if lst[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return low",
    "test_cases": [
      "assert left_insertion([1,2,4,5],6)==4",
      "assert left_insertion([1,2,4,5],3)==2",
      "assert left_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 737,
    "problem_statement": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_str(input_str):\n    \"\"\"\n    This function checks if the given string starts with a vowel and returns \"Valid\" or \"Invalid\".\n    \n    Args:\n        input_str (str): The string to be checked.\n        \n    Returns:\n        str: 'Valid' if the string starts with a vowel, otherwise 'Invalid'.\n    \"\"\"\n    # Regular expression to match strings starting with a vowel\n    pattern = r'^[aeiouAEIOU]'\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, input_str):\n        return 'Valid'\n    else:\n        return 'Invalid'\n\n# Test cases\nprint(check_str(\"annie\"))   # Expected output: Valid\nprint(check_str(\"dawood\"))  # Expected output: Invalid\nprint(check_str(\"Else\"))    # Expected output: Valid",
    "test_cases": [
      "assert check_str(\"annie\") == 'Valid'",
      "assert check_str(\"dawood\") == 'Invalid'",
      "assert check_str(\"Else\") == 'Valid'"
    ]
  },
  {
    "mbpp_id": 738,
    "problem_statement": "Write a function to calculate the geometric sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def geometric_sum(n):\n    total = 0\n    for i in range(n + 1):\n        total += (1/((i+1)**n))\n    return total",
    "test_cases": [
      "assert geometric_sum(7) == 1.9921875",
      "assert geometric_sum(4) == 1.9375",
      "assert geometric_sum(8) == 1.99609375"
    ]
  },
  {
    "mbpp_id": 739,
    "problem_statement": "Write a python function to find the index of smallest triangular number with n digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_Index' is not defined",
      "Test 2: FAIL - name 'find_Index' is not defined",
      "Test 3: FAIL - name 'find_Index' is not defined"
    ],
    "generated_code": "import math\n\ndef find_index(n):\n    \"\"\"\n    Finds the index i such that the ith triangular number has exactly n digits.\n    \n    Parameters:\n    - n (int): The exact number of digits the target triangular number must have.\n    \n    Returns:\n    int: The index of the smallest triangular number with exactly n digits.\n    \"\"\"\n    def is_valid(i, digit_count):\n        # Calculate the value of the i-th triangular number\n        tri_num = i * (i + 1) // 2\n        # Convert to string and check length against digit count\n        return len(str(tri_num)) == digit_count\n    \n    low, high = 0, 10**n-1  # Bounds for binary search\n    while low < high:\n        mid = (low + high) // 2\n        if is_valid(mid, n):\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n# Test Cases\nprint(find_index(2))  # Expected output: 4\nprint(find_index(3))  # Expected output: 14\nprint(find_index(4))  # Expected output: 45",
    "test_cases": [
      "assert find_Index(2) == 4",
      "assert find_Index(3) == 14",
      "assert find_Index(4) == 45"
    ]
  },
  {
    "mbpp_id": 740,
    "problem_statement": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_dict(tup):\n    \"\"\"\n    Converts a tuple into a dictionary with keys being consecutive integers starting from 1,\n    and values being the corresponding elements of the input tuple.\n    \n    Args:\n    tup (tuple): A tuple containing integer elements.\n    \n    Returns:\n    dict: A dictionary with keys as integers starting from 1 and values as the elements from the input tuple.\n    \"\"\"\n    # Ensure the tuple has at least two elements for the loop to work\n    if len(tup) < 2:\n        raise ValueError(\"Tuple must have at least two elements.\")\n        \n    result = {}\n    for i in range(1, len(tup)+1):\n        result[i] = tup[i-1]\n    return result",
    "test_cases": [
      "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
      "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
      "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
    ]
  },
  {
    "mbpp_id": 741,
    "problem_statement": "Write a python function to check whether all the characters are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Characters_Same(input_string):\n    # Check if the string is empty or has one character, which is always \"same\"\n    if len(input_string) <= 1:\n        return True\n    \n    first_char = input_string[0]\n    \n    for char in input_string[1:]:\n        if char != first_char:\n            return False\n    \n    return True",
    "test_cases": [
      "assert all_Characters_Same(\"python\") == False",
      "assert all_Characters_Same(\"aaa\") == True",
      "assert all_Characters_Same(\"data\") == False"
    ]
  },
  {
    "mbpp_id": 742,
    "problem_statement": "Write a function to caluclate the area of a tetrahedron.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the tetrahedron.\n    \n    Returns:\n    float: The total surface area of the tetrahedron.\n    \"\"\"\n    # The formula for the surface area of a regular tetrahedron is sqrt(3) * a^2,\n    # where 'a' is the length of a side.\n    return math.sqrt(3) * pow(side_length, 2)",
    "test_cases": [
      "assert area_tetrahedron(3)==15.588457268119894",
      "assert area_tetrahedron(20)==692.8203230275509",
      "assert area_tetrahedron(10)==173.20508075688772"
    ]
  },
  {
    "mbpp_id": 743,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the right direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_right(lst, n, k):\n    return lst[-k:] + lst[:-k]\n\n# Test cases\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # [8, 9, 10, 1, 2, 3, 4, 5, 6]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)) # [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)) # [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
    "test_cases": [
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
    ]
  },
  {
    "mbpp_id": 744,
    "problem_statement": "Write a function to check if the given tuple has any none value or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_none(tup):\n    # Check each element in the tuple\n    for i in tup:\n        # If an element is None, return True\n        if i is None:\n            return True\n    # If no None values found, return False\n    return False",
    "test_cases": [
      "assert check_none((10, 4, 5, 6, None)) == True",
      "assert check_none((7, 8, 9, 11, 14)) == False",
      "assert check_none((1, 2, 3, 4, None)) == True"
    ]
  },
  {
    "mbpp_id": 745,
    "problem_statement": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'j' is not defined"
    ],
    "generated_code": "def divisible_by_digits(start, end):\n    return [i for i in range(start, end + 1) if all(j != i and not(i % j == 0))]\n\n# Test cases\nprint(divisible_by_digits(1,22)) # Expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nprint(divisible_by_digits(1,15)) # Expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nprint(divisible_by_digits(20,25)) # Expected output: [22, 24]",
    "test_cases": [
      "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
      "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
      "assert divisible_by_digits(20,25)==[22, 24]"
    ]
  },
  {
    "mbpp_id": 746,
    "problem_statement": "Write a function to find area of a sector.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sector_area(radius, angle_in_degrees):\n    if angle_in_degrees == 360:\n        return None\n    else:\n        area = (angle_in_degrees / 360) * math.pi * radius ** 2\n        return round(area, 10)",
    "test_cases": [
      "assert sector_area(4,45)==6.285714285714286",
      "assert sector_area(9,45)==31.82142857142857",
      "assert sector_area(9,360)==None"
    ]
  },
  {
    "mbpp_id": 747,
    "problem_statement": "Write a function to find the longest common subsequence for the given three string sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: string index out of range"
    ],
    "generated_code": "def lcs_of_three(x, y, z, m, n, k):\n    if x[m-1] == y[n-1] and y[n-1] == z[k-1]:\n        return 1 + lcs_of_three(x, y, z, m - 1, n - 1, k - 1)\n    else:\n        return max(lcs_of_three(x, y, z, m - 1, n, k), lcs_of_three(x, y, z, m, n - 1, k),\n                   lcs_of_three(x, y, z, m, n, k - 1))\n\n# Test cases\nprint(lcs_of_three(\"AGGT12\", \"12TXAYB\", \"12XBA\", 6, 7, 5)) # Output: 2\nprint(lcs_of_three(\"Reels\", \"Reelsfor\", \"ReelsforReels\", 5, 8, 13)) # Output: 5\nprint(lcs_of_three(\"abcd1e2\", \"bc12ea\", \"bd1ea\", 7, 6, 5)) # Output: 3",
    "test_cases": [
      "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
      "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
      "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
    ]
  },
  {
    "mbpp_id": 748,
    "problem_statement": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - re.error: invalid group reference 1 at position 2"
    ],
    "generated_code": "import re\n\ndef capital_words_spaces(input_string):\n    # Use regex to find all words starting with a capital letter and insert a space before each word.\n    return re.sub(r'\\b[A-Z][^A-Z]*', r' \\1', input_string).strip()\n\n# Test cases\nprint(capital_words_spaces(\"Python\"))   # Output: \"Python\"\nprint(capital_words_spaces(\"PythonProgrammingExamples\"))  # Output: \"Python Programming Examples\"\nprint(capital_words_spaces(\"GetReadyToBeCodingFreak\"))  # Output: \"Get Ready To Be Coding Freak\"",
    "test_cases": [
      "assert capital_words_spaces(\"Python\") == 'Python'",
      "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
      "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
    ]
  },
  {
    "mbpp_id": 749,
    "problem_statement": "Write a function to sort a given list of strings of numbers numerically.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_cases": [
      "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
      "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
      "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
    ]
  },
  {
    "mbpp_id": 750,
    "problem_statement": "Write a function to add the given tuple to the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_tuple(list1, tpl):\n    for i in tpl:\n        list1.append(i)\n    return list1",
    "test_cases": [
      "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
      "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
      "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
    ]
  },
  {
    "mbpp_id": 751,
    "problem_statement": "Write a function to check if the given array represents min heap or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if n == 0:\n        return False\n    for j in range(i * 2 + 1, min(n, i * 2 + 3)):\n        if arr[j] > arr[i]:\n            return False\n        if j < n - 1 and arr[j] > arr[j + 1]:\n            return False\n    return True",
    "test_cases": [
      "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
      "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
      "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
    ]
  },
  {
    "mbpp_id": 752,
    "problem_statement": "Write a function to find the nth jacobsthal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)",
    "test_cases": [
      "assert jacobsthal_num(5) == 11",
      "assert jacobsthal_num(2) == 1",
      "assert jacobsthal_num(4) == 5"
    ]
  },
  {
    "mbpp_id": 753,
    "problem_statement": "Write a function to find minimum k records from tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_k(lst, k):\n    # Sort the list based on the second element of each tuple in ascending order.\n    lst.sort(key=lambda x: x[1])\n    \n    # Return the first 'k' elements from the sorted list.\n    return lst[:k]",
    "test_cases": [
      "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
      "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
      "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
    ]
  },
  {
    "mbpp_id": 754,
    "problem_statement": "Write a function to find common index elements from three lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_index_list(list1, list2, list3):\n    # Find unique indices where all three lists have the same element\n    return [index for index in range(min(len(list1), len(list2), len(list3))) if list1[index] == list2[index] and list2[index] == list3[index]]\n\n# Test cases\nprint(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))  # Output should be [1, 7]\nprint(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))  # Output should be [1, 6]\nprint(extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))  # Output should be [1, 5]",
    "test_cases": [
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
      "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
    ]
  },
  {
    "mbpp_id": 755,
    "problem_statement": "Write a function to find the second smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def second_smallest(nums):\n    \"\"\"\n    Find and return the second smallest element in a given list of numbers.\n    \n    Args:\n    nums (list): A list of integers or floats\n    \n    Returns:\n    float/int: The second smallest unique element from the list, None if less than two distinct elements exist.\n    \"\"\"\n    unique_nums = set(nums)  # Remove duplicates\n    if len(unique_nums) < 2:\n        return None\n    sorted_nums = sorted(list(unique_nums))\n    return sorted_nums[1]\n\n# Test cases\nprint(second_smallest([1, 2, -8, -2, 0, -2]))  # Output: -2\nprint(second_smallest([1, 1, -0.5, 0, 2, -2, -2]))  # Output: -0.5\nprint(second_smallest([2, 2]))  # Output: None",
    "test_cases": [
      "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
      "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
      "assert second_smallest([2,2])==None"
    ]
  },
  {
    "mbpp_id": 756,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or one 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_zero_one(text):\n    # Check if the first character is 'a' and optionally followed by 'b'\n    return 'Found a match!' if text.startswith('a') and (text.count('b', 0, 1) == 0 or text.count('b', 0, 1) == 1) else 'Not matched!'",
    "test_cases": [
      "assert text_match_zero_one(\"ac\")==('Found a match!')",
      "assert text_match_zero_one(\"dc\")==('Not matched!')",
      "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 757,
    "problem_statement": "Write a function to count the pairs of reverse strings in the given string list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_reverse_pairs(str_list):\n    count = 0\n    for i in range(len(str_list)):\n        if str_list[i] == str_list[i][::-1]:\n            count += 1\n    return count\n\n# Test cases\nprint(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])) # Output: 2\nprint(count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"])) # Output: 1\nprint(count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])) # Output: 2",
    "test_cases": [
      "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
      "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
      "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
    ]
  },
  {
    "mbpp_id": 758,
    "problem_statement": "Write a function to count number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_sublists(lists):\n    from collections import defaultdict\n    \n    # Dictionary to store unique sublists and their counts\n    result = defaultdict(int)\n    \n    for sublist in lists:\n        # Convert tuple to string representation for easy comparison\n        key_str = str(sublist)\n        result[key_str] += 1\n    \n    return dict(result)",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
    ]
  },
  {
    "mbpp_id": 759,
    "problem_statement": "Write a function to check a decimal with a precision of 2.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(num_str):\n    \"\"\"\n    Check if the given string represents a valid decimal number with exactly two digits after the decimal point.\n    \n    Parameters:\n    num_str (str): The string to be checked.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    # Regular expression to match a decimal with exactly two digits after the decimal point\n    pattern = r'^\\d+(\\.\\d{2})?$'\n    return bool(re.match(pattern, num_str))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('e666.86'))  # Expected output: False\nprint(is_decimal('3.124587'))  # Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11')==True",
      "assert is_decimal('e666.86')==False",
      "assert is_decimal('3.124587')==False"
    ]
  },
  {
    "mbpp_id": 760,
    "problem_statement": "Write a python function to check whether an array contains only one distinct element or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_Element(arr, n):\n    # Initialize count of each unique element in the array\n    count = {}\n    \n    for i in range(n):\n        if arr[i] in count:\n            return 'NO'  # If an element is found more than once, it's not unique\n        else:\n            count[arr[i]] = 1\n    \n    return 'YES'  # If all elements appear exactly once, it's unique",
    "test_cases": [
      "assert unique_Element([1,1,1],3) == 'YES'",
      "assert unique_Element([1,2,1,2],4) == 'NO'",
      "assert unique_Element([1,2,3,4,5],5) == 'NO'"
    ]
  },
  {
    "mbpp_id": 761,
    "problem_statement": "Write a function to caluclate arc length of an angle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef arc_length(angle, radius):\n    # Calculate and return the arc length of the given angle with respect to the specified radius.\n    try:\n        arc = (angle / 360) * 2 * math.pi * radius\n        if arc == float('inf'):\n            raise ValueError(\"The input values do not represent a valid circle.\")\n        return arc\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n# Test cases\nprint(arc_length(9, 45))   # Expected output: 3.5357142857142856\nprint(arc_length(9, 480))  # Expected output: None\nprint(arc_length(5, 270))  # Expected output: 11.785714285714285",
    "test_cases": [
      "assert arc_length(9,45)==3.5357142857142856",
      "assert arc_length(9,480)==None",
      "assert arc_length(5,270)==11.785714285714285"
    ]
  },
  {
    "mbpp_id": 762,
    "problem_statement": "Write a function to check whether the given month number contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber_number(month_number):\n    # Define an array of months with their respective number of days\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the provided month is valid and it has 30 days\n    return month_number in range(1, 13) and month_days[month_number - 1] == 30",
    "test_cases": [
      "assert check_monthnumber_number(6)==True",
      "assert check_monthnumber_number(2)==False",
      "assert check_monthnumber_number(12)==False"
    ]
  },
  {
    "mbpp_id": 763,
    "problem_statement": "Write a python function to find the minimum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def find_Min_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(len(arr) - 1):\n        if abs(arr[i] - arr[i + 1]) < min_diff:\n            min_diff = abs(arr[i] - arr[i + 1])\n    \n    return min_diff",
    "test_cases": [
      "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
      "assert find_Min_Diff((4,3,2,6),4) == 1",
      "assert find_Min_Diff((30,5,20,9),4) == 4"
    ]
  },
  {
    "mbpp_id": 764,
    "problem_statement": "Write a python function to count numeric values in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_ctr(s):\n    count = sum(c.isdigit() for c in s)\n    return count",
    "test_cases": [
      "assert number_ctr('program2bedone') == 1",
      "assert number_ctr('3wonders') ==1",
      "assert number_ctr('123') == 3"
    ]
  },
  {
    "mbpp_id": 765,
    "problem_statement": "Write a function to find nth polite number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_polite(nth_number):\n    count = 0\n    num = 1\n    \n    while True:\n        if len(str(num)) % 2 == 0:\n            count += 1\n            if count == nth_number:\n                return num\n        num += 1",
    "test_cases": [
      "assert is_polite(7) == 11",
      "assert is_polite(4) == 7",
      "assert is_polite(9) == 13"
    ]
  },
  {
    "mbpp_id": 766,
    "problem_statement": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i + 1]))\n    return result",
    "test_cases": [
      "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
      "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
      "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
    ]
  },
  {
    "mbpp_id": 767,
    "problem_statement": "Write a python function to count the number of pairs whose sum is equal to ‘sum’.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Pairs_Count(arr, target_sum, num_pairs):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return count",
    "test_cases": [
      "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
      "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
      "assert get_Pairs_Count([1,-2,3],3,1) == 1"
    ]
  },
  {
    "mbpp_id": 768,
    "problem_statement": "Write a python function to check for odd parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Odd_Parity(num):\n    # Convert the number to binary string and count the '1's\n    bin_num = bin(num)[2:]  # [2:] removes the '0b' prefix from the binary representation\n    one_count = bin_num.count('1')\n    \n    # Check if there is exactly one '1' in the binary representation\n    return one_count == 1",
    "test_cases": [
      "assert check_Odd_Parity(13) == True",
      "assert check_Odd_Parity(21) == True",
      "assert check_Odd_Parity(18) == False"
    ]
  },
  {
    "mbpp_id": 769,
    "problem_statement": "Write a python function to get the difference between two lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Diff' is not defined",
      "Test 2: FAIL - name 'Diff' is not defined",
      "Test 3: FAIL - name 'Diff' is not defined"
    ],
    "generated_code": "def diff_list(list1, list2):\n    # Use set operations to find elements unique to each list\n    unique_to_first = set(list1) - set(list2)\n    unique_to_second = set(list2) - set(list1)\n    \n    # Combine the results into a single list\n    result = sorted(unique_to_first | unique_to_second)\n    return result",
    "test_cases": [
      "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
      "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
      "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
    ]
  },
  {
    "mbpp_id": 770,
    "problem_statement": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Calculate the fourth power and add it to the sum\n        sum += i**4\n    \n    # Return the total sum\n    return sum",
    "test_cases": [
      "assert odd_Num_Sum(2) == 82",
      "assert odd_Num_Sum(3) == 707",
      "assert odd_Num_Sum(4) == 3108"
    ]
  },
  {
    "mbpp_id": 771,
    "problem_statement": "Write a function to check if the given expression is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unmatched ')'"
    ],
    "generated_code": "def check_expression(expression):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if stack == [] or stack.pop() != bracket_map[char]:\n                return False\n    \n    return stack == []\n\n# Test cases\nprint(check_expression(\"{()}[{}]\"))  # Expected output: True\nprint(check_expression(\"{()}[{]\")))  # Expected output: False\nprint(check_expression(\"{()}[{}][]({}))\"))  # Expected output: True",
    "test_cases": [
      "assert check_expression(\"{()}[{}]\") == True",
      "assert check_expression(\"{()}[{]\") == False",
      "assert check_expression(\"{()}[{}][]({})\") == True"
    ]
  },
  {
    "mbpp_id": 772,
    "problem_statement": "Write a function to remove all the words with k length in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_length(s, k):\n    # Splitting the string into words and filtering out those of length k\n    return ' '.join(word for word in s.split() if len(word) != k)\n\n# Test cases\nprint(remove_length('The person is most value tet', 3))  # Expected output: 'person is most value'\nprint(remove_length('If you told me about this ok', 4))   # Expected output: 'If you me about ok'\nprint(remove_length('Forces of darkeness is come into the play', 4))  # Expected output: 'Forces of darkeness is the'",
    "test_cases": [
      "assert remove_length('The person is most value tet', 3) == 'person is most value'",
      "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
      "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
    ]
  },
  {
    "mbpp_id": 773,
    "problem_statement": "Write a function to find the occurrence and position of the substrings within a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def occurance_substring(main_str, search_str):\n    index = main_str.find(search_str)\n    while index != -1:\n        yield search_str, index, index + len(search_str) - 1\n        index = main_str.find(search_str, index + 1)\n\n# Test Cases\nprint(list(occurance_substring('python programming, python language', 'python')))\nprint(list(occurance_substring('python programming,programming language', 'programming')))\nprint(list(occurance_substring('python programming,programming language', 'language')))",
    "test_cases": [
      "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
      "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
      "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
    ]
  },
  {
    "mbpp_id": 774,
    "problem_statement": "Write a function to check if the string is a valid email address or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_email(email):\n    # Regular expression for validating an Email\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    \n    # Compile the ReGex\n    pattern = re.compile(regex)\n    \n    # If the string is empty\n    if email == \"\":\n        return \"Invalid Email\"\n    \n    # Matching the regex to the email\n    if(pattern.match(email)):\n        return \"Valid Email\"\n    else:\n        return \"Invalid Email\"\n\n# Test Cases\nprint(check_email(\"ankitrai326@gmail.com\")) # Expected output: Valid Email\nprint(check_email(\"my.ownsite@ourearth.org\")) # Expected output: Valid Email\nprint(check_email(\"ankitaoie326.com\")) # Expected output: Invalid Email",
    "test_cases": [
      "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
      "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
      "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
    ]
  },
  {
    "mbpp_id": 775,
    "problem_statement": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'odd_position' is not defined",
      "Test 2: FAIL - name 'odd_position' is not defined",
      "Test 3: FAIL - name 'odd_position' is not defined"
    ],
    "generated_code": "def is_odd_index_odd_numbers(nums):\n    for i in range(1, len(nums), 2):  # Start from index 1 and step by 2\n        if nums[i] % 2 == 0:\n            return False\n    return True",
    "test_cases": [
      "assert odd_position([2,1,4,3,6,7,6,3]) == True",
      "assert odd_position([4,1,2]) == True",
      "assert odd_position([1,2,3]) == False"
    ]
  },
  {
    "mbpp_id": 776,
    "problem_statement": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i > 0 and s[i-1] in vowels:\n                count += 1\n            if i < len(s) - 1 and s[i+1] in vowels:\n                count += 1\n    return count",
    "test_cases": [
      "assert count_vowels('bestinstareels') == 7",
      "assert count_vowels('partofthejourneyistheend') == 12",
      "assert count_vowels('amazonprime') == 5"
    ]
  },
  {
    "mbpp_id": 777,
    "problem_statement": "Write a python function to find the sum of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'suf_sum' is not defined",
      "Test 2: FAIL - name 'suf_sum' is not defined",
      "Test 3: FAIL - name 'suf_sum' is not defined"
    ],
    "generated_code": "def find_Sum(arr, n):\n    # Initialize variables for prefix and suffix sums\n    pre_sum = [0] * (n + 1)\n    suff_sum = [0] * (n + 1)\n    \n    # Calculate prefix sums\n    for i in range(1, n+1):\n        pre_sum[i] = pre_sum[i-1] + arr[i-1]\n    \n    # Calculate suffix sums\n    suf_sum[n] = 0\n    for i in range(n-1, -1, -1):\n        suff_sum[i] = suff_sum[i+1] + arr[i]\n    \n    # Find the sum of non-repeated elements\n    result = 0\n    for i in range(1, n):\n        if pre_sum[i-1] != suff_sum[i]:\n            result += arr[i]\n    \n    return result",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
      "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
      "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
    ]
  },
  {
    "mbpp_id": 778,
    "problem_statement": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pack_consecutive_duplicates(lst):\n    result = []\n    count = 1\n    prev_item = None\n    \n    for item in lst:\n        if item != prev_item:\n            if count > 1:\n                result.append([prev_item] * count)\n            else:\n                result.append([item])\n            prev_item = item\n            count = 1\n        else:\n            count += 1\n            \n    # Append last group if exists\n    if count > 1:\n        result.append([prev_item] * count)\n    \n    return result",
    "test_cases": [
      "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
      "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
      "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
    ]
  },
  {
    "mbpp_id": 779,
    "problem_statement": "Write a function to count the number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_sublists(lst):\n    return {(tuple(sublist) if isinstance(sublist, list) else sublist): lst.count(tuple(sublist)) for sublist in lst}\n\n# Test cases\nprint(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\nprint(unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]))\nprint(unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]]))",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
    ]
  },
  {
    "mbpp_id": 780,
    "problem_statement": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_combinations(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            temp_sum_1 = sum(tuples_list[i])\n            temp_sum_2 = sum(tuples_list[j])\n            result.append((temp_sum_1, temp_sum_2))\n            if temp_sum_1 != temp_sum_2:\n                result.append((temp_sum_2, temp_sum_1))\n    return sorted(result)\n\n# Test Cases\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])) # Expected output: [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nprint(find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])) # Expected output: [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nprint(find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])) # Expected output: [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
    "test_cases": [
      "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
      "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
      "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
    ]
  },
  {
    "mbpp_id": 781,
    "problem_statement": "Write a python function to check whether the count of divisors is even or odd.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Divisors(num):\n    # Initialize count as 0 for number greater than 1 and 1 if num = 1\n    count = 0\n    \n    # Check divisibility from 1 up to the square root of the number\n    i = 1\n    while i * i <= num:\n        if num % i == 0:\n            # If divisor is same as quotient, increment count by 1 twice\n            if num // i == i:\n                count += 1\n            else:\n                # Increment count for both divisors\n                count += 2\n        i += 1\n    \n    # Return 'Even' if count is even, otherwise return 'Odd'\n    return ['Even', 'Odd'][count % 2 == 0]\n\n# Test cases\nprint(count_Divisors(10))  # Output: Even\nprint(count_Divisors(100)) # Output: Odd\nprint(count_Divisors(125)) # Output: Even",
    "test_cases": [
      "assert count_Divisors(10) == \"Even\"",
      "assert count_Divisors(100) == \"Odd\"",
      "assert count_Divisors(125) == \"Even\""
    ]
  },
  {
    "mbpp_id": 782,
    "problem_statement": "Write a python function to find the sum of all odd length subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef Odd_Length_Sum(nums: List[int]) -> int:\n    total_sum = 0\n    n = len(nums)\n    \n    for i in range(n):\n        # Calculate the number of elements in each odd length subarray starting from index i\n        num_elements = ((i + 1) // 2) * 2 + ((n - i) // 2) * 2\n        \n        # Add twice the product of nums[i] and num_elements to the total sum\n        if (i % 2 == 0):  # If i is even, add twice\n            total_sum += 2 * nums[i] * num_elements\n        else:             # If i is odd, add four times\n            total_sum += 4 * nums[i] * num_elements\n    \n    return total_sum",
    "test_cases": [
      "assert Odd_Length_Sum([1,2,4]) == 14",
      "assert Odd_Length_Sum([1,2,1,2]) == 15",
      "assert Odd_Length_Sum([1,7]) == 8"
    ]
  },
  {
    "mbpp_id": 783,
    "problem_statement": "Write a function to convert rgb color to hsv color.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    r /= 255\n    g /= 255\n    b /= 255\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    diff = max_color - min_color\n    \n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = ((g - b) / diff) * 60\n    elif max_color == g:\n        h = (((b - r) / diff) + 2) * 60\n    else: \n        h = (((r - g) / diff) + 4) * 60\n        \n    if max_color == 0:\n        s = 0\n    else:\n        s = diff / max_color\n    \n    v = max_color\n    \n    return h, s, v",
    "test_cases": [
      "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
      "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
      "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
    ]
  },
  {
    "mbpp_id": 784,
    "problem_statement": "Write a function to find the product of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def mul_even_odd(arr):\n    # Check if the length of the array is even or odd\n    if len(arr) % 2 == 0:\n        return arr[::2][-1] * arr[1::2][0]\n    else:\n        return arr[1::2][::-1][0]\n\n# Test the function with provided data points\nprint(mul_even_odd([1,3,5,7,4,1,6,8]))  # Expected output: 4\nprint(mul_even_odd([1,2,3,4,5,6,7,8,9,10]))  # Expected output: 2\nprint(mul_even_odd([1,5,7,9,10]))  # Expected output: 10",
    "test_cases": [
      "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert mul_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 785,
    "problem_statement": "Write a function to convert tuple string to integer tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: '(7'"
    ],
    "generated_code": "def tuple_str_int(tuple_str):\n    # Split the string by comma and convert each element to an integer\n    return tuple(int(x) for x in tuple_str.split(\", \"))\n\n# Test cases\nprint(tuple_str_int(\"(7, 8, 9)\"))  # Expected output: (7, 8, 9)\nprint(tuple_str_int(\"(1, 2, 3)\"))  # Expected output: (1, 2, 3)\nprint(tuple_str_int(\"(4, 5, 6)\"))  # Expected output: (4, 5, 6)",
    "test_cases": [
      "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
      "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
      "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
    ]
  },
  {
    "mbpp_id": 786,
    "problem_statement": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def right_insertion(arr, val):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return low",
    "test_cases": [
      "assert right_insertion([1,2,4,5],6)==4",
      "assert right_insertion([1,2,4,5],3)==2",
      "assert right_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 787,
    "problem_statement": "Write a function that matches a string that has an a followed by three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_three(text):\n    if text.startswith('a') and len(re.findall(r'a{1}b{3}', text)) == 1:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_three(\"ac\")==('Not matched!')",
      "assert text_match_three(\"dc\")==('Not matched!')",
      "assert text_match_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 788,
    "problem_statement": "Write a function to create a new tuple from the given string and list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def new_tuple(items, word):\n    # Splitting the word into individual characters\n    chars = [char for char in word]\n    # Creating a tuple using the split words and characters\n    result_tuple = tuple([item + item_char for item in items for item_char in chars])\n    return result_tuple",
    "test_cases": [
      "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
      "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
      "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
    ]
  },
  {
    "mbpp_id": 789,
    "problem_statement": "Write a function to calculate the perimeter of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_polygon(sides, length):\n    return sides * length",
    "test_cases": [
      "assert perimeter_polygon(4,20)==80",
      "assert perimeter_polygon(10,15)==150",
      "assert perimeter_polygon(9,7)==63"
    ]
  },
  {
    "mbpp_id": 790,
    "problem_statement": "Write a python function to check whether every even index contains even numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'even_position' is not defined",
      "Test 2: FAIL - name 'even_position' is not defined",
      "Test 3: FAIL - name 'even_position' is not defined"
    ],
    "generated_code": "def is_even_positions_even(nums):\n    \"\"\"\n    Check if every element in an array at even indices has an even number.\n    \n    Args:\n    nums : List[int] - A list of integers\n    \n    Returns:\n    bool - True if all elements at even indices have even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):  # Iterate over even indices\n        if nums[i] % 2 != 0:  # If the value at the current index is not even\n            return False\n    return True\n\n# Test cases\nprint(is_even_positions_even([3, 2, 1]))  # Expected output: False\nprint(is_even_positions_even([1, 2, 3]))  # Expected output: False\nprint(is_even_positions_even([2, 1, 4]))  # Expected output: True",
    "test_cases": [
      "assert even_position([3,2,1]) == False",
      "assert even_position([1,2,3]) == False",
      "assert even_position([2,1,4]) == True"
    ]
  },
  {
    "mbpp_id": 791,
    "problem_statement": "Write a function to remove the nested record from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def remove_nested(tup):\n    # Iterate through each element in the tuple\n    for i in range(len(tup)):\n        if isinstance(tup[i], tuple):  # Check if the current element is a tuple\n            tup = tup[:i] + tup[i+1:]  # Remove the inner tuple\n    return tup\n\n# Test cases\nprint(remove_nested((1, 5, 7, (4, 6), 10)))  # Expected output: (1, 5, 7, 10)\nprint(remove_nested((2, 6, 8, (5, 7), 11)))  # Expected output: (2, 6, 8, 11)\nprint(remove_nested((3, 7, 9, (6, 8), 12)))  # Expected output: (3, 7, 9, 12)",
    "test_cases": [
      "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
      "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
      "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
    ]
  },
  {
    "mbpp_id": 792,
    "problem_statement": "Write a python function to count the number of lists in a given number of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_list(lst_of_lsts):\n    # Use len() function on lst_of_lsts to count the total number of lists\n    return len(lst_of_lsts)",
    "test_cases": [
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
      "assert count_list([[1,2],[2,3],[4,5]]) == 3",
      "assert count_list([[1,0],[2,0]]) == 2"
    ]
  },
  {
    "mbpp_id": 793,
    "problem_statement": "Write a python function to find the last position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last(arr, key, n):\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = low + ((high - low) // 2)\n        \n        if arr[mid] == key and (mid == n - 1 or arr[mid + 1] > key):\n            return mid\n        \n        elif arr[mid] < key:\n            low = mid + 1\n            \n        else:\n            high = mid - 1\n            \n    return -1",
    "test_cases": [
      "assert last([1,2,3],1,3) == 0",
      "assert last([1,1,1,2,3,4],1,6) == 2",
      "assert last([2,3,2,3,6,8,9],3,8) == 3"
    ]
  },
  {
    "mbpp_id": 794,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'text_starta_endb' is not defined",
      "Test 2: FAIL - name 'text_starta_endb' is not defined",
      "Test 3: FAIL - name 'text_starta_endb' is not defined"
    ],
    "generated_code": "import re\n\ndef text_matcher(text):\n    pattern = r'a.*?b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_matcher(\"aabbbb\"))  # Expected output: Found a match!\nprint(text_matcher(\"aabAbbbc\"))  # Expected output: Not matched!\nprint(text_matcher(\"accddbbjjj\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
      "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
      "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 795,
    "problem_statement": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef cheap_items(items_list, k):\n    # Convert each item into a tuple with its name and price as elements for sorting\n    items_with_price = [(item['name'], item['price']) for item in items_list]\n    \n    # Sort the list of tuples based on price in ascending order\n    sorted_items = sorted(items_with_price)\n    \n    # Use a min-heap to get the first k cheapest items\n    top_k_cheapest = heapq.nsmallest(k, sorted_items, key=lambda x: x[1])\n    \n    return [{'name': item_name, 'price': item_price} for item_name, item_price in top_k_cheapest]\n\n# Test Cases\nprint(cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1))\nprint(cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2))\nprint(cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1))",
    "test_cases": [
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
    ]
  },
  {
    "mbpp_id": 796,
    "problem_statement": "Write function to find the sum of all items in the given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def return_sum(input_dict):\n    # Calculate the total sum of values in the dictionary\n    total = sum(input_dict.values())\n    return total",
    "test_cases": [
      "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
      "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
      "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
    ]
  },
  {
    "mbpp_id": 797,
    "problem_statement": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_in_Range(l, r):\n    # Calculate the sum using arithmetic series formula for odd numbers in given range\n    return ((r + 1) * ((l + 1) % 2 == 0) - l // 2)\n\n# Test cases\nprint(sum_in_Range(2,5))   # Expected output: 8\nprint(sum_in_Range(5,7))   # Expected output: 12\nprint(sum_in_Range(7,13))  # Expected output: 40",
    "test_cases": [
      "assert sum_in_Range(2,5) == 8",
      "assert sum_in_Range(5,7) == 12",
      "assert sum_in_Range(7,13) == 40"
    ]
  },
  {
    "mbpp_id": 798,
    "problem_statement": "Write a python function to find the sum of an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def _sum(arr):\n    # Calculate the sum of the array elements\n    total_sum = sum(arr)\n    return total_sum",
    "test_cases": [
      "assert _sum([1, 2, 3]) == 6",
      "assert _sum([15, 12, 13, 10]) == 50",
      "assert _sum([0, 1, 2]) == 3"
    ]
  },
  {
    "mbpp_id": 799,
    "problem_statement": "Write a python function to left rotate the bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def left_Rotate(number, positions):\n    # Convert number to binary string and remove '0b' prefix\n    binary_str = bin(number)[2:]\n    \n    # Perform rotation using slicing\n    rotated_str = binary_str[-positions:] + binary_str[:-positions]\n    \n    # Return the result as an integer\n    return int(rotated_str, 2)\n\n# Test cases\nprint(left_Rotate(16, 2))  # Expected output: 64\nprint(left_Rotate(10, 2))  # Expected output: 40\nprint(left_Rotate(99, 3))  # Expected output: 792",
    "test_cases": [
      "assert left_Rotate(16,2) == 64",
      "assert left_Rotate(10,2) == 40",
      "assert left_Rotate(99,3) == 792"
    ]
  },
  {
    "mbpp_id": 800,
    "problem_statement": "Write a function to remove all whitespaces from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_all_spaces(input_string):\n    return ''.join(input_string.split())\n\n# Test cases\nprint(remove_all_spaces('python  program'))  # Expected output: 'pythonprogram'\nprint(remove_all_spaces('python   programming    language'))  # Expected output: 'pythonprogramminglanguage'\nprint(remove_all_spaces('python                     program'))  # Expected output: 'pythonprogram'",
    "test_cases": [
      "assert remove_all_spaces('python  program')==('pythonprogram')",
      "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
      "assert remove_all_spaces('python                     program')==('pythonprogram')"
    ]
  },
  {
    "mbpp_id": 801,
    "problem_statement": "Write a python function to count the number of equal numbers from three given integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of occurrences where x is equal to y and y is equal to z in the same tuple.\n    \n    Args:\n        x (int): First integer value.\n        y (int): Second integer value.\n        z (int): Third integer value.\n        \n    Returns:\n        int: The count of equal values.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Test cases\nprint(test_three_equal(1,1,1)) # Expected output: 3\nprint(test_three_equal(-1,-2,-3)) # Expected output: 0\nprint(test_three_equal(1,2,2)) # Expected output: 2",
    "test_cases": [
      "assert test_three_equal(1,1,1) == 3",
      "assert test_three_equal(-1,-2,-3) == 0",
      "assert test_three_equal(1,2,2) == 2"
    ]
  },
  {
    "mbpp_id": 802,
    "problem_statement": "Write a python function to count the number of rotations required to generate a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Rotation(arr, n):\n    # Initialize left and right pointers\n    i = 0\n    j = n - 1\n    \n    # Find the rotation point\n    while arr[i] > arr[j]:\n        if j == i + 1:\n            break\n        m = (i + j) // 2\n        if arr[m] <= arr[j] and arr[m] <= arr[i]:\n            i = m\n        elif arr[m] >= arr[j]:\n            j = m\n        else:\n            i = m\n            \n    return i",
    "test_cases": [
      "assert count_Rotation([3,2,1],3) == 1",
      "assert count_Rotation([4,5,1,2,3],5) == 2",
      "assert count_Rotation([7,8,9,1,2,3],6) == 3"
    ]
  },
  {
    "mbpp_id": 803,
    "problem_statement": "Write a python function to check whether the given number is a perfect square or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_Perfect_Square(n):\n    \"\"\"\n    Check if the given integer n is a perfect square.\n    \n    Args:\n    n (int): The integer to check.\n    \n    Returns:\n    bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    root = math.sqrt(n)\n    return int(root + 0.5)**2 == n",
    "test_cases": [
      "assert is_Perfect_Square(10) == False",
      "assert is_Perfect_Square(36) == True",
      "assert is_Perfect_Square(14) == False"
    ]
  },
  {
    "mbpp_id": 804,
    "problem_statement": "Write a python function to check whether the product of numbers is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Product_Even(numbers_list, divisor):\n    \"\"\"\n    This function checks if the product of all elements in a list is divisible by a given number.\n    \n    Parameters:\n    - numbers_list: List[int] -- A list of integers whose product's divisibility is to be checked.\n    - divisor: int -- The number to check against the product for divisibility.\n    \n    Returns:\n    bool -- True if the product of all elements in the list is divisible by the given number; otherwise, False.\n    \"\"\"\n    product = 1\n    for num in numbers_list:\n        product *= num\n    \n    # Check if the product modulo the divisor equals zero\n    return product % divisor == 0\n\n# Test Cases\nassert is_Product_Even([1,2,3], 3) == True\nassert is_Product_Even([1,2,1,4], 4) == True\nassert is_Product_Even([1,1], 2) == False\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_Product_Even([1,2,3],3) == True",
      "assert is_Product_Even([1,2,1,4],4) == True",
      "assert is_Product_Even([1,1],2) == False"
    ]
  },
  {
    "mbpp_id": 805,
    "problem_statement": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_sum_list(list_of_lists):\n    # Calculate the total sum for each sub-list and return the one with the maximum sum.\n    return [sum(sublist) for sublist in list_of_lists][max([sum(sublist) for sublist in list_of_lists])]",
    "test_cases": [
      "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
      "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
      "assert max_sum_list([[2,3,1]])==[2,3,1] "
    ]
  },
  {
    "mbpp_id": 806,
    "problem_statement": "Write a function to find maximum run of uppercase characters in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_run_uppercase(s):\n    count = 1\n    max_count = 0\n    for i in range(1, len(s)):\n        if s[i] >= s[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\n# Test cases\nprint(max_run_uppercase('GeMKSForGERksISBESt'))  # Expected output: 5\nprint(max_run_uppercase('PrECIOusMOVemENTSYT'))  # Expected output: 6\nprint(max_run_uppercase('GooGLEFluTTER'))       # Expected output: 4",
    "test_cases": [
      "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
      "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
      "assert max_run_uppercase('GooGLEFluTTER') == 4"
    ]
  },
  {
    "mbpp_id": 807,
    "problem_statement": "Write a python function to find the first odd number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_odd([1,3,5]) == 1",
      "assert first_odd([2,4,1,3]) == 1",
      "assert first_odd ([8,9,1]) == 9"
    ]
  },
  {
    "mbpp_id": 808,
    "problem_statement": "Write a function to check if the given tuples contain the k or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_K(tup, num):\n    # Check if 'num' is in the tuple 'tup'\n    return num in tup",
    "test_cases": [
      "assert check_K((10, 4, 5, 6, 8), 6) == True",
      "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
      "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
    ]
  },
  {
    "mbpp_id": 809,
    "problem_statement": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_smaller(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] >= tup2[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_smaller((1, 2, 3), (2, 3, 4)))  # Expected output: False\nprint(check_smaller((4, 5, 6), (3, 4, 5)))  # Expected output: True\nprint(check_smaller((11, 12, 13), (10, 11, 12)))  # Expected output: True",
    "test_cases": [
      "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
      "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
      "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
    ]
  },
  {
    "mbpp_id": 810,
    "problem_statement": "Write a function to iterate over elements repeating each as many times as its count.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef count_variable(a: int, b: int, c: int, d: int) -> List[str]:\n    result = []\n    for i in range(d+1):\n        if i <= min(a,b,c,d):  \n            result.append('a')\n        elif i <= min(b,c,d):  \n            result.append('b')\n        elif i <= min(c,d):   \n            result.append('c')\n        else:\n            result.append('d')\n    return result[:d]\n\n# Test cases\nprint(count_variable(4,2,0,-2))  # ['p', 'p', 'p', 'p', 'q', 'q']\nprint(count_variable(0,1,2,3))   # ['q', 'r', 'r', 's', 's', 's']\nprint(count_variable(11,15,12,23))  # ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
    "test_cases": [
      "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
      "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
      "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
    ]
  },
  {
    "mbpp_id": 811,
    "problem_statement": "Write a function to check if two lists of tuples are identical or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_identical(list1, list2):\n    # Check if both lists have the same number of elements and corresponding elements are equal\n    return len(list1) == len(list2) and all(x == y for x, y in zip(list1, list2))\n\n# Test cases\nprint(check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]))  # Expected output: True\nprint(check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]))  # Expected output: False\nprint(check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]))  # Expected output: True",
    "test_cases": [
      "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
      "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
      "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
    ]
  },
  {
    "mbpp_id": 812,
    "problem_statement": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def road_rd(s):\n    return s.replace(\"Road\", \"Rd.\")",
    "test_cases": [
      "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
      "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
      "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
    ]
  },
  {
    "mbpp_id": 813,
    "problem_statement": "Write a function to find length of the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_length(s):\n    return len(s)",
    "test_cases": [
      "assert string_length('python')==6",
      "assert string_length('program')==7",
      "assert string_length('language')==8"
    ]
  },
  {
    "mbpp_id": 814,
    "problem_statement": "Write a function to find the area of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_area(diagonal_a, diagonal_b):\n    return (diagonal_a * diagonal_b) / 2",
    "test_cases": [
      "assert rombus_area(10,20)==100",
      "assert rombus_area(10,5)==25",
      "assert rombus_area(4,2)==4"
    ]
  },
  {
    "mbpp_id": 815,
    "problem_statement": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def sort_by_dnf(arr):\n    count_0 = arr.count(0)\n    count_1 = arr.count(1)\n    count_2 = len(arr) - count_0 - count_1\n    result = [0] * count_0 + [1] * count_1 + [2] * count_2\n    for i in range(len(result)):\n        arr[i] = result[i]\n    return arr\n\n# Test cases\nprint(sort_by_dnf([1,2,0,1,0,1,2,1,1]))  # Output: [0, 0, 1, 1, 1, 1, 1, 2, 2]\nprint(sort_by_dnf([1,0,0,1,2,1,2,2,1,0]))  # Output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nprint(sort_by_dnf([2,2,1,0,0,0,1,1,2,1]))  # Output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
    "test_cases": [
      "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
      "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
      "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
    ]
  },
  {
    "mbpp_id": 816,
    "problem_statement": "Write a function to clear the values of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def clear_tuple(tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple with all elements removed.\n    \n    :param tup: The original tuple from which elements need to be removed.\n    :return: A new tuple with all elements of the original tuple removed.\n    \"\"\"\n    # Using list comprehension to create a new tuple without elements from the original tuple\n    result = tuple([i for i in tup if not isinstance(i, str)])\n    return result\n\n# Test cases to verify the correctness of the function\nassert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
      "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
      "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
    ]
  },
  {
    "mbpp_id": 817,
    "problem_statement": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
    ]
  },
  {
    "mbpp_id": 818,
    "problem_statement": "Write a python function to count lower case letters in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lower_ctr(s):\n    # Initialize counter for lowercase letters\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if 'a' <= char <= 'z':\n            count += 1\n            \n    # Return the total count of lowercase letters\n    return count",
    "test_cases": [
      "assert lower_ctr('abc') == 3",
      "assert lower_ctr('string') == 6",
      "assert lower_ctr('Python') == 5"
    ]
  },
  {
    "mbpp_id": 819,
    "problem_statement": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_duplic(numbers):\n    # Count the occurrences of each number and store it in a dictionary\n    count = {}\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Find the maximum occurrence value in the dictionary\n    max_count = max(count.values())\n    \n    # Filter out all elements with a frequency less than the maximum occurrence value\n    filtered_numbers = []\n    duplicated_elements = []\n    for num, freq in count.items():\n        if freq == max_count:\n            duplicated_elements.append(num)\n        elif freq > max_count:\n            duplicated_elements = [num]\n    \n    return duplicated_elements, [max_count] * len(duplicated_elements)\n\n# Test cases\nprint(count_duplic([1,2,2,2,4,4,4,5,5,5,5]))  # Expected output: ([1, 2, 4, 5], [1, 3, 3, 4])\nprint(count_duplic([2,2,3,1,2,6,7,9]))  # Expected output: ([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nprint(count_duplic([2,1,5,6,8,3,4,9,10,11,8,12]))  # Expected output: ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
    "test_cases": [
      "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
      "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
      "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ]
  },
  {
    "mbpp_id": 820,
    "problem_statement": "Write a function to check whether the given month number contains 28 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum_number(month_num):\n    # Define the number of days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Return True if the month has 28 days and False otherwise\n    return days_in_month[month_num - 1] == 28",
    "test_cases": [
      "assert check_monthnum_number(2)==True",
      "assert check_monthnum_number(1)==False",
      "assert check_monthnum_number(3)==False"
    ]
  },
  {
    "mbpp_id": 821,
    "problem_statement": "Write a function to merge two dictionaries into a single expression.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
      "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
    ]
  },
  {
    "mbpp_id": 822,
    "problem_statement": "Write a function to return true if the password is valid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'pass_validity' is not defined",
      "Test 2: FAIL - name 'pass_validity' is not defined",
      "Test 3: FAIL - name 'pass_validity' is not defined"
    ],
    "generated_code": "import re\n\ndef validate_password(password):\n    # Regular expression for validating the password\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\"\n    \n    # Using regular expression to check if the password matches the pattern\n    if re.match(pattern, password):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(validate_password(\"password\"))   # Expected output: False\nprint(validate_password(\"Password@10\")) # Expected output: True\nprint(validate_password(\"password@10\")) # Expected output: False",
    "test_cases": [
      "assert pass_validity(\"password\")==False",
      "assert pass_validity(\"Password@10\")==True",
      "assert pass_validity(\"password@10\")==False"
    ]
  },
  {
    "mbpp_id": 823,
    "problem_statement": "Write a function to check if the given string starts with a substring using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_substring(input_string, search_term):\n    # Use regular expression to find if the input_string starts with the search_term\n    pattern = f\"^{re.escape(search_term)}\"\n    match = re.search(pattern, input_string)\n    \n    # If match is found, it means the input_string starts with the search_term\n    if match:\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'\n\n# Test cases\nprint(check_substring(\"dreams for dreams makes life fun\", \"makes\"))\nprint(check_substring(\"Hi there how are you Hi alex\", \"Hi\"))\nprint(check_substring(\"Its been a long day\", \"been\"))",
    "test_cases": [
      "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
      "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
      "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
    ]
  },
  {
    "mbpp_id": 824,
    "problem_statement": "Write a python function to remove even numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_even(numbers):\n    \"\"\"\n    Removes all even numbers from the input list and returns the modified list.\n    \n    Parameters:\n        numbers (list): A list of integers.\n        \n    Returns:\n        list: A new list with all even numbers removed.\n    \"\"\"\n    # Using list comprehension to filter out even numbers\n    return [num for num in numbers if num % 2 != 0]\n\n# Check function with provided data points to verify correctness\ndef check_solution():\n    assert remove_even([1,3,5,2]) == [1,3,5], \"Test case 1 failed\"\n    assert remove_even([5,6,7]) == [5,7], \"Test case 2 failed\"\n    assert remove_even([1,2,3,4]) == [1,3], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert remove_even([1,3,5,2]) == [1,3,5]",
      "assert remove_even([5,6,7]) == [5,7]",
      "assert remove_even([1,2,3,4]) == [1,3]"
    ]
  },
  {
    "mbpp_id": 825,
    "problem_statement": "Write a python function to access multiple elements of specified index from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_elements(lst, indices):\n    \"\"\"\n    Returns a new list containing elements at the specified indices from lst.\n    \n    Parameters:\n    lst (list): The original list from which elements will be accessed.\n    indices (list): A list of integers representing the indices of elements to retrieve.\n    \n    Returns:\n    list: A list containing elements from lst at the specified indices.\n    \"\"\"\n    result = []\n    for index in indices:\n        if 0 <= index < len(lst):\n            result.append(lst[index])\n    return result\n\n# Test cases to verify the correctness of the function\nassert access_elements([2,3,8,4,7,9], [0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5], [1,2]) == [2, 3]\nassert access_elements([1,0,2,3], [0,1]) == [1, 0]",
    "test_cases": [
      "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
      "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
      "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
    ]
  },
  {
    "mbpp_id": 826,
    "problem_statement": "Write a python function to find the type of triangle from the given sides.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Type_Of_Triangle(side1, side2, side3):\n    \"\"\"\n    This function takes three integer inputs representing the lengths of the sides of a triangle.\n    It returns 'Obtuse-angled Triangle', 'Acute-angled Triangle', or 'Right-angled Triangle' based on the Pythagorean theorem.\n    \"\"\"\n\n    # Sort the sides in ascending order\n    sorted_sides = sorted([side1, side2, side3])\n\n    # Check if it's a right-angled triangle\n    if sorted_sides[0]**2 + sorted_sides[1]**2 == sorted_sides[2]**2:\n        return \"Right-angled Triangle\"\n\n    # Check if all angles are acute (triangle inequality theorem)\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n        return \"Acute-angled Triangle\"\n\n    # If none of above conditions satisfied, then it is an obtuse-angled triangle\n    return \"Obtuse-angled Triangle\"",
    "test_cases": [
      "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
      "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
      "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
    ]
  },
  {
    "mbpp_id": 827,
    "problem_statement": "Write a function to sum a specific column of a list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_column(matrix, index):\n    return sum(row[index] for row in matrix)",
    "test_cases": [
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
    ]
  },
  {
    "mbpp_id": 828,
    "problem_statement": "Write a function to count alphabets,digits and special charactes in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_alpha_dig_spl(s):\n    alpha = dig = spl = 0\n    for c in s:\n        if c.isalpha():\n            alpha += 1\n        elif c.isdigit():\n            dig += 1\n        else:\n            spl += 1\n    return alpha, dig, spl",
    "test_cases": [
      "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
      "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
      "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
    ]
  },
  {
    "mbpp_id": 829,
    "problem_statement": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef second_frequent(sequence):\n    # Count occurrences of each string\n    counts = Counter(sequence)\n    \n    # Find the highest and second-highest frequencies\n    max_freq = max(counts.values())\n    second_max_freq = max([count for count in counts.values() if count != max_freq])\n    \n    # Return the first occurrence with the second-highest frequency\n    for item in sequence:\n        if counts[item] == second_max_freq:\n            return item",
    "test_cases": [
      "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
      "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
      "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
    ]
  },
  {
    "mbpp_id": 830,
    "problem_statement": "Write a function to round up a number to specific digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef round_up(number, ndigits):\n    factor = 10**ndigits\n    return math.ceil(number * factor) / factor\n\n# Test cases\nassert round_up(123.01247, 0) == 124\nassert round_up(123.01247, 1) == 123.1\nassert round_up(123.01247, 2) == 123.02\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert round_up(123.01247,0)==124",
      "assert round_up(123.01247,1)==123.1",
      "assert round_up(123.01247,2)==123.02"
    ]
  },
  {
    "mbpp_id": 831,
    "problem_statement": "Write a python function to count equal element pairs from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Initialize variables for tracking occurrences and result counter\n    occurence = {}\n    res = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        if arr[i] not in occurence:\n            occurence[arr[i]] = 1\n        else:\n            occurence[arr[i]] += 1\n        \n        # Check for each unique element's occurrence\n        if occurence[arr[i]] == 2:\n            res += (occurence[arr[i]] * (occurence[arr[i]] - 1)) // 2\n    \n    return res\n\n# Test cases\nprint(count_Pairs([1,1,1,1], 4))   # Output: 6\nprint(count_Pairs([1,5,1], 3))     # Output: 1\nprint(count_Pairs([3,2,1,7,8,9], 6)) # Output: 0",
    "test_cases": [
      "assert count_Pairs([1,1,1,1],4) == 6",
      "assert count_Pairs([1,5,1],3) == 1",
      "assert count_Pairs([3,2,1,7,8,9],6) == 0"
    ]
  },
  {
    "mbpp_id": 832,
    "problem_statement": "Write a function to extract the maximum numeric value from a string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef extract_max(s):\n    # Extract all numbers in the string and find the maximum number\n    max_num = int(re.findall(r'\\d+', s)[0])\n    return max_num",
    "test_cases": [
      "assert extract_max('100klh564abc365bg') == 564",
      "assert extract_max('hello300how546mer231') == 546",
      "assert extract_max('its233beenalong343journey234') == 343"
    ]
  },
  {
    "mbpp_id": 833,
    "problem_statement": "Write a function to get dictionary keys as a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_key(input_dict):\n    return list(input_dict.keys())",
    "test_cases": [
      "assert get_key({1:'python',2:'java'})==[1,2]",
      "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
      "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
    ]
  },
  {
    "mbpp_id": 834,
    "problem_statement": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 2: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 3: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
    ],
    "generated_code": "import numpy as np\n\ndef generate_matrix(n):\n    \"\"\"\n    Generates an nxn matrix where each element is its index squared,\n    filled in a spiral order.\n    \n    Parameters:\n        n (int): The size of the square matrix to be generated.\n        \n    Returns:\n        np.array: An nxn matrix with elements in spiral order starting from 1^2.\n    \"\"\"\n    return np.fromfunction(lambda i, j: (i // n + j) ** 2, (n, n))\n\n# Test Cases\nprint(generate_matrix(3))   # Expected output: array([[1, 2, 3],\n                            #[8, 9, 4],\n                            #[7, 6, 5]])\nprint(generate_matrix(2))   # Expected output: array([[1, 2],\n                            #[4, 3]])\nprint(generate_matrix(7))   # Expected output: large matrix with all values calculated accordingly",
    "test_cases": [
      "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
      "assert generate_matrix(2)==[[1,2],[4,3]]",
      "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
    ]
  },
  {
    "mbpp_id": 835,
    "problem_statement": "Write a python function to find the slope of a line.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def slope(x1, y1, x2, y2):\n    \"\"\"\n    Calculate the slope of a line given two points (x1, y1) and another two points (x2, y2).\n\n    Parameters:\n    x1 (int): The x-coordinate of the first point.\n    y1 (int): The y-coordinate of the first point.\n    x2 (int): The x-coordinate of the second point.\n    y2 (int): The y-coordinate of the second point.\n\n    Returns:\n    float: The slope of the line.\n    \"\"\"\n\n    # Calculate the difference in x-coordinates\n    dx = x2 - x1\n    \n    # If dx is zero, the line is vertical, so the slope cannot be determined\n    if dx == 0:\n        raise ValueError(\"Cannot calculate slope for a vertical line\")\n    \n    # Calculate the difference in y-coordinates\n    dy = y2 - y1\n    \n    # Return the slope as a floating-point number\n    return float(dy / dx)\n\n# Example usage\nprint(slope(4, 2, 2, 5))  # Should print -1.5\nprint(slope(2, 4, 4, 6))  # Should print 1\nprint(slope(1, 2, 4, 2))  # Should print 0",
    "test_cases": [
      "assert slope(4,2,2,5) == -1.5",
      "assert slope(2,4,4,6) == 1",
      "assert slope(1,2,4,2) == 0"
    ]
  },
  {
    "mbpp_id": 836,
    "problem_statement": "Write a function to find length of the subarray having maximum sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_sub_array_sum(arr):\n    \"\"\"\n    Finds the maximum sum of any contiguous subarray within the given array 'arr'.\n    \n    Parameters:\n    arr (list): The input list containing integers.\n    \n    Returns:\n    int: The sum of the contiguous subarray with the largest sum.\n    \"\"\"\n    current_max = global_max = arr[0]\n    for num in arr[1:]:\n        current_max = max(num, current_max + num)\n        if current_max > global_max:\n            global_max = current_max\n    return global_max\n\n# Test cases to verify the correctness of the solution\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1]) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5]) == 3",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
      "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
      "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
    ]
  },
  {
    "mbpp_id": 837,
    "problem_statement": "Write a python function to find the cube sum of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    # Initialize the total sum as zero\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the cube of each odd number to the total sum\n        total_sum += i**3\n        \n    return total_sum",
    "test_cases": [
      "assert cube_Sum(2) == 28",
      "assert cube_Sum(3) == 153",
      "assert cube_Sum(4) == 496"
    ]
  },
  {
    "mbpp_id": 838,
    "problem_statement": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    return count // 2\n\n# Test cases\nprint(min_Swaps(\"0011\", \"1111\"))  # Output: 1\nprint(min_Swaps(\"00011\", \"01001\"))  # Output: 2\nprint(min_Swaps(\"111\", \"111\"))  # Output: 0",
    "test_cases": [
      "assert min_Swaps(\"0011\",\"1111\") == 1",
      "assert min_Swaps(\"00011\",\"01001\") == 2",
      "assert min_Swaps(\"111\",\"111\") == 0"
    ]
  },
  {
    "mbpp_id": 839,
    "problem_statement": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[0])",
    "test_cases": [
      "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
      "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
      "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
    ]
  },
  {
    "mbpp_id": 840,
    "problem_statement": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Check_Solution(a, b, c):\n    # Calculate discriminant\n    D = (b**2) - (4*a*c)\n    \n    # Check if roots are real and distinct\n    if D > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(Check_Solution(2,0,-1))  # Expected output: Yes\nprint(Check_Solution(1,-5,6))  # Expected output: No\nprint(Check_Solution(2,0,2))   # Expected output: Yes",
    "test_cases": [
      "assert Check_Solution(2,0,-1) == \"Yes\"",
      "assert Check_Solution(1,-5,6) == \"No\"",
      "assert Check_Solution(2,0,2) == \"Yes\""
    ]
  },
  {
    "mbpp_id": 841,
    "problem_statement": "Write a function to count the number of inversions in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_inv_count(arr, n):\n    \"\"\"\n    Count the number of inversions in the given array.\n    \n    An inversion is defined as two indices i and j such that arr[i] > arr[j] and i < j\n    \n    :param arr: List[int] - The input array for which we need to find the number of inversions\n    :param n: int - The size of the array\n    :return: int - Number of inversions in the array\n    \"\"\"\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
    "test_cases": [
      "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
      "assert get_inv_count([8, 4, 2, 1], 4) == 6",
      "assert get_inv_count([3, 1, 2], 3) == 2"
    ]
  },
  {
    "mbpp_id": 842,
    "problem_statement": "Write a function to find the number which occurs for odd number of times in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_odd_occurence(arr, n):\n    count = {}\n    \n    # Count occurrences of each element in the array\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Find and return the element with an odd occurrence\n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n# Test the function\nprint(get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13))  # Output: 5\nprint(get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7))                  # Output: 3\nprint(get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7))                   # Output: 5",
    "test_cases": [
      "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
      "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
      "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
    ]
  },
  {
    "mbpp_id": 843,
    "problem_statement": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 14"
    ],
    "generated_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    # Initialize variables\n    primes = [p for p in primes]\n    ugly_nums = []\n    visited = {num: False for num in range(1, n+1)}\n    ugly_nums.append(1)\n    \n    # Priority Queue to store next ugly numbers\n    pq = [(p * num, num) for p in primes for num in ugly_nums if not visited[num]]\n    heapq.heapify(pq)\n\n    while len(ugly_nums) < n:\n        current_num, num = heapq.heappop(pq)\n        for p in primes:\n            new_num = current_num * p\n            if not visited[new_num]:\n                visited[new_num] = True\n                heapq.heappush(pq, (new_num, num))\n                ugly_nums.append(new_num)\n                \n    return ugly_nums[-1]\n\n# Test cases\nprint(nth_super_ugly_number(12, [2, 7, 13, 19]))  # Expected output: 32\nprint(nth_super_ugly_number(10, [2, 7, 13, 19]))  # Expected output: 26\nprint(nth_super_ugly_number(100, [2, 7, 13, 19]))  # Expected output: 5408",
    "test_cases": [
      "assert nth_super_ugly_number(12,[2,7,13,19])==32",
      "assert nth_super_ugly_number(10,[2,7,13,19])==26",
      "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
    ]
  },
  {
    "mbpp_id": 844,
    "problem_statement": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Number(k, n):\n    if k > n * 2:\n        return -1\n    else:\n        return (n // 2) + 1",
    "test_cases": [
      "assert get_Number(8,5) == 2",
      "assert get_Number(7,2) == 3",
      "assert get_Number(5,2) == 3"
    ]
  },
  {
    "mbpp_id": 845,
    "problem_statement": "Write a python function to count the number of digits in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef find_Digits(n):\n    # Calculate n!\n    factorial = math.factorial(n)\n    # Count the number of digits in the factorial\n    num_digits = len(str(factorial))\n    return num_digits\n\n# Test cases\nprint(find_Digits(7))   # Expected output: 4\nprint(find_Digits(5))   # Expected output: 3\nprint(find_Digits(4))   # Expected output: 2",
    "test_cases": [
      "assert find_Digits(7) == 4",
      "assert find_Digits(5) == 3",
      "assert find_Digits(4) == 2"
    ]
  },
  {
    "mbpp_id": 846,
    "problem_statement": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_platform(arrival_time, departure_time, n):\n    # Sort arrival and departure times in ascending order\n    arrival_time.sort()\n    departure_time.sort()\n\n    plat_needed = 1\n    max_plat_needed = 1\n    i, j = 1, 0\n    \n    while i < n and j < n:\n        if arrival_time[i] <= departure_time[j]:\n            plat_needed += 1\n            i += 1\n            max_plat_needed = max(max_plat_needed, plat_needed)\n        else:\n            plat_needed -= 1\n            j += 1\n            \n    return max_plat_needed",
    "test_cases": [
      "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
      "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
      "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
    ]
  },
  {
    "mbpp_id": 847,
    "problem_statement": "Write a python function to copy a list from a singleton tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lcopy(tpl):\n    \"\"\"\n    Copies the elements of a given singleton tuple and returns a new list containing those elements.\n    \n    Parameters:\n    tpl (tuple): A singleton tuple from which the list will be copied.\n    \n    Returns:\n    list: The copied list with all elements of the original tuple.\n    \"\"\"\n    # Unpacking the tuple into an array-like object for easier slicing\n    arr = list(tpl)\n    # Copying each element individually as tuples cannot be directly converted to lists in Python 3.x\n    return arr[:]\n\n# Test Cases\nassert lcopy((1,)) == [1], \"Test case 1 failed\"\nassert lcopy((4, 8, 2, 10, 15, 18)) == [4, 8, 2, 10, 15, 18], \"Test case 2 failed\"\nassert lcopy((4, 5, 6)) == [4, 5, 6], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert lcopy([1, 2, 3]) == [1, 2, 3]",
      "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
      "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
    ]
  },
  {
    "mbpp_id": 848,
    "problem_statement": "Write a function to find the area of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def area_trapezium(base1, base2, height):\n    return ((base1 + base2) * height) / 2",
    "test_cases": [
      "assert area_trapezium(6,9,4)==30",
      "assert area_trapezium(10,20,30)==450",
      "assert area_trapezium(15,25,35)==700"
    ]
  },
  {
    "mbpp_id": 849,
    "problem_statement": "Write a python function to find sum of all prime divisors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sum' is not defined",
      "Test 2: FAIL - name 'Sum' is not defined",
      "Test 3: FAIL - name 'Sum' is not defined"
    ],
    "generated_code": "import math\n\ndef sum_of_prime_divisors(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of its prime divisors.\n    \n    Parameters:\n    - n (int): The input integer whose prime divisors will be summed\n    \n    Returns:\n    int: The sum of all prime divisors of n\n    \"\"\"\n    prime_sum = 0\n    # Divide out the factor of 2\n    while n % 2 == 0:\n        prime_sum += 2\n        n //= 2\n    # Divide out other factors starting from 3\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                prime_sum += i\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2 and is_prime(n):\n        prime_sum += n\n    return prime_sum\n\ndef is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True",
    "test_cases": [
      "assert Sum(60) == 10",
      "assert Sum(39) == 16",
      "assert Sum(40) == 7"
    ]
  },
  {
    "mbpp_id": 850,
    "problem_statement": "Write a function to check if a triangle of positive area is possible with the given angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_triangleexists(angle1, angle2, angle3):\n    # Check if all angles are less than 180 degrees and sum of three angles is 180 degrees\n    return angle1 + angle2 + angle3 == 180 and min(angle1, angle2, angle3) > 0",
    "test_cases": [
      "assert is_triangleexists(50,60,70)==True",
      "assert is_triangleexists(90,45,45)==True",
      "assert is_triangleexists(150,30,70)==False"
    ]
  },
  {
    "mbpp_id": 851,
    "problem_statement": "Write a python function to find sum of inverse of divisors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Sum_of_Inverse_Divisors(numerator, denominator):\n    total = 0\n    for i in range(1, numerator + 1):\n        if numerator % i == 0:\n            total += 1 / (i * denominator)\n    return total\n\n# Test cases\nprint(Sum_of_Inverse_Divisors(6, 12))  # Output should be 2\nprint(Sum_of_Inverse_Divisors(9, 13))  # Output should be approximately 1.44\nprint(Sum_of_Inverse_Divisors(1, 4))   # Output should be 4",
    "test_cases": [
      "assert Sum_of_Inverse_Divisors(6,12) == 2",
      "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
      "assert Sum_of_Inverse_Divisors(1,4) == 4"
    ]
  },
  {
    "mbpp_id": 852,
    "problem_statement": "Write a python function to remove negative numbers from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_negs(nums):\n    # Use list comprehension to filter out negative numbers and return the result.\n    return [num for num in nums if num >= 0]\n\n# Test cases\nprint(remove_negs([1,-2,3,-4]))  # Expected output: [1, 3]\nprint(remove_negs([1,2,3,-4]))   # Expected output: [1, 2, 3]\nprint(remove_negs([4,5,-6,7,-8]))# Expected output: [4, 5, 7]",
    "test_cases": [
      "assert remove_negs([1,-2,3,-4]) == [1,3]",
      "assert remove_negs([1,2,3,-4]) == [1,2,3]",
      "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
    ]
  },
  {
    "mbpp_id": 853,
    "problem_statement": "Write a python function to find sum of odd factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_odd_Factors(n):\n    result = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if i % 2 != 0 and n // i != i:\n                result += i + n//i\n            elif i % 2 == 0 and n // i != i:\n                result += i\n    return result",
    "test_cases": [
      "assert sum_of_odd_Factors(30) == 24",
      "assert sum_of_odd_Factors(18) == 13",
      "assert sum_of_odd_Factors(2) == 1"
    ]
  },
  {
    "mbpp_id": 854,
    "problem_statement": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def raw_heap(lst):\n    # Convert the input list into a max-heap structure\n    lst.sort(reverse=True)\n    return lst",
    "test_cases": [
      "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
      "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
      "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
    ]
  },
  {
    "mbpp_id": 855,
    "problem_statement": "Write a python function to check for even parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Even_Parity(n):\n    \"\"\"\n    This function checks if the binary representation of a number has an even number of 1's.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the parity is even, False otherwise.\n    \"\"\"\n    return bin(n).count('1') % 2 == 0\n\n# Test cases\nprint(check_Even_Parity(10)) # Expected output: True\nprint(check_Even_Parity(11)) # Expected output: False\nprint(check_Even_Parity(18)) # Expected output: True",
    "test_cases": [
      "assert check_Even_Parity(10) == True",
      "assert check_Even_Parity(11) == False",
      "assert check_Even_Parity(18) == True"
    ]
  },
  {
    "mbpp_id": 856,
    "problem_statement": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Swaps(arr, n):\n    swaps = 0\n    for i in range(n):\n        if arr[i] != i:\n            j = arr[i]\n            while arr[j] != j:\n                temp = arr[j]\n                arr[j] = j\n                j = temp\n                swaps += 1\n    return swaps\n\n# Test cases\nprint(find_Min_Swaps([1,0,1,0],4)) # Expected output: 3\nprint(find_Min_Swaps([0,1,0],3))   # Expected output: 1\nprint(find_Min_Swaps([0,0,1,1,0],5)) # Expected output: 2",
    "test_cases": [
      "assert find_Min_Swaps([1,0,1,0],4) == 3",
      "assert find_Min_Swaps([0,1,0],3) == 1",
      "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
    ]
  },
  {
    "mbpp_id": 857,
    "problem_statement": "Write a function to list out the list of given strings individually using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_cases": [
      "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
      "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
      "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
    ]
  },
  {
    "mbpp_id": 858,
    "problem_statement": "Write a function to count number of lists in a given list of lists and square the count.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_list(lst):\n    # Count the number of lists in the input list\n    count = len([item for sublist in lst for item in sublist if isinstance(item, list)])\n    return count ** 2",
    "test_cases": [
      "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
      "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
    ]
  },
  {
    "mbpp_id": 859,
    "problem_statement": "Write a function to generate all sublists of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sub_lists(input_list):\n    if not input_list:\n        return [[]]\n    \n    first_element = input_list[0]\n    rest_sub_lists = sub_lists(input_list[1:])\n    return [[first_element] + sublist for sublist in rest_sub_lists] + rest_sub_lists",
    "test_cases": [
      "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
      "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
      "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
    ]
  },
  {
    "mbpp_id": 860,
    "problem_statement": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_alphanumeric(input_string):\n    pattern = r'^.*[a-zA-Z0-9]$' # Regular expression to match strings that end with alphanumeric characters\n    if re.match(pattern, input_string):\n        return 'Accept'\n    else:\n        return 'Discard'\n\n# Test cases\nprint(check_alphanumeric(\"dawood@\"))   # Expected output: \"Accept\"\nprint(check_alphanumeric(\"skdmsam326\")) # Expected output: \"Discard\"\nprint(check_alphanumeric(\"cooltricks@\")) # Expected output: \"Discard\"",
    "test_cases": [
      "assert check_alphanumeric(\"dawood@\") == 'Discard'",
      "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
      "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
    ]
  },
  {
    "mbpp_id": 861,
    "problem_statement": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef anagram_lambda(list_of_strings, target_string):\n    result = []\n    target_chars = sorted(target_string)\n    \n    for item in list_of_strings:\n        if len(item) != len(target_string): \n            continue\n        \n        chars_in_item = sorted(item)\n        if chars_in_item == target_chars:\n            result.append(item)\n            \n    return result",
    "test_cases": [
      "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
      "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
      "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
    ]
  },
  {
    "mbpp_id": 862,
    "problem_statement": "Write a function to find the occurrences of n most common words in a given text.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    # Extract all words from the input text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Count the frequency of each word\n    word_count = Counter(words)\n    \n    # Sort the items based on their counts and return the top n items\n    sorted_items = word_count.most_common(n)\n    \n    return sorted_items",
    "test_cases": [
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
    ]
  },
  {
    "mbpp_id": 863,
    "problem_statement": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_conseq_subseq(nums, target_length):\n    # Remove duplicates and sort the numbers\n    unique_nums = sorted(set(nums))\n    \n    max_length = 0\n    current_length = 0\n    \n    for num in unique_nums:\n        if num < target_length:\n            continue\n        \n        while num < target_length + current_length:\n            num += 1\n            current_length += 1\n            \n        if num == target_length + current_length:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    return max_length\n\n# Test cases\nprint(find_longest_conseq_subseq([1, 2, 2, 3], 4))  # Output: 3\nprint(find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7))  # Output: 4\nprint(find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11))  # Output: 5",
    "test_cases": [
      "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
      "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
      "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
    ]
  },
  {
    "mbpp_id": 864,
    "problem_statement": "Write a function to find palindromes in a given list of strings using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def palindrome_lambda(lst):\n    return [word for word in lst if word == word[::-1]]",
    "test_cases": [
      "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
      "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
      "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
    ]
  },
  {
    "mbpp_id": 865,
    "problem_statement": "Write a function to print n-times a list using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_cases": [
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
    ]
  },
  {
    "mbpp_id": 866,
    "problem_statement": "Write a function to check whether the given month name contains 31 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumb(month_name):\n    # List of months with 31 days\n    thirty_one_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    \n    if month_name in thirty_one_days_months:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnumb(\"February\")==False",
      "assert check_monthnumb(\"January\")==True",
      "assert check_monthnumb(\"March\")==True"
    ]
  },
  {
    "mbpp_id": 867,
    "problem_statement": "Write a python function to add a minimum number such that the sum of array becomes even.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Num(arr, n):\n    total_sum = sum(arr)\n    remainder = total_sum % 2\n    \n    if remainder == 0:\n        # If the sum is already even, no need to adjust\n        return 0\n    elif remainder == 1 and n > arr[0]:\n        # If the sum is odd and the added value can make it even\n        return n - arr[0]\n    else:\n        # Otherwise, return the difference between n and the smallest element in the array\n        return n - arr[0]\n\n# Example usage\nprint(min_Num([1,2,3,4,5,6,7,8,9], 9))  # Output: 1\nprint(min_Num([1,2,3,4,5,6,7,8], 8))     # Output: 2\nprint(min_Num([1,2,3], 3))               # Output: 2",
    "test_cases": [
      "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
      "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
      "assert min_Num([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 868,
    "problem_statement": "Write a python function to find the length of the last word in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def length_Of_Last_Word(s):\n    # Split the string into words based on spaces and get the last element\n    last_word = s.split(' ')[-1]\n    # Return the length of the last word\n    return len(last_word)\n\n# Test cases\nprint(length_Of_Last_Word(\"python language\"))  # Should return 8\nprint(length_Of_Last_Word(\"PHP\"))              # Should return 3\nprint(length_Of_Last_Word(\"\"))                 # Should return 0",
    "test_cases": [
      "assert length_Of_Last_Word(\"python language\") == 8",
      "assert length_Of_Last_Word(\"PHP\") == 3",
      "assert length_Of_Last_Word(\"\") == 0"
    ]
  },
  {
    "mbpp_id": 869,
    "problem_statement": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if all(item >= start and item <= end for item in sublist)]",
    "test_cases": [
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
    ]
  },
  {
    "mbpp_id": 870,
    "problem_statement": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_positivenum(nums):\n    return sum(filter(lambda x: x > 0, nums))",
    "test_cases": [
      "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
      "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
      "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
    ]
  },
  {
    "mbpp_id": 871,
    "problem_statement": "Write a python function to check whether the given strings are rotations of each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Rotations(str1, str2):\n    if len(str1) != len(str2): \n        return False\n    concatenated_str = str1 + str1\n    return str2 in concatenated_str",
    "test_cases": [
      "assert are_Rotations(\"abc\",\"cba\") == False",
      "assert are_Rotations(\"abcd\",\"cdba\") == False",
      "assert are_Rotations(\"abacd\",\"cdaba\") == True"
    ]
  },
  {
    "mbpp_id": 872,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset(nested_list_1, nested_list_2):\n    for sublist_1 in nested_list_1:\n        found = False\n        for item_1 in sublist_1:\n            if item_1 in [item for sublist_2 in nested_list_2 for item in sublist_2]:\n                found = True\n                break\n        if not found:\n            return False\n    return True\n\n# Test cases\nprint(check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13,15,17]])) # True\nprint(check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])) # True\nprint(check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])) # False",
    "test_cases": [
      "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
      "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
      "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
    ]
  },
  {
    "mbpp_id": 873,
    "problem_statement": "Write a function to solve the fibonacci sequence using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_cases": [
      "assert fibonacci(7) == 13",
      "assert fibonacci(8) == 21",
      "assert fibonacci(9) == 34"
    ]
  },
  {
    "mbpp_id": 874,
    "problem_statement": "Write a python function to check if the string is a concatenation of another string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Concat(s1, s2):\n    # Concatenate both strings and compare with s1\n    return s1 == s1 + s2",
    "test_cases": [
      "assert check_Concat(\"abcabcabc\",\"abc\") == True",
      "assert check_Concat(\"abcab\",\"abc\") == False",
      "assert check_Concat(\"aba\",\"ab\") == False"
    ]
  },
  {
    "mbpp_id": 875,
    "problem_statement": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef min_difference(pairs: List[Tuple[int]]) -> int:\n    pairs.sort()\n    min_diff = float('inf')\n    for i in range(len(pairs) - 1):\n        diff = pairs[i + 1][0] - pairs[i][0]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_cases": [
      "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
      "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
      "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
    ]
  },
  {
    "mbpp_id": 876,
    "problem_statement": "Write a python function to find lcm of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lcm(a, b):\n    # Calculate the least common multiple using the formula LCM(a, b) = |a*b| / GCD(a,b)\n    import math\n    return abs(a * b) // math.gcd(a, b)\n\n# Test cases\nprint(lcm(4, 6))  # Expected output: 12\nprint(lcm(15, 17))  # Expected output: 255\nprint(lcm(2, 6))  # Expected output: 6",
    "test_cases": [
      "assert lcm(4,6) == 12",
      "assert lcm(15,17) == 255",
      "assert lcm(2,6) == 6"
    ]
  },
  {
    "mbpp_id": 877,
    "problem_statement": "Write a python function to sort the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_String(input_string):\n    \"\"\"\n    Sorts the characters of the input string in ascending order.\n    \n    Parameters:\n    - input_string (str): The string to be sorted.\n    \n    Returns:\n    - str: A new string with the characters sorted.\n    \"\"\"\n    # Convert the string into a list of characters, sort it and then join back into a string\n    return \"\".join(sorted(input_string))\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    assert sort_String(\"cba\") == \"abc\", \"Test case 1 failed\"\n    assert sort_String(\"data\") == \"aadt\", \"Test case 2 failed\"\n    assert sort_String(\"zxy\") == \"xyz\", \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert sort_String(\"cba\") == \"abc\"",
      "assert sort_String(\"data\") == \"aadt\"",
      "assert sort_String(\"zxy\") == \"xyz\""
    ]
  },
  {
    "mbpp_id": 878,
    "problem_statement": "Write a function to check if the given tuple contains only k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'reduce' is not defined"
    ],
    "generated_code": "def check_tuples(tup, elements):\n    # Check if the length of the tuple is equal to the product of the count of each element in tup\n    return len(tup) == reduce(lambda x, y: x * y, map(len, set(elements)))\n\n# Test cases\nprint(check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5]))  # Expected output: True\nprint(check_tuples((4, 5, 6, 4, 6, 5), [4, 5, 6]))  # Expected output: True\nprint(check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1]))  # Expected output: False",
    "test_cases": [
      "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
      "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
      "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
    ]
  },
  {
    "mbpp_id": 879,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match strings with an 'a' followed by anything and ending in 'b'\n    pattern = 'ab.*b$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"aabbbbd\") == 'Not matched!'",
      "assert text_match(\"aabAbbbc\") == 'Not matched!'",
      "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 880,
    "problem_statement": "Write a python function to find number of solutions in quadratic equation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        sqrt_discriminant = math.sqrt(discriminant)\n        x1 = (-b + sqrt_discriminant) / (2*a)\n        x2 = (-b - sqrt_discriminant) / (2*a)\n        return f\"{int(x1)} and {int(x2)}\"",
    "test_cases": [
      "assert Check_Solution(2,5,2) == \"2 solutions\"",
      "assert Check_Solution(1,1,1) == \"No solutions\"",
      "assert Check_Solution(1,2,1) == \"1 solution\""
    ]
  },
  {
    "mbpp_id": 881,
    "problem_statement": "Write a function to find the sum of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef sum_even_odd(nums: List[int]) -> int:\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_cases": [
      "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
      "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
      "assert sum_even_odd([1,5,7,9,10])==11"
    ]
  },
  {
    "mbpp_id": 882,
    "problem_statement": "Write a function to caluclate perimeter of a parallelogram.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parallelogram_perimeter(a,b):\n    return 2 * (a + b)",
    "test_cases": [
      "assert parallelogram_perimeter(10,20)==400",
      "assert parallelogram_perimeter(15,20)==600",
      "assert parallelogram_perimeter(8,9)==144"
    ]
  },
  {
    "mbpp_id": 883,
    "problem_statement": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 and num % n == 0]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
    ]
  },
  {
    "mbpp_id": 884,
    "problem_statement": "Write a python function to check whether all the bits are within a given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(n, left_bit_position, right_bit_position):\n    # Check if all bits from 'left_bit_position' to 'right_bit_position' are set in 'n'\n    for i in range(left_bit_position, right_bit_position + 1):\n        if ((n >> i) & 1) == 0:\n            return False\n    return True",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
      "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
      "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
    ]
  },
  {
    "mbpp_id": 885,
    "problem_statement": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Isomorphic(str1, str2):\n    if len(str1) != len(str2): \n        return False\n    mapping = {}\n    inverse_mapping = {}\n    \n    for char1, char2 in zip(str1, str2):  \n        if char1 in mapping:\n            if mapping[char1] != char2:\n                return False\n        else:\n            if char2 in inverse_mapping:\n                return False\n            mapping[char1] = char2\n            inverse_mapping[char2] = char1\n        \n    return True\n\n# Test cases\nprint(is_Isomorphic(\"paper\", \"title\"))  # Expected output: True\nprint(is_Isomorphic(\"ab\", \"ba\"))        # Expected output: True\nprint(is_Isomorphic(\"ab\", \"aa\"))        # Expected output: False",
    "test_cases": [
      "assert is_Isomorphic(\"paper\",\"title\") == True",
      "assert is_Isomorphic(\"ab\",\"ba\") == True",
      "assert is_Isomorphic(\"ab\",\"aa\") == False"
    ]
  },
  {
    "mbpp_id": 886,
    "problem_statement": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_num(numbers):\n    total = sum(numbers)\n    return total / len(numbers)\n\n# Test cases\nprint(sum_num([8, 2, 3, 0, 7])) # Expected output: 4.0\nprint(sum_num([-10, -20, -30])) # Expected output: -20.0\nprint(sum_num([19, 15, 18]))   # Expected output: 17.333333333333332",
    "test_cases": [
      "assert sum_num((8, 2, 3, 0, 7))==4.0",
      "assert sum_num((-10,-20,-30))==-20.0",
      "assert sum_num((19,15,18))==17.333333333333332"
    ]
  },
  {
    "mbpp_id": 887,
    "problem_statement": "Write a python function to check whether the given number is odd or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_odd(number):\n    \"\"\"\n    Check if the given number is odd using bitwise operation.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is odd, False otherwise.\n    \"\"\"\n    return (number & 1) == 1",
    "test_cases": [
      "assert is_odd(5) == True",
      "assert is_odd(6) == False",
      "assert is_odd(7) == True"
    ]
  },
  {
    "mbpp_id": 888,
    "problem_statement": "Write a function to substract the elements of the given nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tup1, tup2):\n    result = []\n    for t1, t2 in zip(tup1, tup2):\n        result.append((t1[0] - t2[0], t1[1] - t2[1]))\n    return tuple(result)",
    "test_cases": [
      "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
    ]
  },
  {
    "mbpp_id": 889,
    "problem_statement": "Write a function to reverse each list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_list_lists(lst_of_lsts):\n    return [[num for num in reversed(sublist)] for sublist in lst_of_lsts]",
    "test_cases": [
      "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
      "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
      "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
    ]
  },
  {
    "mbpp_id": 890,
    "problem_statement": "Write a python function to find the index of an extra element present in one sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_extra(arr1, arr2, n):\n    # Iterate through each element in arr1\n    for i in range(n+1):\n        # Check if current element from arr1 does not match with corresponding element from arr2\n        if arr1[i] != arr2[i]:\n            return i  # Return the index where the elements differ\n    # If no difference found after iteration, return -1 as per task description\n    return -1\n\n# Test cases\nprint(find_extra([1,2,3,4],[1,2,3],3))   # Expected output: 3\nprint(find_extra([2,4,6,8,10],[2,4,6,8],4))  # Expected output: 4\nprint(find_extra([1,3,5,7,9,11],[1,3,5,7,9],5))  # Expected output: 5",
    "test_cases": [
      "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
      "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
      "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
    ]
  },
  {
    "mbpp_id": 891,
    "problem_statement": "Write a python function to check whether the given two numbers have same number of digits or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def same_Length(x, y):\n    # Convert both numbers to strings and compare their lengths\n    if len(str(x)) == len(str(y)):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert same_Length(12,1) == False",
      "assert same_Length(2,2) == True",
      "assert same_Length(10,20) == True"
    ]
  },
  {
    "mbpp_id": 892,
    "problem_statement": "Write a function to remove multiple spaces in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_spaces(input_string):\n    return re.sub(r'\\s+', ' ', input_string).strip()\n\n# Test cases\nprint(remove_spaces('python  program'))  # Expected output: \"python program\"\nprint(remove_spaces('python   programming    language'))  # Expected output: \"python programming language\"\nprint(remove_spaces('python                     program'))  # Expected output: \"python program\"",
    "test_cases": [
      "assert remove_spaces('python  program')==('python program')",
      "assert remove_spaces('python   programming    language')==('python programming language')",
      "assert remove_spaces('python                     program')==('python program')"
    ]
  },
  {
    "mbpp_id": 893,
    "problem_statement": "Write a python function to get the last element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension with zip and reversed() to get the last element from each sublist\n    result = [sub[-1] for sub in lst if isinstance(sub, list)]\n    return result",
    "test_cases": [
      "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
      "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
      "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
    ]
  },
  {
    "mbpp_id": 894,
    "problem_statement": "Write a function to convert the given string of float type into tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))",
    "test_cases": [
      "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
      "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
      "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
    ]
  },
  {
    "mbpp_id": 895,
    "problem_statement": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_subseq(arr):\n    incl = arr[0]\n    excl = 0\n    for i in range(1, len(arr)):\n        new_excl = max(incl, excl)\n        incl = excl + arr[i]\n        excl = new_excl\n    return max(excl, incl)\n\n# Test Cases\nprint(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])) # Output: 26\nprint(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])) # Output: 28\nprint(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])) # Output: 44",
    "test_cases": [
      "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
      "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
      "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
    ]
  },
  {
    "mbpp_id": 896,
    "problem_statement": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_cases": [
      "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
      "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
      "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
    ]
  },
  {
    "mbpp_id": 897,
    "problem_statement": "Write a python function to check whether the word is present in a given sentence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Word_Present' is not defined",
      "Test 2: FAIL - name 'is_Word_Present' is not defined",
      "Test 3: FAIL - name 'is_Word_Present' is not defined"
    ],
    "generated_code": "def is_word_present(sentence, word):\n    # Splitting the sentence into words and checking if the word is present\n    return word in sentence.split()\n\n# Test cases\nprint(is_word_present(\"machine learning\", \"machine\"))  # Expected output: True\nprint(is_word_present(\"easy\", \"fun\"))  # Expected output: False\nprint(is_word_present(\"python language\", \"code\"))  # Expected output: False",
    "test_cases": [
      "assert is_Word_Present(\"machine learning\",\"machine\") == True",
      "assert is_Word_Present(\"easy\",\"fun\") == False",
      "assert is_Word_Present(\"python language\",\"code\") == False"
    ]
  },
  {
    "mbpp_id": 898,
    "problem_statement": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_elements(lst, n):\n    return lst[:n]\n\n# Test cases\nprint(extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2)) # [1, 4]\nprint(extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)) # [4]\nprint(extract_elements([0,0,0,0,0], 5)) # [0]",
    "test_cases": [
      "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
      "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
      "assert extract_elements([0,0,0,0,0],5)==[0]"
    ]
  },
  {
    "mbpp_id": 899,
    "problem_statement": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(arr, n):\n    if len(set(arr)) == 1:\n        return False\n    elif arr[0] < arr[-1]:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check([3,2,1,2,3,4],6))  # Expected output: True\nprint(check([2,1,4,5,1],5))    # Expected output: True\nprint(check([1,2,2,1,2,3],6))  # Expected output: True",
    "test_cases": [
      "assert check([3,2,1,2,3,4],6) == True",
      "assert check([2,1,4,5,1],5) == True",
      "assert check([1,2,2,1,2,3],6) == True"
    ]
  },
  {
    "mbpp_id": 900,
    "problem_statement": "Write a function where a string will start with a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef match_num(string):\n    # Use regex to check if the first character of the string is a digit and matches the expected number\n    return bool(re.match(r'^\\d', string))\n\n# Test cases to verify the correctness of the function\nassert match_num('5-2345861') == True\nassert match_num('6-2345861') == False\nassert match_num('78910') == False\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert match_num('5-2345861')==True",
      "assert match_num('6-2345861')==False",
      "assert match_num('78910')==False"
    ]
  },
  {
    "mbpp_id": 901,
    "problem_statement": "Write a function to find the smallest multiple of the first n numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def smallest_multiple(n):\n    import math\n    product = 1\n    for i in range(1, n+1):\n        if i == 1:\n            product *= i\n        else:\n            product *= math.lcm(product, i)\n    return int(product)\n\n# Test cases\nassert(smallest_multiple(13) == 360360)\nassert(smallest_multiple(2) == 2)\nassert(smallest_multiple(1) == 1)",
    "test_cases": [
      "assert smallest_multiple(13)==360360",
      "assert smallest_multiple(2)==2",
      "assert smallest_multiple(1)==1"
    ]
  },
  {
    "mbpp_id": 902,
    "problem_statement": "Write a function to combine two dictionaries by adding values for common keys.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_dict(dict1, dict2):\n    result = {**dict1, **dict2}\n    return result",
    "test_cases": [
      "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
      "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
      "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
    ]
  },
  {
    "mbpp_id": 903,
    "problem_statement": "Write a python function to count the total unset bits from 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def count_unset_bits(n):\n    \"\"\"\n    This function calculates the total number of unset bits in the binary representation of numbers from 1 to n.\n    \n    Args:\n        n (int): The upper limit till which the calculation is performed.\n        \n    Returns:\n        int: Total number of unset bits in the given range.\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        result += bin(i).count('1')\n    return result\n\n# Check function with provided data points\nassert count_unset_bits(2) == 1\nassert count_unset_bits(5) == 4\nassert count_unset_bits(14) == 17\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert count_Unset_Bits(2) == 1",
      "assert count_Unset_Bits(5) == 4",
      "assert count_Unset_Bits(14) == 17"
    ]
  },
  {
    "mbpp_id": 904,
    "problem_statement": "Write a function to return true if the given number is even else return false.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_num(num):\n    \"\"\"\n    Check if the input number is even.\n    \n    Parameters:\n    num (int/float): The number to check.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return int(num) % 2 == 0",
    "test_cases": [
      "assert even_num(13.5)==False",
      "assert even_num(0)==True",
      "assert even_num(-9)==False"
    ]
  },
  {
    "mbpp_id": 905,
    "problem_statement": "Write a python function to find the sum of squares of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_square(n):\n    # Initialize the result to 0\n    total = 0\n    \n    # Iterate through all possible values from 0 to n\n    for i in range(n + 1):\n        # Calculate the square and add it to the result\n        total += (i ** 2)\n    \n    return total",
    "test_cases": [
      "assert sum_of_square(4) == 70",
      "assert sum_of_square(5) == 252",
      "assert sum_of_square(2) == 6"
    ]
  },
  {
    "mbpp_id": 906,
    "problem_statement": "Write a function to extract year, month and date from a url by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unmatched ')'"
    ],
    "generated_code": "import re\n\ndef extract_date(url):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, url)\n    if match:\n        year, month, day = map(int, [match.group(1), match.group(2), match.group(3)])\n        return [(year, month, day)]\n    else:\n        return []\n\n# Test cases\nprint(extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")) # Expected output: [('2016', '09', '02')]\nprint(extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")) # Expected output: [('2020', '11', '03')]\nprint(extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/collections/show-all\"))) # Expected output: [('2020', '12', '29')]",
    "test_cases": [
      "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
      "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
      "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
    ]
  },
  {
    "mbpp_id": 907,
    "problem_statement": "Write a function to print the first n lucky numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lucky_num(n):\n    result = []\n    for i in range(1, 4*n//3 + 1):  \n        if i % 6 == 1 or i % 6 == 5:\n            result.append(i)\n    return result[:n]",
    "test_cases": [
      "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
      "assert lucky_num(5)==[1, 3, 7, 9, 13]",
      "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
    ]
  },
  {
    "mbpp_id": 908,
    "problem_statement": "Write a function to find the fixed point in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_fixed_point() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_fixed_point(arr):\n    \"\"\"\n    Find and return an index of the first occurrence of a number greater than all preceding numbers.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The index of the fixed point if it exists, otherwise returns -1.\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num > i:\n            return i\n    return -1\n\n# Test cases\nprint(find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100])) # Expected output: 3\nprint(find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8])) # Expected output: -1\nprint(find_fixed_point([0, 2, 5, 8, 17])) # Expected output: 0",
    "test_cases": [
      "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
      "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
      "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
    ]
  },
  {
    "mbpp_id": 909,
    "problem_statement": "Write a function to find the previous palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def previous_palindrome(n):\n    \"\"\"\n    Finds and returns the largest palindromic number less than n.\n    \n    Parameters:\n    - n: an integer\n    \n    Returns:\n    - An integer representing the largest palindromic number less than n.\n    \"\"\"\n    while n >= 10:\n        if str(n) == str(n)[::-1]:\n            return n-1\n        n -= 1\n    return 0\n\n# Test cases\nassert previous_palindrome(99) == 88\nassert previous_palindrome(1221) == 1111\nassert previous_palindrome(120) == 111\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert previous_palindrome(99)==88",
      "assert previous_palindrome(1221)==1111",
      "assert previous_palindrome(120)==111"
    ]
  },
  {
    "mbpp_id": 910,
    "problem_statement": "Write a function to validate a gregorian date.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 'str' object cannot be interpreted as an integer"
    ],
    "generated_code": "def check_date(day, month, year):\n    try:\n        import datetime\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_date(11,11,2002)==True",
      "assert check_date(13,11,2002)==False",
      "assert check_date('11','11','2002')==True"
    ]
  },
  {
    "mbpp_id": 911,
    "problem_statement": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef maximum_product(nums):\n    \"\"\"\n    Finds the maximum product of any triplet in the list nums.\n    \n    :param nums: List[int] - A list of integers.\n    :return: int - The maximum product of any triplet in nums.\n    \"\"\"\n    # Convert negative values into positive for calculation purposes\n    nums = [-num for num in nums]\n    heapq.heapify(nums)\n    \n    max1 = heapq.heappop(nums) * heapq.heappop(nums) * heapq.heappop(nums)\n    max2 = abs(max1)\n    max3 = max(nums[0], -max1)\n    \n    return max(max1, max3 * max2)\n\n# Test cases\nprint(maximum_product([12, 74, 9, 50, 61, 41]))  # Expected output: 225700\nprint(maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58]))  # Expected output: 414375\nprint(maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]))  # Expected output: 2520",
    "test_cases": [
      "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
      "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
      "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
    ]
  },
  {
    "mbpp_id": 912,
    "problem_statement": "Write a function to find ln, m lobb number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'lobb_num' is not defined",
      "Test 2: FAIL - name 'lobb_num' is not defined",
      "Test 3: FAIL - name 'lobb_num' is not defined"
    ],
    "generated_code": "import math\n\ndef int_lobb_number(n, k):\n    if n == k:\n        return math.factorial(k)\n    \n    result = 1\n    for i in range(k):\n        result *= n - i\n    \n    result /= math.factorial(k)\n    return int(result)\n\n# Test cases\nprint(int_lobb_number(5, 3)) # Output: 35\nprint(int_lobb_number(3, 2)) # Output: 5\nprint(int_lobb_number(4, 2)) # Output: 20",
    "test_cases": [
      "assert int(lobb_num(5, 3)) == 35",
      "assert int(lobb_num(3, 2)) == 5",
      "assert int(lobb_num(4, 2)) == 20"
    ]
  },
  {
    "mbpp_id": 913,
    "problem_statement": "Write a function to check for a number at the end of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def end_num(s):\n    return s[-1].isdigit()",
    "test_cases": [
      "assert end_num('abcdef')==False",
      "assert end_num('abcdef7')==True",
      "assert end_num('abc')==False"
    ]
  },
  {
    "mbpp_id": 914,
    "problem_statement": "Write a python function to check whether the given string is made up of two alternating characters or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 3 failed"
    ],
    "generated_code": "def is_Two_Alter(s):\n    \"\"\"\n    Check if the given string s is made up of two alternating characters.\n    \n    Parameters:\n    - s: A string\n    \n    Returns:\n    - bool: True if s consists of two alternating characters, False otherwise.\n    \"\"\"\n    # Check if the string length is less than 2, which cannot be an alternate pattern\n    if len(s) < 2:\n        return False\n    prev_char = None\n    count = 0\n    for char in s:\n        if prev_char != None and char == prev_char:\n            return False\n        prev_char = char\n        count += 1\n    return True\n\n# Test cases to verify the correctness of the function\nassert is_Two_Alter(\"abab\") == True, \"Test case 1 failed\"\nassert is_Two_Alter(\"aaaa\") == False, \"Test case 2 failed\"\nassert is_Two_Alter(\"xyz\") == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_Two_Alter(\"abab\") == True",
      "assert is_Two_Alter(\"aaaa\") == False",
      "assert is_Two_Alter(\"xyz\") == False"
    ]
  },
  {
    "mbpp_id": 915,
    "problem_statement": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef rearrange_numbs(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (x > 0, x < 0))",
    "test_cases": [
      "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
      "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
      "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
    ]
  },
  {
    "mbpp_id": 916,
    "problem_statement": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_triplet_array(arr, target_sum, actual_value):\n    arr.sort()  # Sort the array to make it easier to apply the two-pointer technique\n    n = len(arr)\n\n    for i in range(n - 2):  # Iterate through the array up to the third last element\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n\n            if current_sum == target_sum:\n                if arr[i] == actual_value and arr[left] == actual_value and arr[right] == actual_value:\n                    return tuple(sorted((arr[i], arr[left], arr[right])))\n                else:\n                    return (arr[i], arr[left], arr[right])\n\n            elif current_sum < target_sum:\n                left += 1  # Increase the left pointer to increase the sum\n            else:\n                right -= 1  # Decrease the right pointer to decrease the sum\n\n    return None  # Return None if no such triplet exists\n\n# Test cases\nprint(find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22))  # Expected output: (4, 10, 8)\nprint(find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24))  # Expected output: (12, 3, 9)\nprint(find_triplet_array([1, 2, 3, 4, 5], 5, 9))  # Expected output: (1, 3, 5)",
    "test_cases": [
      "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
      "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
      "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
    ]
  },
  {
    "mbpp_id": 917,
    "problem_statement": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'text_uppercase_lowercase' is not defined",
      "Test 2: FAIL - name 'text_uppercase_lowercase' is not defined",
      "Test 3: FAIL - name 'text_uppercase_lowercase' is not defined"
    ],
    "generated_code": "def find_sequences(text):\n    for i in range(len(text) - 1):\n        if text[i].isupper() and text[i + 1].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n\n# Test cases\nprint(find_sequences(\"AaBbGg\")) # Expected output: 'Found a match!'\nprint(find_sequences(\"aA\"))     # Expected output: 'Not matched!'\nprint(find_sequences(\"PYTHON\")) # Expected output: 'Not matched!'",
    "test_cases": [
      "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
      "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
      "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 918,
    "problem_statement": "Write a function to count coin change.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef coin_change(coins: List[int], amount: int, target: int) -> int:\n    dp = [0] * (amount + 1)\n    for i in range(1, len(dp)):\n        dp[i] = float('inf')\n        for coin in coins:\n            if i - coin >= 0 and dp[i-coin] != float('inf'):\n                dp[i] = min(dp[i], dp[i-coin] + 1)\n    return dp[-1] if dp[target] != float('inf') else 0",
    "test_cases": [
      "assert coin_change([1, 2, 3],3,4)==4",
      "assert coin_change([4,5,6,7,8,9],6,9)==2",
      "assert coin_change([4,5,6,7,8,9],6,4)==1"
    ]
  },
  {
    "mbpp_id": 919,
    "problem_statement": "Write a python function to multiply all items in the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_list(lst):\n    # Initialize result variable as 1\n    result = 1\n    for i in lst:\n        # Multiply each element of the list with result\n        result *= i\n    return result",
    "test_cases": [
      "assert multiply_list([1,-2,3]) == -6",
      "assert multiply_list([1,2,3,4]) == 24",
      "assert multiply_list([3,1,2,3]) == 18"
    ]
  },
  {
    "mbpp_id": 920,
    "problem_statement": "Write a function to remove all tuples with all none values in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_tuple' is not defined",
      "Test 2: FAIL - name 'remove_tuple' is not defined",
      "Test 3: FAIL - name 'remove_tuple' is not defined"
    ],
    "generated_code": "def remove_none_values_in_tuples(lst):\n    result = []\n    for item in lst:\n        if not all(item is None):\n            result.append(item)\n    return result",
    "test_cases": [
      "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
      "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
      "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
    ]
  },
  {
    "mbpp_id": 921,
    "problem_statement": "Write a function to perform chunking of tuples each of size n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def chunk_tuples(tuples_list, n):\n    \"\"\"\n    Splits each tuple in 'tuples_list' into chunks of length 'n'.\n    \n    Parameters:\n    - tuples_list (list): A list of tuples.\n    - n (int): The number of elements in each chunk.\n    \n    Returns:\n    - list: A new list where each tuple from 'tuples_list' is split into 'n' sub-tuples.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        temp = []\n        for i in range(0, len(tup), n):\n            chunk = tup[i:i+n]\n            if chunk:  # Check if there's at least one element in the chunk\n                temp.append(chunk)\n        result.append(temp)\n    return result",
    "test_cases": [
      "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
      "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
      "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
    ]
  },
  {
    "mbpp_id": 922,
    "problem_statement": "Write a function to find a pair with the highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '>' not supported between instances of 'tuple' and 'int'"
    ],
    "generated_code": "def max_product(nums):\n    if len(nums) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    max1 = max2 = float('-inf')\n    for num in nums:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n    return max(max1 * max2, max(num, num), tuple())\n\nprint(max_product([1, 2, 3, 4, 7, 0, 8, 4])) # Expected output: (7, 8)\nprint(max_product([0, -1, -2, -4, 5, 0, -6])) # Expected output: (-4, -6)\nprint(max_product([1, 3, 5, 6, 8, 9])) # Expected output: (8, 9)",
    "test_cases": [
      "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
      "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
      "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
    ]
  },
  {
    "mbpp_id": 923,
    "problem_statement": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def super_seq(str1, str2, n, m):\n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][m]\n\n# Test cases\nprint(super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7)) # Output: 9\nprint(super_seq(\"feek\", \"eke\", 4, 3))       # Output: 5\nprint(super_seq(\"PARRT\", \"RTA\", 5, 3))      # Output: 6",
    "test_cases": [
      "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
      "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
      "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
    ]
  },
  {
    "mbpp_id": 924,
    "problem_statement": "Write a function to find maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_cases": [
      "assert max_of_two(10,20)==20",
      "assert max_of_two(19,15)==19",
      "assert max_of_two(-10,-20)==-10"
    ]
  },
  {
    "mbpp_id": 925,
    "problem_statement": "Write a python function to calculate the product of all the numbers of a given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'mutiple_tuple' is not defined",
      "Test 2: FAIL - name 'mutiple_tuple' is not defined",
      "Test 3: FAIL - name 'mutiple_tuple' is not defined"
    ],
    "generated_code": "def multiple_tuple(input_tuple):\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the tuple and multiply it with the current product\n    for num in input_tuple:\n        product *= num\n    \n    return product",
    "test_cases": [
      "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
      "assert mutiple_tuple((1,2,3)) == 6",
      "assert mutiple_tuple((-2,-4,-6)) == -48"
    ]
  },
  {
    "mbpp_id": 926,
    "problem_statement": "Write a function to find n-th rencontres number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'rendezvous_number' is not defined. Did you mean: 'rencontres_number'?"
    ],
    "generated_code": "def rencontres_number(n, k):\n    # Initialize base cases\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    \n    dp = [0] * (n + 1)\n    \n    # Base case initialization\n    dp[0], dp[1] = 1, 1\n    \n    # Fill the DP table\n    for i in range(2, n + 1):\n        dp[i] = sum(dp[:i - 1])\n        \n    # Calculate the result based on input parameters\n    return dp[k]\n\n# Example check function calls\nprint(rendezvous_number(7, 2))  # Expected output: 924\nprint(rendezvous_number(3, 0))  # Expected output: 2\nprint(rendezvous_number(3, 1))  # Expected output: 3",
    "test_cases": [
      "assert rencontres_number(7, 2) == 924",
      "assert rencontres_number(3, 0) == 2",
      "assert rencontres_number(3, 1) == 3"
    ]
  },
  {
    "mbpp_id": 927,
    "problem_statement": "Write a function to calculate the height of the given binary tree.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1",
    "test_cases": [
      "assert (max_height(root)) == 3",
      "assert (max_height(root1)) == 5 ",
      "assert (max_height(root2)) == 4"
    ]
  },
  {
    "mbpp_id": 928,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from datetime import datetime\n\ndef change_date_format(date_str):\n    return date_str.replace('-', '')\n\n# Test cases\nprint(change_date_format('2026-01-02'))  # Expected output: '02-01-2026'\nprint(change_date_format('2021-01-04'))  # Expected output: '04-01-2021'\nprint(change_date_format('2030-06-06'))  # Expected output: '06-06-2030'",
    "test_cases": [
      "assert change_date_format('2026-01-02')=='02-01-2026'",
      "assert change_date_format('2021-01-04')=='04-01-2021'",
      "assert change_date_format('2030-06-06')=='06-06-2030'"
    ]
  },
  {
    "mbpp_id": 929,
    "problem_statement": "Write a function to count repeated items of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_tuplex(tup, item):\n    return tup.count(item)",
    "test_cases": [
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
      "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
    ]
  },
  {
    "mbpp_id": 930,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # The pattern \"\\\\ba.*\\\\b\" will match strings where \"a\" is at the start of a word \n    # and is followed by zero or more characters before ending with a word boundary.\n    # This ensures we have exactly one 'a' followed by any number of 'b's in the middle.\n    if bool(re.search(r'\\ba.*\\b', text)):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the solution\nprint(text_match(\"msb\"))   # Expected output: Not matched!\nprint(text_match(\"a0c\"))   # Expected output: Found a match!\nprint(text_match(\"abbc\"))  # Expected output: Found a match!",
    "test_cases": [
      "assert text_match(\"msb\") == 'Not matched!'",
      "assert text_match(\"a0c\") == 'Found a match!'",
      "assert text_match(\"abbc\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 931,
    "problem_statement": "Write a function to calculate the sum of series 1³+2³+3³+….+n³.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    return total_sum\n\n# Test cases\nprint(sum_series(7))  # Expected output: 784\nprint(sum_series(5))  # Expected output: 225\nprint(sum_series(15)) # Expected output: 14400",
    "test_cases": [
      "assert sum_series(7)==784",
      "assert sum_series(5)==225",
      "assert sum_series(15)==14400"
    ]
  },
  {
    "mbpp_id": 932,
    "problem_statement": "Write a function to remove duplicate words from a given list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_duplic_list(words):\n    return list(set(words))\n\n# Test cases\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])) # ['Python', 'Exercises', 'Practice', 'Solution']\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])) # ['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])) # ['Python', 'Exercises', 'Practice', 'Solution', 'C++', 'C']",
    "test_cases": [
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
    ]
  },
  {
    "mbpp_id": 933,
    "problem_statement": "Write a function to convert camel case string to snake case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef camel_to_snake(camel_str):\n    # Use regular expression to insert an underscore before each uppercase letter and convert it to lowercase\n    snake_str = re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower()\n    return snake_str\n\n# Test cases\nprint(camel_to_snake('GoogleAssistant'))  # Expected output: google_assistant\nprint(camel_to_snake('ChromeCast'))      # Expected output: chrome_cast\nprint(camel_to_snake('QuadCore'))        # Expected output: quad_core",
    "test_cases": [
      "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
      "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
      "assert camel_to_snake('QuadCore') == 'quad_core'"
    ]
  },
  {
    "mbpp_id": 934,
    "problem_statement": "Write a function to find the nth delannoy number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import math\n\ndef dealnnoy_num(n, k):\n    \"\"\"\n    This function calculates the n-th Delannoy number given two parameters:\n    - n: The position in the sequence of numbers.\n    - k: The number of steps in each direction for which we want to calculate the number of paths.\n    \n    Returns the value of the n-th Delannoy number for given 'k'.\n    \"\"\"\n    # Calculate the binomial coefficient using math.comb\n    def combination(n, r):\n        return math.comb(n, r)\n    \n    # Calculate the Delannoy number based on combinatorial principles\n    result = combination(k + n, n) // (math.factorial(n) * math.factorial(k))\n    return result\n\n# Function to check if the solution is correct with provided test cases\ndef check_solution():\n    assert dealnnoy_num(3, 4) == 129, \"Test case 1 failed\"\n    assert dealnnoy_num(3, 3) == 63, \"Test case 2 failed\"\n    assert dealnnoy_num(4, 5) == 681, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert dealnnoy_num(3, 4) == 129",
      "assert dealnnoy_num(3, 3) == 63",
      "assert dealnnoy_num(4, 5) == 681"
    ]
  },
  {
    "mbpp_id": 935,
    "problem_statement": "Write a function to calculate the sum of series 1²+2²+3²+….+n².",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def series_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i**2\n    return total",
    "test_cases": [
      "assert series_sum(6)==91",
      "assert series_sum(7)==140",
      "assert series_sum(12)==650"
    ]
  },
  {
    "mbpp_id": 936,
    "problem_statement": "Write a function to re-arrange the given tuples based on the given ordered list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_tuples(tuples_list, order_list):\n    # Use zip and enumerate for better readability\n    sorted_tup = tuple(zip(order_list[::], map(lambda i: tuples_list[i][::-1], range(len(order_list)))))\n    return sorted_tup[::-1]",
    "test_cases": [
      "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
      "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
      "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
    ]
  },
  {
    "mbpp_id": 937,
    "problem_statement": "Write a function to count the most common character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_char(s):\n    # Initialize an empty dictionary to store character counts\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in s:\n        if char != ' ':  # Skip spaces\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Find and return the character with the maximum count\n    return max(char_count, key=char_count.get)",
    "test_cases": [
      "assert max_char(\"hello world\")==('l')",
      "assert max_char(\"hello \")==('l')",
      "assert max_char(\"python pr\")==('p')"
    ]
  },
  {
    "mbpp_id": 938,
    "problem_statement": "Write a function to find three closest elements from three sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_closet() missing 1 required positional argument: 'n3'",
      "Test 2: FAIL - find_closet() missing 1 required positional argument: 'n3'",
      "Test 3: FAIL - find_closet() missing 1 required positional argument: 'n3'"
    ],
    "generated_code": "def find_closet(arr1, arr2, arr3, target, n1, n2, n3):\n    i = j = k = 0\n    closet = float('inf')\n    \n    while i < n1 and j < n2 and k < n3:\n        if arr1[i] + arr2[j] + arr3[k] == target:\n            closet = min(closet, arr1[i] + arr2[j] + arr3[k])\n            i += 1\n            j += 1\n            k += 1\n        elif arr1[i] + arr2[j] + arr3[k] < target:\n            i += 1\n        else:\n            j += 1\n    \n    return closet",
    "test_cases": [
      "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
      "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
      "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
    ]
  },
  {
    "mbpp_id": 939,
    "problem_statement": "Write a function to sort a list of dictionaries using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sorted_models(mobiles):\n    # Sort the mobiles based on their color in ascending order and model in descending order\n    return sorted(mobiles, key=lambda x: (x['color'], -int(x['model'])))",
    "test_cases": [
      "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
      "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
      "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
    ]
  },
  {
    "mbpp_id": 940,
    "problem_statement": "Write a function to sort the given array by using heap sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < n and arr[i] < arr[left]:\n        largest = left\n        \n    if right < n and arr[largest] < arr[right]:\n        largest = right\n        \n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n        \n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n# Test cases\narr1 = [12, 2, 4, 5, 2, 3]\narr2 = [32, 14, 5, 6, 7, 19]\narr3 = [21, 15, 29, 78, 65]\n\nheap_sort(arr1)\nheap_sort(arr2)\nheap_sort(arr3)\n\nprint(arr1)  # Expected output: [2, 2, 3, 4, 5, 12]\nprint(arr2)  # Expected output: [5, 6, 7, 14, 19, 32]\nprint(arr3)  # Expected output: [15, 21, 29, 65, 78]",
    "test_cases": [
      "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
      "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
      "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
    ]
  },
  {
    "mbpp_id": 941,
    "problem_statement": "Write a function to count the elements in a list until an element is a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_elim(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count",
    "test_cases": [
      "assert count_elim([10,20,30,(10,20),40])==3",
      "assert count_elim([10,(20,30),(10,20),40])==1",
      "assert count_elim([(10,(20,30,(10,20),40))])==0"
    ]
  },
  {
    "mbpp_id": 942,
    "problem_statement": "Write a function to check if any list element is present in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(main_list, sub_list):\n    for item in sub_list:\n        if item in main_list:\n            return True\n    return False",
    "test_cases": [
      "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
      "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
      "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
    ]
  },
  {
    "mbpp_id": 943,
    "problem_statement": "Write a function to combine two given sorted lists using heapq module.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport heapq\n\ndef combine_lists(list1: List[int], list2: List[int]) -> List[int]:\n    # Initialize two heaps with list elements\n    hq1 = []\n    hq2 = []\n    \n    for item in list1:\n        heapq.heappush(hq1, -item)\n    for item in list2:\n        heapq.heappush(hq2, -item)\n\n    result_list = []\n    while len(result_list) < len(list1) + len(list2):\n        if not hq1 and not hq2:\n            break\n        \n        if hq1 and hq2:\n            val1 = -heapq.heappop(hq1)\n            val2 = -heapq.heappop(hq2)\n            result_list.append(val1)\n            result_list.append(val2)\n        elif hq1:\n            val = -heapq.heappop(hq1)\n            result_list.append(val)\n        else:\n            val = -heapq.heappop(hq2)\n            result_list.append(val)\n\n    return result_list",
    "test_cases": [
      "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
      "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
      "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
    ]
  },
  {
    "mbpp_id": 944,
    "problem_statement": "Write a function to separate and print the numbers and their position of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_position(input_string):\n    nums = []\n    for i, char in enumerate(input_string.replace(' ', '')):\n        if char.isdigit():\n            nums.append(int(char))\n    return len(nums)\n\n# Test cases\nprint(num_position(\"there are 70 flats in this apartment\"))  # Expected output: 10\nprint(num_position(\"every adult have 32 teeth\"))  # Expected output: 17\nprint(num_position(\"isha has 79 chocolates in her bag\"))  # Expected output: 9",
    "test_cases": [
      "assert num_position(\"there are 70 flats in this apartment\")==10",
      "assert num_position(\"every adult have 32 teeth\")==17",
      "assert num_position(\"isha has 79 chocolates in her bag\")==9"
    ]
  },
  {
    "mbpp_id": 945,
    "problem_statement": "Write a function to convert the given tuples into set.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_set(tup):\n    \"\"\"\n    Convert a tuple to a set.\n    \n    Args:\n        tup (tuple): The input tuple to be converted.\n        \n    Returns:\n        set: A set containing all unique elements from the input tuple.\n    \"\"\"\n    return set(tup)\n\n# Check function with provided data points\nassert tuple_to_set(('x', 'y', 'z')) == {'y', 'x', 'z'}, \"Test case 1 failed\"\nassert tuple_to_set(('a', 'b', 'c')) == {'c', 'a', 'b'}, \"Test case 2 failed\"\nassert tuple_to_set(('z', 'd', 'e')) == {'d', 'e', 'z'}, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
      "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
      "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
    ]
  },
  {
    "mbpp_id": 946,
    "problem_statement": "Write a function to find the most common elements and their counts of a specified text.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def most_common_elem(text, n):\n    from collections import Counter\n    return list(Counter(text).most_common(n))",
    "test_cases": [
      "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
    ]
  },
  {
    "mbpp_id": 947,
    "problem_statement": "Write a python function to find the length of the shortest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find and return the length of the shortest word in the list\n    return min(len(word) for word in words)",
    "test_cases": [
      "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
      "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
    ]
  },
  {
    "mbpp_id": 948,
    "problem_statement": "Write a function to get an item of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_item(tup, index):\n    return tup[index]",
    "test_cases": [
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
    ]
  },
  {
    "mbpp_id": 949,
    "problem_statement": "Write a function to sort the given tuple list basis the total digits in tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_list(lst):\n    # Sort the list based on the sum of elements in each tuple using key=lambda.\n    lst.sort(key=sum)\n    return lst",
    "test_cases": [
      "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
      "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
      "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
    ]
  },
  {
    "mbpp_id": 950,
    "problem_statement": "Write a function to display sign of the chinese zodiac for given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def chinese_zodiac(year):\n    # Define the Chinese zodiac cycle\n    zodiac_cycle = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat']\n    \n    # Calculate the index in the zodiac cycle using modulo operation with length of cycle\n    index = (year % 12) - 1\n    \n    # Return the corresponding zodiac animal from the cycle\n    return zodiac_cycle[index]\n\n# Test cases\nprint(chinese_zodiac(1997))  # Output should be ('Ox')\nprint(chinese_zodiac(1998))  # Output should be ('Tiger')\nprint(chinese_zodiac(1994))  # Output should be ('Dog')",
    "test_cases": [
      "assert chinese_zodiac(1997)==('Ox')",
      "assert chinese_zodiac(1998)==('Tiger')",
      "assert chinese_zodiac(1994)==('Dog')"
    ]
  },
  {
    "mbpp_id": 951,
    "problem_statement": "Write a function to find the maximum of similar indices in two lists of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_similar_indices(list1, list2):\n    result = []\n    for i, j in zip(list1, list2):\n        if i == j:\n            result.append((i, j))\n    return result",
    "test_cases": [
      "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
      "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
      "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
    ]
  },
  {
    "mbpp_id": 952,
    "problem_statement": "Write a function to compute the value of ncr mod p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'nCr_mod_p' is not defined",
      "Test 2: FAIL - name 'nCr_mod_p' is not defined",
      "Test 3: FAIL - name 'nCr_mod_p' is not defined"
    ],
    "generated_code": "from math import comb\n\ndef ncr_mod_p(n, r, p):\n    # Calculate nCr and then take modulo with p\n    result = comb(n, r)\n    return result % p",
    "test_cases": [
      "assert nCr_mod_p(10, 2, 13) == 6",
      "assert nCr_mod_p(11, 3, 14) == 11",
      "assert nCr_mod_p(18, 14, 19) == 1"
    ]
  },
  {
    "mbpp_id": 953,
    "problem_statement": "Write a python function to find the minimun number of subsets with distinct elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def subset(arr,n):\n    # Initialize count to keep track of distinct subsets\n    count = 0\n    \n    # Loop through each element in the array\n    for i in range(n):\n        # If current element is different from previous one and it's not already counted as part of a subset,\n        if arr[i] != arr[i-1] and arr[i-1] < arr[i]:\n            # Increment count\n            count += 1\n            \n    # Return the total count of unique subsets\n    return count",
    "test_cases": [
      "assert subset([1, 2, 3, 4],4) == 1",
      "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
      "assert subset([1, 2, 3 ],3) == 1"
    ]
  },
  {
    "mbpp_id": 954,
    "problem_statement": "Write a function that gives profit amount if the given amount has profit else return none.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def profit_amount(sale_price, cost_price):\n    # Calculate profit amount and check if it is non-zero.\n    profit = sale_price - cost_price\n    # Return the profit amount if non-zero, otherwise return None.\n    return profit if profit > 0 else None",
    "test_cases": [
      "assert profit_amount(1500,1200)==300",
      "assert profit_amount(100,200)==None",
      "assert profit_amount(2000,5000)==None"
    ]
  },
  {
    "mbpp_id": 955,
    "problem_statement": "Write a function to find out, if the given number is abundant.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_abundant(n):\n    sum_of_divisors = sum([i for i in range(1, n) if n % i == 0])\n    return sum_of_divisors > n",
    "test_cases": [
      "assert is_abundant(12)==True",
      "assert is_abundant(13)==False",
      "assert is_abundant(9)==False"
    ]
  },
  {
    "mbpp_id": 956,
    "problem_statement": "Write a function to split the given string at uppercase letters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef split_list(s):\n    # Use regex to find all occurrences of an uppercase letter followed by a lowercase letter and capture it in a group.\n    pattern = r'(?<=[a-z])(?=[A-Z])'\n    result = re.split(pattern, s)\n    return result\n\n# Test cases\nprint(split_list(\"LearnToBuildAnythingWithGoogle\"))  # Should return ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nprint(split_list(\"ApmlifyingTheBlack+DeveloperCommunity\"))  # Should return ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nprint(split_list(\"UpdateInTheGoEcoSystem\"))  # Should return ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
    "test_cases": [
      "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
      "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
      "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
    ]
  },
  {
    "mbpp_id": 957,
    "problem_statement": "Write a python function to get the position of rightmost set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_First_Set_Bit_Pos(number):\n    # Loop through all bits from least significant to most significant\n    for i in range(32):\n        # Check if the current bit is set (1)\n        if (number & (1 << i)) != 0:\n            # Return the index of the first set bit\n            return i\n    return -1  # In case there are no set bits found, though it shouldn't happen for positive numbers\n\n# Test the function with provided data points\nprint(get_First_Set_Bit_Pos(12))   # Expected output: 3\nprint(get_First_Set_Bit_Pos(18))   # Expected output: 2\nprint(get_First_Set_Bit_Pos(16))   # Expected output: 5",
    "test_cases": [
      "assert get_First_Set_Bit_Pos(12) == 3",
      "assert get_First_Set_Bit_Pos(18) == 2",
      "assert get_First_Set_Bit_Pos(16) == 5"
    ]
  },
  {
    "mbpp_id": 958,
    "problem_statement": "Write a function to convert an integer into a roman numeral.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def int_to_roman(num):\n    value = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbol = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // value[i]):\n            roman_num += symbol[i]\n            num -= value[i]\n        i += 1\n    return roman_num",
    "test_cases": [
      "assert int_to_roman(1)==(\"I\")",
      "assert int_to_roman(50)==(\"L\")",
      "assert int_to_roman(4)==(\"IV\")"
    ]
  },
  {
    "mbpp_id": 959,
    "problem_statement": "Write a python function to find the average of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Average' is not defined",
      "Test 2: FAIL - name 'Average' is not defined",
      "Test 3: FAIL - name 'Average' is not defined"
    ],
    "generated_code": "def average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    if count == 0:\n        return 0\n    else:\n        return round(total / count, 2)\n\n# Test cases\nprint(average([15, 9, 55, 41, 35, 20, 62, 49]))  # Expected output: 35.75\nprint(average([4, 5, 1, 2, 9, 7, 10, 8]))  # Expected output: 5.75\nprint(average([1,2,3]))  # Expected output: 2",
    "test_cases": [
      "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
      "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
      "assert Average([1,2,3]) == 2"
    ]
  },
  {
    "mbpp_id": 960,
    "problem_statement": "Write a function to solve tiling problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_noOfways(n):\n    if n <= 2:\n        return n\n    \n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2] = 0, 1, 2\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    \n    return dp[n]\n\n# Test cases\nprint(get_noOfways(4))  # Expected output: 3\nprint(get_noOfways(3))  # Expected output: 2\nprint(get_noOfways(5))  # Expected output: 5",
    "test_cases": [
      "assert get_noOfways(4)==3",
      "assert get_noOfways(3)==2",
      "assert get_noOfways(5)==5"
    ]
  },
  {
    "mbpp_id": 961,
    "problem_statement": "Write a function to convert a roman numeral to an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def roman_to_int(s):\n    \"\"\"\n    Converts a Roman numeral string to an integer.\n    \n    Parameters:\n    s (str): A string representing a Roman numeral.\n    \n    Returns:\n    int: The integer value of the Roman numeral.\n    \"\"\"\n    # Mapping of Roman numerals to integers\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50,\n               'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        current_value = rom_val[char]\n        if current_value < prev_value:\n            total -= current_value\n        else:\n            total += current_value\n        prev_value = current_value\n    \n    return total",
    "test_cases": [
      "assert roman_to_int('MMMCMLXXXVI')==3986",
      "assert roman_to_int('MMMM')==4000",
      "assert roman_to_int('C')==100"
    ]
  },
  {
    "mbpp_id": 962,
    "problem_statement": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_cases": [
      "assert sum_Even(2,5) == 6",
      "assert sum_Even(3,8) == 18",
      "assert sum_Even(4,6) == 10"
    ]
  },
  {
    "mbpp_id": 963,
    "problem_statement": "Write a function to calculate the discriminant value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - division by zero"
    ],
    "generated_code": "def discriminant_value(a,b,c):\n    if b**2 - 4*a*c > 0:\n        return \"two solutions\", (-b + ((-b)**2 - 4*a*c)**0.5) / (2*a), (-b - ((-b)**2 - 4*a*c)**0.5) / (2*a)\n    elif b**2 - 4*a*c == 0:\n        return \"one solution\", -b / (2*a)\n    else:\n        return \"no real solution\", None",
    "test_cases": [
      "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
      "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
      "assert discriminant_value(0,0,9)==(\"one solution\",0)"
    ]
  },
  {
    "mbpp_id": 964,
    "problem_statement": "Write a python function to check whether the length of the word is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    \"\"\"\n    This function checks if the length of the given word is even.\n    \n    Parameters:\n        word (str): The input word whose length is to be checked.\n        \n    Returns:\n        bool: True if the length of the word is even, False otherwise.\n    \"\"\"\n    # Check if the length of the word is divisible by 2\n    return len(word) % 2 == 0",
    "test_cases": [
      "assert word_len(\"program\") == False",
      "assert word_len(\"solution\") == True",
      "assert word_len(\"data\") == True"
    ]
  },
  {
    "mbpp_id": 965,
    "problem_statement": "Write a function to convert camel case string to snake case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def camel_to_snake(s):\n    # Split the input string into words based on uppercase letters\n    words = s.split()\n    \n    # Initialize an empty list for the result\n    result = []\n    \n    # Iterate over each word in the split list\n    for word in words:\n        # If the word starts with an uppercase letter, append an underscore followed by lowercase version of it\n        if word[0].isupper():\n            result.append('_' + word.lower())\n        else:\n            # Otherwise, just add the original word as is\n            result.append(word)\n    \n    # Join all elements in the result list to form the final snake case string\n    return ''.join(result)\n\n# Test cases\nprint(camel_to_snake('PythonProgram'))  # Output: python_program\nprint(camel_to_snake('pythonLanguage'))  # Output: python_language\nprint(camel_to_snake('ProgrammingLanguage'))  # Output: programming_language",
    "test_cases": [
      "assert camel_to_snake('PythonProgram')==('python_program')",
      "assert camel_to_snake('pythonLanguage')==('python_language')",
      "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
    ]
  },
  {
    "mbpp_id": 966,
    "problem_statement": "Write a function to remove an empty tuple from a list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    return [item for item in lst if item != ()]\n\n# Test cases\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])) # should output [('a', 'b', 'c'), ('d')]\nprint(remove_empty([(), (), ('',), (\"python\"), (\"program\")])) # should output [('python'), ('program')]\nprint(remove_empty([(), (), ('',), (\"java\")])) # should output [('java')]",
    "test_cases": [
      "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
      "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
      "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
    ]
  },
  {
    "mbpp_id": 967,
    "problem_statement": "Write a python function to accept the strings which contains all vowels.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(s):\n    # Check if the string has at least one vowel and all vowels are present\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    for char in s:\n        if char.lower() not in vowels:\n            return \"not accepted\"\n    return \"accepted\"\n\n# Test cases\nprint(check(\"SEEquoiaL\"))  # Output: accepted\nprint(check('program'))   # Output: not accepted\nprint(check('fine'))      # Output: not accepted",
    "test_cases": [
      "assert check(\"SEEquoiaL\") == 'accepted'",
      "assert check('program') == \"not accepted\"",
      "assert check('fine') == \"not accepted\""
    ]
  },
  {
    "mbpp_id": 968,
    "problem_statement": "Write a python function to find maximum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def floor_Max(a, b, c):\n    # Find the largest of the three numbers\n    max_num = max(a, b, c)\n    # Return the largest number modulo 3\n    return max_num % 3",
    "test_cases": [
      "assert floor_Max(11,10,9) == 9",
      "assert floor_Max(5,7,4) == 2",
      "assert floor_Max(2,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 969,
    "problem_statement": "Write a function to join the tuples if they have similar initial elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def join_tuples(tuples_list):\n    sorted_tup = []\n    for tup in tuples_list:\n        # Sort each tuple by the first element and add it to the list\n        sorted_tup.append(tuple(sorted(tup)))\n    \n    # Remove duplicates based on the sorted first element of each tuple\n    unique_sorted = set(map(tuple, sorted_tup))\n    \n    # Convert back to list\n    joined_tuples = [list(x) for x in unique_sorted]\n    \n    return joined_tuples\n\n# Test cases\nprint(join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]))  # Expected output: [(5, 6, 7), (6, 8, 10), (7, 13)]\nprint(join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)]))   # Expected output: [(6, 7, 8), (7, 9, 11), (8, 14)]\nprint(join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)]))  # Expected output: [(7, 8, 9), (8, 10, 12), (9, 15)]",
    "test_cases": [
      "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
      "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
      "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
    ]
  },
  {
    "mbpp_id": 970,
    "problem_statement": "Write a function to find minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_two(x, y):\n    return min(x, y)",
    "test_cases": [
      "assert min_of_two(10,20)==10",
      "assert min_of_two(19,15)==15",
      "assert min_of_two(-10,-20)==-20"
    ]
  },
  {
    "mbpp_id": 971,
    "problem_statement": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_segments(n, a, b, c):\n    # Calculate the maximum segments possible with the given conditions\n    max_segments = min(a // n, b // n, c // n)\n    if n * max_segments >= a + b + c:\n        return n * max_segments\n    else:\n        remaining = a + b + c - n * max_segments\n        segments_with_extra_parts = min(max(a % n, b % n), c % n)\n        return n * max_segments + segments_with_extra_parts\n\n# Test cases\nprint(maximum_segments(7, 5, 2, 5))  # Expected output: 2\nprint(maximum_segments(17, 2, 1, 3))  # Expected output: 17\nprint(maximum_segments(18, 16, 3, 6))  # Expected output: 6",
    "test_cases": [
      "assert maximum_segments(7, 5, 2, 5) == 2",
      "assert maximum_segments(17, 2, 1, 3) == 17",
      "assert maximum_segments(18, 16, 3, 6) == 6"
    ]
  },
  {
    "mbpp_id": 972,
    "problem_statement": "Write a function to concatenate the given two tuples to a nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_nested(tuple1, tuple2):\n    # Concatenate the given two tuples and create a new nested tuple\n    return (tuple1 + tuple2)\n\n# Test cases\nprint(concatenate_nested((3, 4), (5, 6)))  # Expected output: (3, 4, 5, 6)\nprint(concatenate_nested((1, 2), (3, 4)))  # Expected output: (1, 2, 3, 4)\nprint(concatenate_nested((4, 5), (6, 8)))  # Expected output: (4, 5, 6, 8)",
    "test_cases": [
      "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
      "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
      "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
    ]
  },
  {
    "mbpp_id": 973,
    "problem_statement": "Write a python function to left rotate the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_rotate(string, n):\n    return string[n:] + string[:n]\n\n# Test cases\nprint(left_rotate(\"python\", 2)) # Expected output: \"thonpy\"\nprint(left_rotate(\"bigdata\", 3)) # Expected output: \"databig\"\nprint(left_rotate(\"hadoop\", 1)) # Expected output: \"adooph\"",
    "test_cases": [
      "assert left_rotate(\"python\",2) == \"thonpy\"   ",
      "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
      "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
    ]
  },
  {
    "mbpp_id": 974,
    "problem_statement": "Write a function to find the minimum total path sum in the given triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef min_sum_path(triangle: List[List[int]]) -> int:\n    if not triangle:\n        return 0\n    \n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1])\n    \n    return triangle[0][0]\n\n# Test cases\nprint(min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]])) # Expected output: 6\nprint(min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]])) # Expected output: 10\nprint(min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]])) # Expected output: 9",
    "test_cases": [
      "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
      "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
      "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Sum(num):\n    min_sum = num - 1  # Start with the smallest possible sum as the first factor\n    \n    for i in range(2, int(num ** 0.5) + 1):  # Check divisibility from 2 up to sqrt(num)\n        if num % i == 0:\n            min_sum -= i  # Subtract the smaller factor from the total sum\n            while num % i == 0:  # Continue dividing by the found factor until it's no longer divisible\n                num //= i\n            \n            if num == 1:\n                break\n                \n            min_sum += num - 1  # Add the remaining number to the sum since all its divisors were already subtracted\n    \n    return min_sum",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(tup):\n    freq_dict = {}\n    for item in tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                if sub_item not in freq_dict:\n                    freq_dict[sub_item] = 1\n                else:\n                    freq_dict[sub_item] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'str'"
    ],
    "generated_code": "def add_str(lst, str_):\n    \"\"\"\n    This function takes a list and a string as input.\n    It adds the given string after each element of the list.\n    The result is returned as a new list with strings appended to it.\n    \n    :param lst: List of elements\n    :param str_: String to be added after each element in the list\n    :return: A new list with original elements followed by the specified string for each one\n    \n    Example usage:\n    >>> add_str([5, 6, 7, 4, 9], \"FDF\")\n    ['5', 'FDF', '6', 'FDF', '7', 'FDF', '4', 'FDF', '9', 'FDF']\n    >>> add_str([7, 8, 9, 10], \"PF\")\n    ['7', 'PF', '8', 'PF', '9', 'PF', '10', 'PF']\n    >>> add_str([11, 14, 12, 1, 4], \"JH\")\n    ['11', 'JH', '14', 'JH', '12', 'JH', '1', 'JH', '4', 'JH']\n    \"\"\"\n    return [item + str_ for item in lst]\n\n# Test cases to verify the correctness of the function\nassert add_str([5, 6, 7, 4, 9], \"FDF\") == ['5', 'FDF', '6', 'FDF', '7', 'FDF', '4', 'FDF', '9', 'FDF']\nassert add_str([7, 8, 9, 10], \"PF\") == ['7', 'PF', '8', 'PF', '9', 'PF', '10', 'PF']\nassert add_str([11, 14, 12, 1, 4], \"JH\") == ['11', 'JH', '14', 'JH', '12', 'JH', '1', 'JH', '4', 'JH']\n\nprint(\"All test cases passed successfully.\")",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(tuple_list):\n    total_sum = 0\n    for element in tuple_list:\n        if isinstance(element, int) or isinstance(element, float): # check if it's an integer or floating point number\n            total_sum += element\n    return total_sum\n\n# Test cases\nprint(sum_elements((7, 8, 9, 1, 10, 7)))  # Expected output: 42\nprint(sum_elements((1, 2, 3, 4, 5, 6)))   # Expected output: 21\nprint(sum_elements((11, 12, 13, 45, 14))) # Expected output: 95",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef modular_sum(nums: List[int], mod: int, target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of nums whose sum is divisible by mod and equals target.\n    \n    :param nums: List of integers representing the set.\n    :param mod: Integer value for modulo operation.\n    :param target: Target integer to find in terms of divisibility by mod and equality.\n    :return: Boolean indicating whether such a subset exists.\n    \"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    \n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n                \n    return dp[target]\n\n# Example usage:\nprint(modular_sum([3, 1, 7, 5], 4, 6))  # Expected output: True\nprint(modular_sum([1, 7], 2, 5))       # Expected output: False\nprint(modular_sum([1, 6], 2, 5))       # Expected output: False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(lst):\n    max_num = max(lst)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort_by_digit(lst, exp)\n        exp *= 10\n    return lst\n\ndef counting_sort_by_digit(arr, digit_index):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n\n    for i in range(n):\n        index = arr[i] // digit_index\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // digit_index\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n\n    for i in range(n):\n        arr[i] = output[i]\n\n# Test cases\nprint(radix_sort([15, 79, 25, 68, 37])) # Expected output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2])) # Expected output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29])) # Expected output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(lst):\n    max_num = -float('inf')\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n# Test cases\nprint(largest_pos([1,2,3,4,-1]))  # Output: 4\nprint(largest_pos([0,1,2,-5,-1,6]))  # Output: 6\nprint(largest_pos([0,0,1,0]))  # Output: 1",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(num):\n    \"\"\"\n    This function takes an integer num and returns its square root.\n    \n    :param num: An integer whose square root is to be found.\n    :return: The square root of the given number as a float.\n    \"\"\"\n    return math.sqrt(num)",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_tetrahedron(side_length):\n    \"\"\"\n    Calculate the volume of a regular tetrahedron given its side length.\n    \n    Parameters:\n    side_length (float): The length of each edge of the tetrahedron.\n    \n    Returns:\n    float: The volume of the tetrahedron.\n    \"\"\"\n    return (math.sqrt(2) / 12) * pow(side_length, 3)\n\n# Test cases to verify the correctness of the function\nassert abs(volume_tetrahedron(10) - 117.85) < 0.01\nassert abs(volume_tetrahedron(15) - 397.75) < 0.01\nassert abs(volume_tetrahedron(20) - 942.81) < 0.01\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from functools import reduce\nfrom operator import mul\n\ndef get_lcm(arr):\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    from math import gcd\n    \n    # Calculate the product of all elements in the array and then divide by their GCD\n    result = reduce(mul, arr) // gcd(*arr)\n    return result\n\n# Test cases\nprint(get_lcm([2, 7, 3, 9, 4]))  # Expected output: 252\nprint(get_lcm([1, 2, 8, 3]))     # Expected output: 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Expected output: 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides are of different lengths\n    return len(set([a, b, c])) == 3\n\n# Test cases\nprint(check_isosceles(6, 8, 12))   # Expected output: True\nprint(check_isosceles(6, 6, 12))   # Expected output: False\nprint(check_isosceles(6, 15, 20))  # Expected output: True",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lbs(arr):\n    n = len(arr)\n    \n    # Initialize variables\n    left_max = [1] * n\n    right_min = [1] * n\n    \n    # Calculate maximum length of increasing subsequence from the left side\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                left_max[i] = max(left_max[i], left_max[j] + 1)\n                \n    # Calculate minimum length of decreasing subsequence from the right side\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] < arr[j]:\n                right_min[i] = min(right_min[i], right_min[j] + 1)\n                \n    result = 0\n    for i in range(n):\n        result = max(result, left_max[i] + right_min[i] - 1)\n        \n    return result\n\n# Test cases\nprint(lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]))  # Should return 7\nprint(lbs([1, 11, 2, 10, 4, 5, 2, 1]))  # Should return 6\nprint(lbs([80, 60, 30, 40, 20, 10]))  # Should return 5",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(s):\n    result = []\n    if len(s) < 8:\n        result.append(\"String length should be atleast 8.\")\n    elif not s.islower():\n        result.append(\"String must have 1 upper case character.\")\n    else:\n        for char in s:\n            if char.isdigit():\n                result.append(\"String must have 1 number.\")\n                break\n        else:\n            result.append(\"String must have 1 upper case character.\")\n    return result",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: max_sum_increasing_subsequence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\nimport bisect\n\ndef max_sum_increasing_subsequence(nums: List[int]) -> int:\n    n = len(nums)\n    \n    # Initialize prefix sums and indices for binary search\n    ps = [nums[0]]\n    idxs = [-1] * n\n    \n    # Fill prefix sums and their respective index positions in the sorted list\n    for i in range(1, n):\n        if nums[i] > ps[-1]:\n            ps.append(nums[i])\n            idxs[i] = bisect.bisect_left(ps, nums[i])\n        else:\n            ps[idxs[i]] = nums[i]\n            \n    return sum(ps)\n\n# Test cases\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Expected output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))              # Expected output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))              # Expected output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def is_parallel_line(line1, line2):\n    \"\"\"\n    Checks if two lines are parallel based on their direction vectors.\n    \n    Parameters:\n    - line1: A list of three integers representing the first line in the form [x0, y0, z0].\n    - line2: A list of three integers representing the second line in the form [x1, y1, z1].\n    \n    Returns:\n    - True if the lines are parallel, False otherwise.\n    \"\"\"\n    # Calculate direction vectors for both lines\n    dir_vec1 = [line1[0] - line1[2], line1[1] - line1[2]]\n    dir_vec2 = [line2[0] - line2[2], line2[1] - line2[2]]\n\n    # Check if direction vectors are scalar multiples of each other\n    return dir_vec1[0] * dir_vec2[0] == dir_vec1[1] * dir_vec2[1]\n\n# Test cases\nprint(is_parallel_line([2,3,4], [2,3,8]))  # Expected output: True\nprint(is_parallel_line([2,3,4], [4,-3,8]))  # Expected output: False\nprint(is_parallel_line([3,3],[5,5]))        # Expected output: True",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def capitalize_first_last_letters(input_string):\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Iterate over each word in the list\n    for i in range(len(words)):\n        # Capitalize the first letter and last letter of each word\n        if len(words[i]) > 0:\n            words[i] = words[i][0].upper() + words[i][1:-1] + words[i][-1].upper()\n    \n    # Join the processed words back into a single string with spaces between them\n    result_string = ' '.join(words)\n    \n    return result_string",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pairs_count(nums, target_sum, pair_sum):\n    count = 0\n    num_set = set()\n    \n    for num in nums:\n        complement = target_sum - num\n        if complement in num_set:\n            count += 1\n        else:\n            num_set.add(num)\n    \n    return count * 2  # Since we counted each pair twice\n    \n# Example usage\nprint(get_pairs_count([1, 5, 7, -1, 5], 5, 6))  # Output: 3\nprint(get_pairs_count([1, 5, 7, -1], 4, 6))     # Output: 2\nprint(get_pairs_count([1, 1, 1, 1], 4, 2))       # Output: 6",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'Tuple' is not defined. Did you mean: 'tuple'?"
    ],
    "generated_code": "from typing import List\nimport numpy as np\n\ndef min_length(lists: List[List[int]]) -> Tuple[int, List[List[int]]]:\n    # Convert the input into a NumPy array for efficient computation\n    arr = np.array(lists)\n    \n    # Find the index of the smallest length among all sublists\n    min_index = np.argmin(arr.shape)\n    \n    # Extract the sublist at the found index and convert it back to a list\n    result = [list(sub) for sub in lists[min_index]]\n    \n    return len(result), result",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(arr):\n    # Initialize count of negative numbers\n    neg_count = sum(1 for num in arr if num < 0)\n    \n    # Calculate and return the ratio of negative numbers\n    return neg_count / len(arr)\n\n# Test cases\nprint(negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))  # Expected output: 0.31\nprint(negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))   # Expected output: 0.31\nprint(negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))          # Expected output: 0.44",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef min_coins(coins: List[int], amount: int, total_coins: int) -> int:\n    # Initialize a list to store the minimum coins needed for each possible coin value up to total_coins\n    dp = [float('inf')] * (total_coins + 1)\n    dp[0] = 0  # Base case: 0 coins needed to make an amount of 0\n    \n    # Iterate over each coin and update the DP table\n    for coin in coins:\n        for x in range(coin, total_coins + 1):\n            if x >= coin:\n                dp[x] = min(dp[x], dp[x - coin] + 1)\n    \n    return dp[-1]",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_permutation(str1, str2):\n    \"\"\"\n    This function checks if two strings are permutations of each other.\n    \n    Parameters:\n    str1 (str): The first string.\n    str2 (str): The second string.\n    \n    Returns:\n    bool: True if str1 and str2 are permutations of each other, False otherwise.\n    \"\"\"\n    # Check if the lengths of both strings are equal\n    if len(str1) != len(str2):\n        return False\n    \n    # Create dictionaries to count occurrences of characters in both strings\n    counter1 = {}\n    counter2 = {}\n    \n    for char in str1:\n        counter1[char] = counter1.get(char, 0) + 1\n    for char in str2:\n        counter2[char] = counter2.get(char, 0) + 1\n    \n    # Compare the two counters\n    return counter1 == counter2\n\n# Example usage\nprint(check_permutation(\"abc\", \"cba\"))  # Expected output: True\nprint(check_permutation(\"test\", \"ttew\"))  # Expected output: False\nprint(check_permutation(\"xxyz\", \"yxzx\"))  # Expected output: True",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    # Remove all occurrences of the specified data type from the tuple\n    result = tuple(element for element in tup if not isinstance(element, datatype))\n    return result",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(text, literal):\n    start = text.find(literal)\n    return start, start + len(literal)\n\n# Test cases\nprint(search_literal('python', 'python programming language')) # Output should be (0, 6)\nprint(search_literal('programming', 'python programming language')) # Output should be (7, 18)\nprint(search_literal('language', 'python programming language')) # Output should be (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef topbottom_surfacearea(radius):\n    # Calculate and return the top and bottom surface area of the cylinder\n    return 2 * math.pi * radius ** 2\n\n# Test cases\nassert abs(topbottom_surfacearea(10) - 314.15) < 1e-5\nassert abs(topbottom_surfacearea(5) - 78.5375) < 1e-5\nassert abs(topbottom_surfacearea(4) - 50.264) < 1e-5",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(s):\n    words = s.split()\n    seen_words = set()\n\n    for word in words:\n        if word in seen_words:\n            return word\n        else:\n            seen_words.add(word)\n\n    return None",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    \"\"\"\n    Converts a list of characters into a tuple.\n    \n    Args:\n    string_list (list): A list containing strings as elements\n    \n    Returns:\n    tuple: A tuple converted from the list of strings.\n    \"\"\"\n    # Joining all elements in the list into one string and then converting it to a tuple\n    return tuple(''.join(string_list))\n\n# Test cases to verify the correctness of the function\nassert string_list_to_tuple([\"python 3.0\"]) == (\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\")\nassert string_list_to_tuple([\"bigdata\"]) == (\"b\", \"i\", \"g\", \"d\", \"a\", \"t\", \"a\")\nassert string_list_to_tuple([\"language\"]) == (\"l\", \"a\", \"n\", \"g\", \"u\", \"a\", \"g\", \"e\")\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef basesnum_correspondingnum(bases: List[int], nums: List[int]) -> List[int]:\n    return [math.pow(base, num) for base, num in zip(bases, nums)]",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Diff(arr, n):\n    max_freq = 0\n    min_freq = float('inf')\n    \n    for num in arr:\n        if num > 0:\n            count = arr.count(num)\n            if count > max_freq:\n                max_freq = count\n            elif count < min_freq:\n                min_freq = count\n    \n    return max_freq - min_freq",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(n):\n    sum_of_divisors = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors > n\n\n# Test cases\nprint(check_abundant(12))  # Expected output: True\nprint(check_abundant(15))  # Expected output: False\nprint(check_abundant(18))  # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(s):\n    # Replace spaces, commas, and dots with colons\n    result = re.sub(r'[ ,.]', ':', s)\n    return result\n\n# Test cases\nprint(fill_spaces('Boult Curve Wireless Neckband'))  # Expected output: 'Boult:Curve:Wireless:Neckband'\nprint(fill_spaces('Stereo Sound Sweatproof'))       # Expected output: 'Stereo:Sound:Sweatproof'\nprint(fill_spaces('Probass Curve Audio'))           # Expected output: 'Probass:Curve:Audio'",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(a, b):\n    # Add two numbers\n    total = a + b\n    \n    # Convert the total to a string to iterate over each digit\n    str_total = str(total)\n    \n    # Count the number of digits in the total\n    num_digits = len(str_total)\n    \n    return num_digits",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(tuples_list):\n    \"\"\"\n    Flattens a list of tuples into a single string.\n    \n    Args:\n    tuples_list (list): A list of tuples where each tuple contains integers.\n    \n    Returns:\n    str: A string containing all elements from the tuples separated by spaces.\n    \"\"\"\n    # Flatten the list and join with space\n    flattened_string = ''.join(str(x) for sublist in tuples_list for x in sublist)\n    return flattened_string",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Toggle the first bit and last bit separately\n    first_bit = n & (-n)\n    last_bit = n >> (len(bin(n))-2)\n    \n    # XOR the results with the original number to flip them\n    result = n ^ first_bit ^ last_bit\n    \n    return result\n\n# Test cases\nprint(toggle_F_and_L_bits(10))   # Expected output: 3\nprint(toggle_F_and_L_bits(15))   # Expected output: 6\nprint(toggle_F_and_L_bits(20))   # Expected output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, c):\n    for i in range(len(s)-1,-1,-1):\n        if s[i] == c:\n            return i\n    return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Total_Hamming_Distance(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            total_sum += bin(j - i).count('1')\n    return total_sum",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    \"\"\"\n    Finds the length of the longest increasing subsequence in the given sequence.\n    \n    Parameters:\n    sequence (list): A list of integers representing the sequence.\n    \n    Returns:\n    int: The length of the longest increasing subsequence.\n    \"\"\"\n    if not sequence:\n        return 0\n    \n    n = len(sequence)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)\n\n# Check function with provided data points\nassert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    \"\"\"\n    This function calculates the sum of the fifth power of the first n odd natural numbers.\n    \n    Parameters:\n    n (int): The number of initial odd natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fifth powers of these numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        total_sum += pow(odd_number, 5)\n    return total_sum",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    if start > end:\n        raise ValueError(\"Invalid input range\")\n    \n    mid = (start + end) // 2\n    \n    # Check if mid is the maximum element\n    if (mid == 0 or arr[mid] > arr[mid - 1]) and (mid == len(arr) - 1 or arr[mid] > arr[mid + 1]):\n        return arr[mid]\n    \n    # Decide whether to go left or right\n    if arr[start] < arr[end]:\n        return arr[end]\n    \n    if arr[mid] >= arr[start]:\n        return find_Max(arr, mid + 1, end)\n    else:\n        return find_Max(arr, start, mid - 1)\n\n# Test cases\nprint(find_Max([2,3,5,6,9],0,4))  # Expected output: 9\nprint(find_Max([3,4,5,2,1],0,4))  # Expected output: 5\nprint(find_Max([1,2,3],0,2))      # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(matrix, col_index):\n    return [row[col_index] for row in matrix]\n\n# Test cases to verify the correctness of the function\nprint(extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))  # Expected output: [1, 2, 1]\nprint(extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))  # Expected output: [3, -5, 1]\nprint(extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))  # Expected output: [1, 5, 1, 13, 5, 9]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Seq_Linear' is not defined",
      "Test 2: FAIL - name 'Seq_Linear' is not defined",
      "Test 3: FAIL - name 'Seq_Linear' is not defined"
    ],
    "generated_code": "def seq_linear(sequence):\n    if len(set(sequence)) == 1:\n        return \"Linear Sequence\"\n    else:\n        return \"Non Linear Sequence\"\n\n# Test Cases\nprint(seq_linear([0,2,4,6,8,10])) # Expected output: 'Linear Sequence'\nprint(seq_linear([1,2,3])) # Expected output: 'Linear Sequence'\nprint(seq_linear([1,5,2])) # Expected output: 'Non Linear Sequence'",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert the first element of the tuple to float and join it with the second element.\n    result = f\"{tup[0]}.{str(tup[1])}\"\n    # Convert the resulting string into a float type and return it.\n    return float(result)\n\n# Test cases\nprint(tuple_to_float((4, 56)))  # Output: 4.56\nprint(tuple_to_float((7, 256)))  # Output: 7.256\nprint(tuple_to_float((8, 123)))  # Output: 8.123",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    \"\"\"\n    Returns a new list containing all the odd numbers from the input list.\n    \n    :param lst: List of integers\n    :return: A list of odd integers from the input list\n    \"\"\"\n    return [num for num in lst if num % 2 != 0]\n\n# Check function with provided data points\nassert split([1,2,3,4,5,6]) == [1,3,5], \"Test case 1 failed\"\nassert split([10,11,12,13]) == [11,13], \"Test case 2 failed\"\nassert split([7,8,9,1]) == [7,9,1], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers using the formula:\n    # sum_of_cubes = n*(n+1)*(2*n+1)/6\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the sum of first n natural numbers using the formula:\n    # sum_of_numbers = n*(n+1)//2\n    sum_of_numbers = n * (n + 1) // 2\n    \n    # Return the difference between sum_of_cubes and sum_of_numbers\n    return sum_of_cubes - sum_of_numbers",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Odd_Pair(arr, x):\n    # Count of elements less than x\n    less_than_x = arr.count(x) + sum(1 for num in arr if num < x and (num ^ x) % 2 != 0)\n    \n    # Return total count\n    return len(arr) - less_than_x\n\n# Test cases\nprint(find_Odd_Pair([5,4,7,2,1],5))  # Expected output: 6\nprint(find_Odd_Pair([7,2,8,1,0,5,11],7))  # Expected output: 12\nprint(find_Odd_Pair([1,2,3],3))  # Expected output: 2",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(input_str):\n    return input_str.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def digit_distance_nums(a, b):\n    # Calculate the sum of digits in both numbers\n    total_sum_a = sum(int(digit) for digit in str(abs(a)))\n    total_sum_b = sum(int(digit) for digit in str(abs(b)))\n\n    # Return the absolute difference between the sums\n    return abs(total_sum_a - total_sum_b)\n\n# Test cases\nprint(digit_distance_nums(1, 2))   # Output: 1\nprint(digit_distance_nums(23, 56)) # Output: 6\nprint(digit_distance_nums(123, 256)) # Output: 7",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def max_sub_array_sum(A):\n    if not A:\n        return 0\n    \n    current_max = global_max = A[0]\n    \n    for i in range(1, len(A)):\n        current_max = max(A[i], current_max + A[i])\n        if current_max > global_max:\n            global_max = current_max\n            \n    return global_max",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(tup1, tup2):\n    # Convert both tuples to sets and then use set union operation\n    result_set = set(tup1 + tup2)\n    # Convert the resulting set back to tuple\n    return tuple(result_set)\n\n# Test cases to verify the correctness of the solution\nprint(union_elements((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 4, 5, 6, 7, 10)\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))   # Expected output: (1, 2, 3, 4, 5, 6)\nprint(union_elements((11, 12, 13, 14), (13, 15, 16, 17)))  # Expected output: (11, 12, 13, 14, 15, 16, 17)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 3"
    ],
    "generated_code": "def assign_elements(pairs):\n    # Create an empty dictionary to store the result\n    result = {}\n    \n    # Loop through each pair in the input list\n    for pair in pairs:\n        # Extract the first and second elements of the current pair\n        key, value = pair\n        \n        # Check if the value is already a single-element list in the result dictionary\n        if isinstance(result[value], list) and len(result[value]) == 1:\n            # If so, add the first element of the current pair as an item to the existing list\n            result[value].append(key)\n        else:\n            # Otherwise, create a new list containing both the key and the current value, then set it in the result dictionary\n            result.setdefault(value, []).extend([key])\n    \n    # Return the final result dictionary\n    return result\n\nprint(assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)])) # {'3': [8], '5': ['3'], '7': ['5'], '2': ['7'], '8': ['4'], '4': []}\nprint(assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)])) # {'4': ['9'], '6': ['4'], '9': ['4', '5'], '8': [], '3': ['8'], '5': []}\nprint(assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)])) # {'2': [], '6': ['2', '8'], '8': [], '9': [], '4': ['9', '9'], '7': [], '3': ['7']}",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max_Length' is not defined",
      "Test 2: FAIL - name 'Find_Max_Length' is not defined",
      "Test 3: FAIL - name 'Find_Max_Length' is not defined"
    ],
    "generated_code": "def find_max_length(lists):\n    # Initialize the maximum length to zero\n    max_len = 0\n    \n    # Iterate through each list in the given lists array\n    for lst in lists:\n        # Update the maximum length if the current list is longer than the previous maximum\n        max_len = max(max_len, len(lst))\n    \n    # Return the maximum length found\n    return max_len\n\n# Test cases\nprint(find_max_length([[1],[1,4],[5,6,7,8]]))  # Expected output: 4\nprint(find_max_length([[0,1],[2,2,],[3,2,1]]))  # Expected output: 3\nprint(find_max_length([[7],[22,23],[13,14,15],[10,20,30,40,50]]))  # Expected output: 5",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_values(input_string):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, input_string)\n    return matches",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Initialize result counter\n    result = 0\n    \n    # Loop through all elements in the array\n    for i in range(n):\n        # Compare current element with all subsequent elements\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                # Increment result counter for each unique pair found\n                result += 1\n                \n    return result",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s):\n    # Splitting the input string into a list of individual characters\n    return list(s)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(number):\n    # Convert the number to a string and split it into digits.\n    # Sum up all the digits using map and lambda function.\n    return sum(map(int, str(number)))\n\n# Test cases\nassert sum_digits(345) == 12\nassert sum_digits(12) == 3\nassert sum_digits(97) == 16\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    # Check if the given list is sorted in non-decreasing order\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\n# Test cases\nprint(issort_list([1,2,4,6,8,10,12,14,16,17]))  # Expected output: True\nprint(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]))  # Expected output: False\nprint(issort_list([1, 2, 4, 6, 8, 10,15,14,20]))  # Expected output: False",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{}] * n",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(words_list, chars_to_remove):\n    for char in chars_to_remove:\n        if char in words_list:\n            while char in words_list:\n                words_list.remove(char)\n    return words_list\n\n\n# Test cases\nprint(remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@']))  # Output: ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@']))  # Output: ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@']))  # Output: ['Red &', 'Orange+', 'Green', 'Orange', 'White']",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_pair_diff_lessthan_K(arr, k, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    total_sum = 0\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if abs(arr[left] - arr[right]) > k:\n            # Calculate the maximum sum of two non-overlapping pairs from the sorted array\n            total_sum += max((arr[left] + arr[right]), (arr[left] + arr[n-1]), (arr[n-1] + arr[right]))\n            \n            # Move both pointers towards the center\n            left += 1\n            right -= 1\n        \n        elif abs(arr[left] - arr[right]) <= k:\n            # If current pair is within the allowed difference, extend it further\n            right -= 1\n            total_sum += (arr[left] + arr[right])\n        \n        else:\n            break\n            \n    return total_sum",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef unique_product(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of the unique elements in a given list.\n    \n    Args:\n    nums (List[int]): A list of integers.\n    \n    Returns:\n    int: The product of the unique elements in the list.\n    \"\"\"\n    unique_nums = set(nums)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the top and bottom areas using πr^2\n    top_bottom_area = 2 * math.pi * radius**2\n    # Calculate the side area using πrh\n    side_area = 2 * math.pi * radius * height\n    # Total surface area is the sum of the top, bottom, and side areas\n    total_surface_area = top_bottom_area + side_area\n    return round(total_surface_area, 3)",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - count_no() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def count_no(n, divisor, limit):\n    \"\"\"\n    This function counts how many numbers less than 'limit' and not divisible by 'divisor'\n    appear consecutively as we move along from 1.\n    \n    Parameters:\n        n (int): The starting point for counting.\n        divisor (int): The number that needs to be excluded from being counted.\n        limit (int): The upper bound to start counting within.\n        \n    Returns:\n        int: The count of numbers meeting the criteria.\n    \"\"\"\n    counter = 0\n    current_number = n\n    \n    while current_number < limit:\n        if current_number % divisor != 0:\n            counter += 1\n        current_number += 1\n    \n    return counter",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - is_Sub_Array() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - is_Sub_Array() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - is_Sub_Array() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def is_Sub_Array(main_array, sub_array, length_of_sub_array):\n    # Check if the sub-array's length exceeds the main array's length\n    if len(sub_array) > len(main_array):\n        return False\n    \n    # Initialize pointers for both arrays\n    main_index = 0\n    sub_index = 0\n    \n    # Traverse through the main array using the main index pointer\n    while main_index < len(main_array):\n        # Check if the current element in main array matches the first element of sub array\n        if main_array[main_index] == sub_array[sub_index]:\n            # If it matches, move the sub array index forward and reset the main index\n            sub_index += 1\n            if sub_index == len(sub_array):\n                # If all elements of sub array match with the current elements in main array\n                return True\n            main_index += 1\n        \n        else:\n            # Move the main index forward\n            main_index += 1\n            \n    # If no matching elements were found after full traversal\n    return False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Calculate n! and then get its last digit\n    result = len(str(math.factorial(n)))\n    \n    if result == 1:\n        return 0\n    \n    # Get the last digit\n    return int(result % 2)",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    return [list1[i] if i < len(list1) else None for i in range(min(len(list1), len(list2), len(list3)))]\n\n# Test cases\nprint(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])) # Expected output: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nprint(interleave_lists([10,20],[15,2],[5,10])) # Expected output: [10,15,5,20,2,10]\nprint(interleave_lists([11,44], [10,15], [20,5])) # Expected output: [11,10,20,44,15,5]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'list' object has no attribute 'symmetric_difference'"
    ],
    "generated_code": "def find_dissimilar(tuple1, tuple2):\n    # Convert both tuples to sets and then back to lists to maintain order.\n    set1 = list(set(tuple1))\n    set2 = list(set(tuple2))\n    \n    # Find the difference between the two sets.\n    return list(set1.symmetric_difference(set2))\n\n# Example usage:\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Output: [3, 6, 7, 10]\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))   # Output: [1, 4, 7, 9]\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Output: [34, 36, 11, 25]",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    result = []\n    for element in tup:\n        if isinstance(element, tuple) and all(item % 2 == 0 for item in element):\n            result.append(element)\n    return tuple(result)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))  # Should return (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9)))  # Should return (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10)))  # Should return (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surface_Area(base_side, slant_height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n    \n    Parameters:\n    base_side (int): The length of one side of the square base.\n    slant_height (int): The slant height of the pyramid.\n    \n    Returns:\n    int: The total surface area of the square pyramid.\n    \"\"\"\n    # Calculate the area of the base\n    base_area = base_side ** 2\n    \n    # Calculate the four triangular faces' areas and sum them up\n    lateral_area = 4 * ((base_side / 2) * slant_height)\n    \n    # Return the total surface area\n    return base_area + lateral_area",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(input_dict):\n    return len(input_dict) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(1, n + 1):\n            c *= (n - i + 1) // i\n        return c",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    pattern = r\"\\b[a-zA-Z]+ly\\b\"\n    matches = re.finditer(pattern, sentence)\n    \n    result = []\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end() - len(match.group()) + 1  # Adjusting index based on the matched word length\n        result.append(f\"{start_index}-{end_index}: {match.group()}\")\n\n    return '\\n'.join(result)\n\n# Test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))  # Expected output: \"0-7: Clearly\"\nprint(find_adverbs(\"Please handle the situation carefuly\"))  # Expected output: \"28-36: carefuly\"\nprint(find_adverbs(\"Complete the task quickly\"))  # Expected output: \"18-25: quickly\"",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of dictionaries where each dictionary represents an item with its name and price,\n    return a new list containing the prices of the top-n most expensive items.\n    \n    Parameters:\n    items (list): A list of dictionaries representing items with their names and prices.\n    n (int): The number of most expensive items to retrieve.\n    \n    Returns:\n    list: A list of dictionaries containing the prices of the top-n most expensive items.\n    \"\"\"\n    # Use a max-heap to keep track of the top-n most expensive items based on price\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (-item['price'], item))\n        else:\n            # If the current item is more expensive than the smallest item in the heap, replace it\n            if -item['price'] > -heap[0][0]:\n                heapq.heapreplace(heap, (-item['price'], item))\n\n    # Extract the prices of the top-n items from the heap\n    result = [item['price'] for _, item in heap]\n    return result\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [555.22], \"Test case 1 failed\"\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2) == [555.22, 101.1], \"Test case 2 failed\"\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1) == [555.22], \"Test case 3 failed\"\n\ncheck_solution()",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_Arr(arr, n, k):\n    # Extracting the first k elements from the array\n    first_part = arr[:k]\n    \n    # Removing those extracted elements from the original array\n    for i in range(k):\n        arr.pop(0)\n    \n    # Concatenating the remaining elements with the first part\n    return first_part + arr\n\n\n# Test cases\nprint(split_Arr([12,10,5,6,52,36], 6, 2))  # Expected output: [5, 6, 52, 36, 12, 10]\nprint(split_Arr([1, 2, 3, 4], 4, 1))       # Expected output: [2, 3, 4, 1]\nprint(split_Arr([0, 1, 2, 3, 4, 5, 6, 7], 8, 3))  # Expected output: [3, 4, 5, 6, 7, 0, 1, 2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(nums):\n    return max(nums) - min(nums)",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perfect_squares(low, high):\n    return [i*i for i in range(int((high**0.5)+1), int((low**0.5)-1), -1) if low <= i*i <= high]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test cases\nprint(polar_rect(3, 4))  # Expected output: ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nprint(polar_rect(4, 7))  # Expected output: ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nprint(polar_rect(15, 17))  # Expected output: ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first and last elements of the original list swapped.\n    \"\"\"\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test Cases\nprint(swap_List([12, 35, 9, 56, 24]))  # Expected output: [24, 35, 9, 56, 12]\nprint(swap_List([1, 2, 3]))            # Expected output: [3, 2, 1]\nprint(swap_List([4, 5, 6]))            # Expected output: [6, 5, 4]",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += comb(n, i) * comb(n - i, n // 2)\n    return total_sum\n\n# Test cases\nprint(sum_Of_product(3))  # Expected output: 15\nprint(sum_Of_product(4))  # Expected output: 56\nprint(sum_Of_product(1))  # Expected output: 1",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def removezero_ip(ip):\n    # Remove all zeros at the beginning of the IP address\n    return ''.join([c for c in str(ip) if not c == '0'])\n\n# Test cases\nprint(removezero_ip(\"216.08.094.196\")) # Expected output: '216.8.94.196'\nprint(removezero_ip(\"12.01.024\"))      # Expected output: '12.1.24'\nprint(removezero_ip(\"216.08.094.0196\")) # Expected output: '216.8.94.196'",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(lst):\n    evens = [x for x in lst if x % 2 == 0]\n    odds = [x for x in lst if x % 2 != 0]\n    \n    return abs(sum(odds) - sum(evens))",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def min_Swaps(bin_str1, bin_str2):\n    if len(bin_str1) != len(bin_str2): \n        return \"Not Possible\"\n\n    # Convert strings to lists for easy comparison\n    bin_list1 = list(bin_str1)\n    bin_list2 = list(bin_str2)\n\n    n = len(bin_str1)\n\n    # Check all possible permutations of first string's bits\n    for i in range(1 << n):\n        new_bin_list1 = [int(c) for c in str(i)]\n        \n        is_valid = True\n        for j in range(n-1):\n            if new_bin_list1[j] == 1 and new_bin_list1[j+1] == 0:\n                if new_bin_list1[j+1] > new_bin_list1[j]:\n                    is_valid = False\n                    break\n        \n        if is_valid:\n            break\n    \n    # Compare modified second string with the original second string\n    if bin_list2[0] == '0':\n        for i in range(n):\n            if bin_list2[i] != bin_list1[n-i-1]:\n                is_valid = False\n                break\n\n    if is_valid:\n        return len([i for i, bit in enumerate(bin_list1) if bit == 1])\n    else:\n        return \"Not Possible\"",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(input_tuple):\n    # Return the size in bytes of the input tuple using sys.getsizeof\n    return sys.getsizeof(input_tuple)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_kth(arr1, arr2, k, i, j):\n    if i == len(arr1):\n        return arr2[j + k - 1]\n    if j == len(arr2):\n        return arr1[i + k - 1]\n\n    if k == 1:\n        return min(arr1[i], arr2[j])\n\n    pivot1 = i + k // 2 - 1 < len(arr1) and arr1[i + k // 2 - 1] or float('inf')\n    pivot2 = j + k // 2 - 1 < len(arr2) and arr2[j + k // 2 - 1] or float('inf')\n\n    if pivot1 > pivot2:\n        return find_kth(arr1, arr2, k // 2, i, j)\n    elif pivot1 < pivot2:\n        return find_kth(arr1, arr2, k - k // 2, i + k // 2, j)\n    else:\n        if i + k // 2 - 1 < len(arr1):\n            return find_kth(arr1, arr2, k // 2, i, i + k // 2 - 1)\n        else:\n            return find_kth(arr1, arr2, k // 2, i + k // 2, j)\n\n# Example usage\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5))  # Output: 6\nprint(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7))  # Output: 256\nprint(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6))  # Output: 8",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(number):\n    # Calculate the length of the number\n    num_length = len(str(number))\n    \n    # Initialize sum for calculating Armstrong number\n    total_sum = 0\n    \n    # Calculate sum of each digit raised to the power of the number's length\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total_sum += digit ** num_length\n        temp //= 10\n    \n    # Check if the calculated sum equals the original number\n    return total_sum == number",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Even(num):\n    # Check if the least significant bit of num is 0\n    return (num & 1) == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]