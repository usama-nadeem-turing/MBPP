[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Occ(s, char):\n    # Remove all occurrences of 'char' in 's'\n    s = s.replace(char, '')\n    \n    # Split the string into two parts at the position of the first and second 'char's\n    first_occurrence_index = -1 * s.find(char)\n    second_occurrence_index = -1 * s.rfind(char)\n    \n    if first_occurrence_index == -1:\n        return s\n    \n    return s[:first_occurrence_index] + s[second_occurrence_index+1:]",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda x: sum(x))",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_common(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_count = max(word_counts.values(), default=0)\n    result = [(word, count) for word, count in word_counts.items() if count == max_count]\n    \n    return sorted(result, key=lambda x: (-x[1], x[0]))\n\n# Example usage and test cases\nprint(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\nprint(count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']))\nprint(count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']))",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def find_Volume(length, width, height):\n    \"\"\"\n    This function calculates and returns the volume of a triangular prism.\n    \n    Parameters:\n    length (float): The base side length of the triangle.\n    width (float): The height of the triangle from its base.\n    height (float): The height of the triangular prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base using Heron's formula\n    s = (length + width + math.sqrt(length**2 + width**2 - 2*length*width)) / 2\n    base_area = math.sqrt(s * (s-length) * (s-width) * (s-height))\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * height\n    \n    return volume",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_lowerstring(s):\n    return re.findall('[A-Z][^A-Z]*|[^A-Za-z]+', s)",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    # Use regex to check for lowercase letters followed by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_lowercase_underscore(\"aab_cbbbc\"))  # Expected output: 'Found a match!'\nprint(text_lowercase_underscore(\"aab_Abbbc\"))  # Expected output: 'Not matched!'\nprint(text_lowercase_underscore(\"Aaab_abbbc\"))  # Expected output: 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return side_length * 4",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(str1, str2):\n    # Remove characters from str1 that are found in str2\n    return ''.join([char for char in str1 if char not in str2])\n\n# Test cases\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))  # Expected output: bacuve\nprint(remove_dirty_chars(\"digitalindia\", \"talent\"))  # Expected output: dgiidi\nprint(remove_dirty_chars(\"exoticmiles\", \"toxic\"))  # Expected output: emles",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    # Use a set to track seen elements and check for duplicates\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(num):\n    # Check if num is equal to the sum of its own digits each raised to their respective positions\n    for i in range(len(str(num))):\n        if pow(int(str(num)[i]), i + 1) != num:\n            return False\n    return True",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    return list(range(n, n*m+1, n))",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    duplicates = []\n    for num in arr:\n        if num in arr[:arr.index(num)]:\n            return num\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(lists):\n    # Find the maximum value among all sublists and calculate their sum\n    max_val = max(sum(sublist) for sublist in lists)\n    return max_val",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_number):\n    # Convert binary string to decimal integer\n    decimal_number = int(binary_number, 2)\n    return decimal_number",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Product(arr, n): \n    # Initialize the result variable as 1\n    prod = 1\n  \n    # Traverse through all elements one by one\n    for i in range(0,n): \n  \n        # Multiply the current element with previous result except if it is already repeated  \n        prod = (prod * arr[i]) - (arr[i] * sum(i == x for x in arr if x != arr[i]))\n  \n    return prod",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_k_elements(tup_list, k):\n    \"\"\"\n    This function checks if each element in the input list of tuples is equal to 'k'.\n    \n    Parameters:\n    tup_list (list): A list containing tuples.\n    k (int): The value to be checked for equality within each tuple.\n    \n    Returns:\n    bool: True if every element in each tuple matches 'k', otherwise False.\n    \"\"\"\n    # Convert each tuple into a set and check its length against 1 (since we're checking for uniqueness)\n    unique_count = sum(len(set(tuple_)) == 1 for tuple_ in tup_list)\n    return unique_count == len(tup_list)\n\n# Test cases to verify the correctness of the function\nprint(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))  # Expected output: True\nprint(check_k_elements([(7, 7, 7), (7, 7)], 7))                            # Expected output: True\nprint(check_k_elements([(9, 9), (9, 9, 9, 9)], 7))                          # Expected output: False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(lst):\n    new_lst = [s for s in lst if not any(c.isdigit() for c in s)]\n    return new_lst\n\n# Test cases\nprint(remove(['4words', '3letters', '4digits']))  # Output: ['words', 'letters', 'digits']\nprint(remove(['28Jan', '12Jan', '11Jan']))        # Output: ['Jan', 'Jan', 'Jan']\nprint(remove(['wonder1', 'wonder2', 'wonder3']))   # Output: ['wonder', 'wonder', 'wonder']",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        C = [[0 for x in range(k+1)] for x in range(n+1)]\n        for i in range(n+1):\n            for j in range(min(i, k)+1):\n                if j == 0 or j == i:\n                    C[i][j] = 1\n                else:\n                    C[i][j] = C[i-1][j-1] + C[i-1][j]\n        return C[n][k]\n\n# Test cases\nprint(binomial_Coeff(5, 2))  # Expected output: 10\nprint(binomial_Coeff(4, 3))  # Expected output: 4\nprint(binomial_Coeff(3, 2))  # Expected output: 3",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Odd_Occurrence(arr, n):\n    # Initialize result with -1\n    res = -1\n    \n    # Traverse array\n    for i in range(n):\n        count = 0\n        \n        # Check if current element is not equal to res and its index is different from res\n        for j in range(n):\n            if arr[i] != arr[j] and i != j:\n                count += 1\n                \n        # Update result if condition satisfies\n        if count % 2 == 1:\n            res = arr[i]\n            \n    return res",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(str_input):\n    # Initialize count of equal substring ends\n    equal_ends_count = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(str_input)):\n        # Check if current character is part of an equal substring at both ends\n        if str_input[i] == str_input[-(i+1)]:\n            equal_ends_count += 1\n            \n    return equal_ends_count\n\n# Test cases\nprint(count_Substring_With_Equal_Ends(\"abc\"))   # Expected output: 3\nprint(count_Substring_With_Equal_Ends(\"abcda\")) # Expected output: 6\nprint(count_Substring_With_Equal_Ends(\"ab\"))    # Expected output: 2",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "from heapq import heappush as insert\nfrom heapq import heappop as remove\nfrom collections import Counter\n\ndef func(arrays, k):\n    # Initialize a min heap for storing frequency values\n    pq = []\n    # For each array, count the occurrences of each number\n    for arr in arrays:\n        counts = Counter(arr)\n        # Push negative values into the priority queue to simulate max-heap behaviour due to min-heap nature of list\n        insert(pq, -min(counts.values()))\n    \n    # Extract elements from the priority queue until we get 'k' elements with highest frequencies\n    return [-x for x in remove(pq) for _ in range(k)]",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Prime_Factors(n):\n    i = 2\n    last_prime = None\n    while n > 1:\n        if n % i == 0:\n            last_prime = i\n            n //= i\n        else:\n            i += 1\n    return last_prime",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 2: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 3: FAIL - name 'decimal_To_Binary' is not defined"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a given decimal number to its binary representation.\n    \n    Parameters:\n    decimal_number (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary representation of the decimal number as a string.\n    \"\"\"\n    if decimal_number == 0:\n        return '0'\n    binary_digits = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    # Reverse the list to get the correct order and join to form a string\n    return ''.join(binary_digits[::-1])\n\n# Test cases\nprint(decimal_to_binary(10))  # Expected output: \"1010\"\nprint(decimal_to_binary(1))   # Expected output: \"1\"\nprint(decimal_to_binary(20))  # Expected output: \"10100\"",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_missing(arr, n):\n    # Iterate through each element of the array from 0 to n-1\n    for i in range(n):\n        # Use abs and index to check if the absolute difference between the current index and actual value is equal to the next element's value\n        if abs(i - arr[i]) != abs(i + 1 - arr[i + 1]):\n            # If not, return the missing element\n            return arr[i] + 1\n    \n    # If no missing element is found, raise an error\n    raise ValueError(\"No missing element found\")",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    # Calculate the n-th rectangular number using the formula: n * (n + 1)\n    return n * (n + 1)\n\n# Test the function with provided data points\nprint(find_rect_num(4))  # Expected output: 20\nprint(find_rect_num(5))  # Expected output: 30\nprint(find_rect_num(6))  # Expected output: 42",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_Nth_Digit(num_1, num_2, n):\n    \"\"\"\n    This function calculates the nth digit in the decimal representation of the proper fraction between num_1 and num_2.\n    \n    Parameters:\n    - num_1: The first number (inclusive).\n    - num_2: The second number (exclusive).\n    - n: The position of the digit within the decimal representation.\n    \n    Returns:\n    - The nth digit as an integer.\n    \"\"\"\n    # Calculate the difference between num_1 and num_2\n    diff = num_1 - num_2\n    \n    # Find the range where num_1 is located for fractions\n    if diff == 0:\n        return None  # Edge case where num_1 is equal to num_2\n    \n    low = int(num_1 / diff)\n    high = int((num_1 + 1) / diff)\n    \n    while True:\n        current_fraction = (low * diff + num_1) / diff\n        if current_fraction > num_2:\n            break\n        \n        # If we've found the correct fraction range, calculate the exact value\n        if abs(low * diff + num_1 - num_2) < 1e-9:\n            exact_value = (low * diff + num_1) / diff\n            \n            # Handle special cases based on whether num_1 and num_2 have decimals\n            if '.' not in str(exact_value).split('.')[1] and '.' in str(current_fraction).split('.')[1]:\n                return int(str(exact_value)[n])\n            \n            fractional_part_length = len(str(current_fraction)) - 1\n            if n < fractional_part_length:\n                return int(str(exact_value)[n])\n            else:\n                return int(str(exact_value)[n]) % 10\n            \n        low += 1\n\n# Test the function with provided data points\nassert find_Nth_Digit(1, 2, 1) == 5, \"Test case 1 failed\"\nassert find_Nth_Digit(3, 5, 1) == 6, \"Test case 2 failed\"\nassert find_Nth_Digit(5, 6, 5) == 3, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 2: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 3: FAIL - '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    # Convert all elements to strings for consistent comparison\n    sorted_lst = sorted(lst)\n    return [str(i) if isinstance(i, int) else i for i in sorted_lst]",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef div_even_odd(arr: List[int]) -> int:\n    return arr[0] // arr[-1]",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(s):\n    # Count occurrences of each character in the string\n    char_count = Counter(s)\n    \n    result = []\n    max_val = -float('inf')\n    \n    for char, count in char_count.items():\n        # If more than one occurrence is found, it's not possible to separate characters into groups with all consecutive ones being different\n        if count > 1:\n            return ''.join(result) + '!'\n        \n        # If count equals 1, append it to the result and update max_val\n        elif count == 1:\n            if len(result) == 0:\n                result.append(char)\n            else:\n                # Check if the last added character is equal to the current character\n                if result[-1] == char:\n                    return ''.join(result) + '!'\n                else:\n                    result.append(char)\n            \n            if char_count[char] > max_val:\n                max_val = char_count[char]\n                \n    return ''.join(result)\n\n# Test cases\nprint(rearange_string(\"aab\"))  # Output: 'aba'\nprint(rearange_string(\"aabb\"))  # Output: 'abab'\nprint(rearange_string(\"abccdd\"))  # Output: 'cdabcd'",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lst):\n    result = Counter()\n    for sublst in lst:\n        result += Counter(sublst)\n    return dict(result)\n\n# Test cases\nprint(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]))  # Expected output: {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\nprint(freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))         # Expected output: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\nprint(freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])) # Expected output: {30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Sum(arr, n):\n    # Create an empty dictionary to store counts of each element\n    count_dict = {}\n    \n    # Iterate through the array and update the dictionary with counts\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    total_sum = 0\n    # Iterate through the dictionary to calculate the sum of elements with odd occurrences\n    for key in count_dict.keys():\n        if count_dict[key] % 2 != 0:\n            total_sum += key\n    \n    return total_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the pattern for finding sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given text\n    result = re.search(pattern, text)\n    \n    # If a match is found, return \"Found a match!\", otherwise return \"Not matched!\"\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_string(text):\n    if re.match(r'\\Apython', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nassert text_match_string(\" python\") == 'Not matched!', \"Test case 1 failed\"\nassert text_match_string(\"python\") == 'Found a match!', \"Test case 2 failed\"\nassert text_match_string(\"  lang\") == 'Not matched!', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_gcd(arr):\n    # Initialize gcd with the first element of the array\n    gcd = arr[0]\n    \n    # Calculate GCD using Euclidean algorithm\n    for num in arr:\n        while num % gcd != 0 or gcd % num != 0:\n            gcd += 1\n    \n    return gcd\n\n# Test cases\nprint(get_gcd([2, 4, 6, 8, 16]))  # Expected output: 2\nprint(get_gcd([1, 2, 3]))         # Expected output: 1\nprint(get_gcd([2, 4, 6, 8]))      # Expected output: 2",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_distinct' is not defined",
      "Test 2: FAIL - name 'test_distinct' is not defined",
      "Test 3: FAIL - name 'test_distinct' is not defined"
    ],
    "generated_code": "def is_all_unique(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Calculate factorial using math library for large numbers\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Calculate factorials and compare their last digits\n    last_digit_a = int(factorial(a)) % 10\n    last_digit_b = int(factorial(b)) % 10\n    \n    # Return the minimum of the two last digits\n    return min(last_digit_a, last_digit_b)\n\n# Test cases\nprint(compute_Last_Digit(2, 4))  # Expected output: 2\nprint(compute_Last_Digit(6, 8))  # Expected output: 6\nprint(compute_Last_Digit(1, 2))  # Expected output: 2",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(n):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each bit position in the binary representation of n\n    for i in range(32):  # Assuming we want up to 32-bit numbers for simplicity\n        if n & (1 << i):  # Check if the ith bit is set (1)\n            result += \"1\"  # Set the corresponding bit in the result\n        else:\n            result += \"0\"\n    \n    return int(result, 2)  # Convert the resulting binary string back to an integer",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [row[index] for row in matrix]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0))  # Expected output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2))  # Expected output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1))  # Expected output: [2, 5, 1]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def min_length_list(lists):\n    return min(lists, key=lambda x: len(x), default=())\n\ndef check_solution():\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (1, [0]), \"Test case 1 failed\"\n    assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]) == (1, [1]), \"Test case 2 failed\"\n    assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]]) == (2, [1,2]), \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    # Check if all sides of the triangle are equal\n    return a == b and b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Equality(str_input):\n    \"\"\"\n    This function checks if the first and last characters of the input string are equal.\n    \n    Args:\n    str_input (str): The input string to be checked.\n    \n    Returns:\n    str: A message indicating if the first and last characters are equal (\"Equal\" or \"Not Equal\").\n    \"\"\"\n    # Return \"Equal\" if the first and last characters match, otherwise \"Not Equal\".\n    return 'Equal' if str_input[0] == str_input[-1] else 'Not Equal'",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of non-negative integers in ascending order using the counting sort algorithm.\n    \n    Parameters:\n    arr (list): A list of non-negative integers to be sorted.\n    \n    Returns:\n    list: The sorted list of integers.\n    \"\"\"\n    if not arr:\n        return []\n\n    max_value = max(arr)\n    count_arr = [0] * (max_value + 1)\n\n    # Count occurrences of each number\n    for num in arr:\n        count_arr[num] += 1\n\n    # Construct the sorted array\n    sorted_arr = []\n    for i, count in enumerate(count_arr):\n        for _ in range(count):\n            sorted_arr.append(i)\n\n    return sorted_arr\n\n# Test cases\nprint(counting_sort([1,23,4,5,6,7,8]))  # Output: [1, 4, 5, 6, 7, 8, 23]\nprint(counting_sort([12, 9, 28, 33, 69, 45]))  # Output: [9, 12, 28, 33, 45, 69]\nprint(counting_sort([8, 4, 14, 3, 2, 1]))  # Output: [1, 2, 3, 4, 8, 14]",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(t,n,r):\n    return r**(t-1)*n\n\n# Test cases\nprint(tn_gp(1,5,2))  # Expected output: 16\nprint(tn_gp(1,5,4))  # Expected output: 256\nprint(tn_gp(2,6,3))  # Expected output: 486",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(n):\n    # Reverse the number and add it to n to find twice its reverse\n    two_times_reverse = int(str(n) + str(n)[::-1])\n    \n    # Check if n is one less than twice its reverse\n    return n == two_times_reverse - 1",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Num(digits,n):\n    # Sort the digits in descending order and concatenate them into a string\n    max_num_str = ''.join(sorted(map(str, digits), reverse=True))\n    # Convert the sorted string back to an integer\n    max_num = int(max_num_str)\n    return max_num if len(str(n)) == n else -1\n\n# Test cases\nprint(find_Max_Num([1,2,3],3))  # Expected output: 321\nprint(find_Max_Num([4,5,6,1],4))  # Expected output: 6541\nprint(find_Max_Num([1,2,3,9],4))  # Expected output: 9321",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def opposite_Signs(num1, num2):\n    # Check if both numbers have opposite signs using logical operators\n    return ((num1 < 0 and num2 > 0) or (num1 > 0 and num2 < 0))",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_octagonal(n):\n    \"\"\"\n    Calculate the n-th octagonal number.\n    \n    Parameters:\n    - n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    - int: The n-th octagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Using formula for nth octagonal number: 3n^2 - 2n\n        return 3 * n**2 - 2 * n\n\n# Function to check if the solution is correct\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65, \"Test case 1 failed\"\n    assert is_octagonal(10) == 280, \"Test case 2 failed\"\n    assert is_octagonal(15) == 645, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\n# Uncomment the line below to run the test function\n# test_is_octagonal()",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_len_sub(nums, k):\n    dp = [0] * len(nums)\n    \n    for i in range(1, len(dp)):\n        diff = nums[i] - nums[i-1]\n        if diff < 0:\n            j = i - 1\n            while j >= 0 and nums[j+1] - nums[j] > diff:\n                j -= 1\n            dp[i] = i - j\n        \n        else:\n            j = i - 1\n            while j >= 0 and nums[j + 1] - nums[j] < diff:\n                j -= 1\n            dp[i] = i - j\n    \n    # Return the minimum value from the dp list as it represents the maximum subsequence length\n    return min(dp)\n\n# Example usage\nprint(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))  # Output: 5\nprint(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7))  # Output: 4\nprint(max_len_sub([9, 11, 13, 15, 18], 5))       # Output: 1",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: count_substrings() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def count_substrings(s):\n    def helper(index, current_sum):\n        if index == len(s):\n            return int(current_sum == len(s))\n        \n        result = 0\n        for i in range(index + 1, min(len(s), index + 4)):\n            next_sum = current_sum + int(s[index:i])\n            result += helper(i, next_sum)\n            \n        return result\n    \n    return helper(0, 0)\n\n# Test cases\nprint(count_substrings('112112', 6))  # Expected output: 6\nprint(count_substrings('111', 3))     # Expected output: 6\nprint(count_substrings('1101112', 7)) # Expected output: 12",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(nums):\n    # Initialize min_val with the first element of nums\n    min_val = nums[0]\n    \n    # Iterate through all elements in nums starting from the second element\n    for num in nums[1:]:\n        if num < min_val:\n            min_val = num\n    \n    # Return the minimum value found\n    return min_val",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_difference(pairs: List[tuple]) -> int:\n    if len(pairs) < 2:\n        raise ValueError(\"The input must contain at least two pairs.\")\n    \n    # Initialize variables to store the minimum and maximum values seen so far\n    min_value = float('inf')\n    max_diff = -float('inf')\n\n    for pair in pairs:\n        num1, num2 = pair\n        # Update the minimum value encountered so far\n        min_value = min(min_value, num1)\n        \n        # Calculate the potential new maximum difference\n        diff = abs(num2 - min_value)\n        \n        # Update the maximum difference found\n        max_diff = max(max_diff, diff)\n\n    return max_diff",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if isinstance(lst, int): \n        return lst\n    else:\n        total = 0\n        for i in lst:\n            if isinstance(i, int):\n                total += i\n            elif isinstance(i, list):\n                total += recursive_list_sum(i)\n        return total",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    # Initialize counter for positive numbers\n    positive_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Increment counter if the number is greater than zero\n        if num > 0:\n            positive_count += 1\n            \n    # Return the total count of positive numbers\n    return positive_count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number using dynamic programming.\n    \n    :param n: Integer, the index of the Bell number to calculate.\n    :return: Integer, the nth Bell number.\n    \"\"\"\n    # Initialize an array to store Bell numbers\n    bell = [0] * (n + 1)\n    bell[0] = 1  # Base case\n    \n    for i in range(1, n + 1):\n        bell[i] = sum(bell[:i])\n    \n    return bell[n]\n\n# Check function with provided data points\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(array):\n    # Check if array is either entirely non-increasing or non-decreasing\n    if all(array[i] <= array[i + 1] for i in range(len(array) - 1)) or \\\n       all(array[i] >= array[i + 1] for i in range(len(array) - 1)):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(list1, sublist):\n    return sublist in list1",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuples_list, expected_length):\n    \"\"\"\n    Check if all tuples in the list have the same length as specified.\n    \n    Parameters:\n    tuples_list (list of tuples): List containing tuples to be checked for uniform length.\n    expected_length (int): The desired length to compare against each tuple's length.\n    \n    Returns:\n    str: A message indicating if all tuples match the specified length or not.\n    \"\"\"\n    actual_lengths = [len(tuple) for tuple in tuples_list]\n    if len(set(actual_lengths)) == 1 and set(actual_lengths) == {expected_length}:\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))\nprint(get_equal([(1, 2), (3, 4)], 2))",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink_factor = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n                \n    return arr",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    # A number n can be expressed as the difference of two squares if and only if it is not of the form 4^k*(8m+7)\n    return str(n).endswith('0') or sum([int(i)**2 for i in str(n)]) == n**2",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(string):\n    # Split the string based on the specified delimiters and combine them back into a single list\n    result = re.split(r'[\\s/\\-*,\\*;=+!]+', string)\n    return result[:-1] if len(result) > 1 else [result[-1]]\n\n# Test cases\nprint(multiple_split('Forces of the \\ndarkness*are coming into the play.'))  # Expected output: ['Forces of the ', 'darkness', 'are coming into the play.']\nprint(multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.'))  # Expected output: ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nprint(multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.'))  # Expected output: ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, strings):\n    \"\"\"\n    Check if each string in 'strings' matches the corresponding pattern in 'patterns'.\n    \n    Parameters:\n    patterns (list of str): A list containing all the patterns.\n    strings (list of str): A list containing all the strings to be checked against the patterns.\n    \n    Returns:\n    bool: True if every string in 'strings' matches one and only one pattern from 'patterns', False otherwise.\n    \"\"\"\n    # Initialize an empty dictionary to keep track of the mapping between strings and their first occurrence index in patterns\n    mapping = {}\n    for i, pat in enumerate(patterns):\n        if pat not in mapping:\n            mapping[pat] = [i]\n        else:\n            mapping[pat].append(i)\n            \n    # For each string in the input list, try to find a match in the mappings\n    for s in strings:\n        found_match = False\n        for m in mapping.values():\n            if len(m) > 0 and s.startswith(patterns[m[-1]]):\n                found_match = True\n                break\n        if not found_match:\n            return False\n    return True",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_tuples(tuples_list, divisor):\n    result = []\n    for tup in tuples_list:\n        if all(x % divisor == 0 for x in tup):\n            result.append(str(tup))\n    return ']['.join(result)\n\n# Test cases\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))  # Expected output: [(6, 24, 12)]\nprint(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5))      # Expected output: [(5, 25, 30)]\nprint(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4))   # Expected output: [(8, 16, 4)]",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(x, y):\n    # Initialize the count of squares\n    count = 0\n    \n    # Iterate through all possible top-left corner positions within bounds\n    for i in range(x + 1):\n        for j in range(y + 1):\n            if i <= x and j <= y:\n                # Calculate the total area of all possible squares ending at each position\n                area = (x - i + 1) * (y - j + 1)\n                count += area\n                \n    return count",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Diff(n):\n    # Initialize sums for even and odd digits\n    sum_even = 0\n    sum_odd = 0\n    \n    # Loop through each digit in the number\n    while n > 0:\n        # Get the last digit\n        last_digit = n % 10\n        \n        # Check if it's even or odd\n        if last_digit % 2 == 0:\n            sum_even += last_digit\n        else:\n            sum_odd += last_digit\n        \n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return whether sum_even minus sum_odd equals zero\n    return sum_even - sum_odd == 0",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    \"\"\"\n    Count the numbers in range [0, n] which have an odd number of set bits.\n    \n    Parameters:\n    n (int): The upper limit of the range.\n    \n    Returns:\n    int: Count of numbers within the range having an odd number of set bits.\n    \"\"\"\n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Return True if the length of the word is odd, otherwise return False.\n    return len(word) % 2 != 0",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    Args:\n    n : int - The position in the sequence of tetrahedral numbers.\n    \n    Returns:\n    float - The value of the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) / 6.0",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple index out of range",
      "Test 2: FAIL - tuple index out of range",
      "Test 3: FAIL - tuple index out of range"
    ],
    "generated_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i], tuple2[i]))\n    return result",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius ** 3",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(input_str):\n    # Initialize result as an empty string\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in input_str:\n        # Add each character to the result\n        result += char\n    \n    return result",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        x, y = 1, 1\n        for _ in range(3, n + 1):\n            z = x + y\n            x, y = y, z\n        return y",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Args:\n        radius (float): The radius of the sphere.\n        \n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Calculate n-th centered hexagonal number using formula\n    result = ((3 * n * (n - 1)) + (3 * n) + 1)\n    return result",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(arr):\n    from collections import Counter\n    return dict(Counter(arr))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def closest_num(n):\n    \"\"\"\n    This function takes an integer n and returns the largest perfect square less than n.\n    \n    Args:\n    - n: An integer\n    \n    Returns:\n    - The largest perfect square less than n as an integer.\n    \"\"\"\n    import math\n    # Find the floor of the square root of n\n    floor_sqrt = math.floor(math.sqrt(n))\n    # Return the square of the floor sqrt as it is the largest perfect square < n\n    return floor_sqrt ** 2",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find the maximum length of words in the list\n    max_length = max(len(word) for word in words)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(string_list, substring):\n    for item in string_list:\n        if substring in item:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(num_str):\n    \"\"\"\n    Check if the input string 'num_str' represents an undulating number.\n    \n    An undulating number has its digits alternating between two values.\n    For example:\n    - \"1212121\" is undulating because its digits alternate between '1' and '2'.\n    - \"1991\" is not undulating as its digits do not alternate.\n    - \"121\" is undulating with digits '1', '2', '1'.\n    \n    Args:\n    num_str (str): The string representation of the number to be checked.\n    \n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    for i in range(1, len(num_str)):\n        if num_str[i] != num_str[0]:\n            return False\n    return True\n\n# Test cases\nprint(is_undulating(\"1212121\")) # Expected output: True\nprint(is_undulating(\"1991\"))   # Expected output: False\nprint(is_undulating(\"121\"))    # Expected output: True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    # Extracting and sorting the index of the tuple with minimum second element\n    min_index = min(range(len(tuples_list)), key=lambda i: tuples_list[i][1])\n    # Returning the name corresponding to the extracted index\n    return tuples_list[min_index][0]\n\n# Test cases\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))  # Output: Varsha\nprint(index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]))  # Output: Dawood\nprint(index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]))   # Output: Ayesha",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min_Length' is not defined",
      "Test 2: FAIL - name 'Find_Min_Length' is not defined",
      "Test 3: FAIL - name 'Find_Min_Length' is not defined"
    ],
    "generated_code": "def find_min_length(sublists):\n    min_length = float('inf')\n    for sublist in sublists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n# Test cases\nprint(find_min_length([[1], [1, 2]]))  # Output: 1\nprint(find_min_length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))  # Output: 2\nprint(find_min_length([[3, 3, 3], [4, 4, 4, 4]]))  # Output: 3",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lists):\n    result = {}\n    for lst in lists:\n        for item in lst:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def multiply_num(nums):\n    result = reduce(lambda x, y: x * y, nums)\n    return result / len(nums)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    # Convert the decimal number to binary using built-in bin() function\n    return bin(decimal_number)[2:]  # Remove the \"0b\" prefix from the result",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\n# Test cases\nprint(next_smallest_palindrome(99)) # Expected output: 101\nprint(next_smallest_palindrome(1221)) # Expected output: 1331\nprint(next_smallest_palindrome(120)) # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def kth_element(arr, k, pos):\n    arr.sort()\n    if pos < len(arr):\n        return arr[pos]\n    else:\n        return None  # If position is out of bounds, return None or handle as needed",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    # Split the snake_case string into words separated by '_'\n    words = snake_str.split('_')\n    \n    # Capitalize each word and join them together with no space between words\n    return ''.join(word.capitalize() for word in words)\n\n# Test cases to verify the correctness of the function\nprint(snake_to_camel('python_program')) # Expected output: 'PythonProgram'\nprint(snake_to_camel('python_language')) # Expected output: 'PythonLanguage'\nprint(snake_to_camel('programming_language')) # Expected output: 'ProgrammingLanguage'",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'binomial' is not defined",
      "Test 2: FAIL - name 'binomial' is not defined",
      "Test 3: FAIL - name 'binomial' is not defined"
    ],
    "generated_code": "def eulerian_num(n, k):\n    if n == 0:\n        return int(k > 0)\n    elif n < 0:\n        return 0\n    else:\n        return sum([eulerian_num(n-1, i) * binomial(i, k) for i in range(min(n+1, k)+1)])",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst_of_lists):\n    return [sorted(sublist) for sublist in lst_of_lists]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(lst):\n    # Initialize a counter for True values\n    true_count = lst.count(True)\n    return true_count",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_lists(lst, tpl):\n    # Add elements of lst to tpl and return the result as a tuple\n    return tpl + tuple(lst)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    # Calculate the number of hexadecimal digits between start and end\n    num_digits = max((end - start + 1) // 4, 0)\n    \n    # If there's no valid hex number in the range, return 0\n    if num_digits == 0:\n        return 0\n    \n    # Calculate total possible hexadecimal numbers from 0 to 'num_digits' * 'A'\n    total_hex_numbers = 16 ** num_digits\n    \n    # Subtract one because we don't want leading zeros\n    return total_hex_numbers - 1\n\n# Test cases\nprint(count_Hexadecimal(10, 15))  # Expected output: 6\nprint(count_Hexadecimal(2, 4))    # Expected output: 0\nprint(count_Hexadecimal(15, 16))  # Expected output: 1",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from heapq import heappush, heappop\n\ndef merge_sorted_lists(lists):\n    \"\"\"\n    Merge multiple sorted lists into a single sorted list.\n    \n    Args:\n    lists (List[List[int]]): A list of sorted integer lists.\n    \n    Returns:\n    List[int]: The merged sorted list.\n    \"\"\"\n    h = []\n    for l in lists:\n        if l:\n            heappush(h, (l.pop(0), 0, l))\n    result = []\n    while h:\n        val, i, lst = heappop(h)\n        result.append(val)\n        if len(lst) > i + 1:\n            heappush(h, (lst[i + 1], i + 1, lst))\n    return result\n\n# Check function with provided data points\nassert merge_sorted_lists([[1, 3, 5, 6, 8, 9], [2, 5, 7, 11]]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11]\nassert merge_sorted_lists([[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(s, n):\n    # Count the number of '1's in the first n characters of s\n    ones = s[:n].count('1')\n    \n    # If there are more than one '1', calculate the rotation point\n    if ones > 1:\n        return n - ones + 1\n    \n    # If all or none of the first n characters are '1', determine based on parity\n    elif ones == 0:\n        for i in range(n):\n            if s[i] == '1':\n                return i + 1\n    \n    else:\n        return n\n\n# Example test cases\nprint(odd_Equivalent(\"011001\", 6))  # Output should be 3\nprint(odd_Equivalent(\"11011\", 5))   # Output should be 4\nprint(odd_Equivalent(\"1010\", 4))    # Output should be 2",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(intervals, start_range, end_range):\n    missing_ranges = []\n    i = 0\n    \n    while i < len(intervals):\n        low = max(start_range, intervals[i][0])\n        high = min(end_range, intervals[i][1])\n        \n        if low == high:\n            # Handle case when low is equal to high\n            if i+1 < len(intervals):\n                new_low = intervals[i+1][0]\n                if new_low > low:\n                    low = new_low\n                    high = min(high, intervals[i+1][1])\n            else:\n                break\n        \n        if low != high:\n            missing_ranges.append((low, high))\n        \n        i += 1\n    \n    return missing_ranges",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(lists):\n    # Flatten all sublists into one list and remove duplicates\n    flattened_list = set([item for sublist in lists for item in sublist])\n    return list(flattened_list)",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter(r, h):\n    # calculate the circumference of the base circle\n    circ = 2 * 3.14159 * r\n    \n    # calculate the height of the cylinder\n    h = h * 3.14159\n    \n    # calculate the surface area of the cylinder using the formula: 2πrh + 2πr^2\n    surface_area = 2 * h + 2 * circ\n    \n    # return the perimeter which is half of the total surface area\n    return surface_area / 2\n\n# test the function with provided data points\nprint(perimeter(2, 4))   # Expected output: 12\nprint(perimeter(1, 2))   # Expected output: 6\nprint(perimeter(3, 1))   # Expected output: 8",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frozenset({8, 5, 6}) is not in list",
      "Test 2: FAIL - frozenset({2, 4}) is not in list",
      "Test 3: FAIL - frozenset({10, 11, 13}) is not in list"
    ],
    "generated_code": "def assign_freq(tuples_list):\n    # Count the frequency of each tuple\n    freq = {}\n    for tup in tuples_list:\n        key = frozenset(tup)  # Use frozen set to ensure uniqueness\n        if key not in freq:\n            freq[key] = 1\n        else:\n            freq[key] += 1\n    \n    # Sort tuples based on their frequency and then by original order\n    sorted_tuples = []\n    for tup, count in sorted(freq.items(), key=lambda item: (-item[1], tuples_list.index(item[0]))):\n        sorted_tuples.append(tuple(sorted(tup)))\n    \n    return sorted_tuples",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_empty(dicts_list):\n    # Check if every dictionary in the list is empty\n    return all(not d for d in dicts_list)",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    result = []\n    for item in lst:\n        try:\n            converted_item = tuple(map(float, item))\n            result.append(converted_item)\n        except ValueError:\n            # Handle conversion errors gracefully and append as is\n            result.append(item)\n    return result",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def search(arr, n): \n    i = 0\n    while i < n-1:\n        if arr[i] != arr[i+1]:\n            break\n        i += 1\n    \n    j = n - 1\n    while j > 0:\n        if arr[j] != arr[j-1]:\n            break\n        j -= 1\n        \n    return arr[i]",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_product_tuple(tuples_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum product of elements in all possible pairs of the tuples.\n    \n    Parameters:\n    tuples_list (list): A list of tuples where each tuple contains two integers.\n    \n    Returns:\n    int: The maximum product of elements from all possible pairs of the tuples.\n    \"\"\"\n    # Sort the list of tuples based on the second element of each tuple in descending order\n    sorted_tuples = sorted(tuples_list, key=lambda x: -x[1])\n    \n    # Initialize variables to store the first element of the largest pair and the maximum product found so far\n    max_product = float('-inf')\n    first_element_of_largest_pair = float('-inf')\n    \n    for i in range(len(sorted_tuples)):\n        if sorted_tuples[i][1] > max_product / 2:\n            max_product = sorted_tuples[i][0] * sorted_tuples[i][1]\n            first_element_of_largest_pair = sorted_tuples[i][0]\n        else:\n            break\n    \n    return max_product\n\n# Test cases\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])) # Expected output: 36\nprint(max_product_tuple([(10,20), (15,2), (5,10)]))          # Expected output: 200\nprint(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)])) # Expected output: 484",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef check_triplet(arr: List[int], target_sum: int, sum_value: int) -> bool:\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum_value:\n                return True\n            elif current_sum < sum_value:\n                left += 1\n            else:\n                right -= 1\n    return False",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'smartNumber' is not defined",
      "Test 2: FAIL - name 'smartNumber' is not defined",
      "Test 3: FAIL - name 'smartNumber' is not defined"
    ],
    "generated_code": "def smart_number(n):\n    # Your solution starts here\n    \n    def helper(x, y):\n        if x == 1:\n            return y * (y + 1)\n        else:\n            return x * (x - 1) // 2 + y * (y + 1)\n    \n    result = 0\n    for i in range(1, 101):  # We assume there's no more than 100 integers needed.\n        temp_result = helper(i, i) * (i + 1) + helper(i, i + 1)\n        if temp_result >= n:\n            result = temp_result\n            break\n    \n    return result",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_amicable(n):\n    def find_divisors(num):\n        divisors = [i for i in range(1, int(num**0.5) + 1) if num % i == 0]\n        return [num // i for i in divisors] + divisors[::-1]\n\n    s = sum(find_divisors(n))\n    d = sum(find_divisors(s)) - n\n    return True if d != n and d < 2 * n else False\n\ndef amicable_numbers_sum(number):\n    total_sum = 0\n    for x in range(2, number + 1):\n        if is_amicable(x):\n            total_sum += x\n    return total_sum",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: angle_complex() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the phase angle in radians for a given complex number.\n    \n    Args:\n    z (complex): A complex number.\n    \n    Returns:\n    float: The phase angle of the complex number.\n    \"\"\"\n    return cmath.phase(z)\n\n# Test cases\nprint(angle_complex(0,1j)) # Expected output: approximately 1.5707963267948966 (pi/2)\nprint(angle_complex(2,1j)) # Expected output: approximately 0.4636476090008061 (arctan(1/2))\nprint(angle_complex(0,2j)) # Expected output: approximately 1.5707963267948966 (pi/2)",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_length(s, k):\n    \"\"\"\n    Finds the length of the longest sub-string such that there are at least 'k' more zeros than ones.\n    \n    Parameters:\n        s (str): The binary string.\n        k (int): The minimum required difference between zeros and ones in any sub-string.\n        \n    Returns:\n        int: The length of the longest qualifying sub-string.\n    \"\"\"\n    max_length = 0\n    current_difference = 0\n    start_index = 0\n    \n    for end_index in range(len(s)):\n        if s[end_index] == '0':\n            current_difference += 1\n        \n        while current_difference > k:\n            if s[start_index] == '0':\n                current_difference -= 1\n            start_index += 1\n            \n        max_length = max(max_length, end_index - start_index + 1)\n    \n    return max_length\n\n\n# Test cases\nassert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_common_divisors(x, y):\n    # Initialize sum of common divisors\n    common_sum = 0\n    \n    # Loop through all possible divisors from 1 to min(x, y)\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            common_sum += i\n            \n    return common_sum",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    if b == 0:\n        return 0\n    elif b < 0:\n        return -multiply_int(a, -b)\n    else:\n        result = 0\n        for _ in range(b):\n            result += a\n        return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, words_list):\n    return [word for word in words_list if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'magic_square_test' is not defined",
      "Test 2: FAIL - name 'magic_square_test' is not defined",
      "Test 3: FAIL - name 'magic_square_test' is not defined"
    ],
    "generated_code": "def is_magic_square(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n    \n    total_sum = sum(sum(row) for row in matrix)\n    expected_sum = n * (n ** 2 + 1) // 2\n    \n    # Check rows and columns\n    for i in range(n):\n        if sum(matrix[i]) != total_sum or sum(j for j in zip(*matrix)[i]) != total_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != total_sum or sum(matrix[i][-1-i] for i in range(n)) != total_sum:\n        return False\n    \n    return True\n\n# Test cases\nprint(is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\ndef max_occurrences(lst):\n    # Use Counter to count occurrences of each element in the list\n    counts = Counter(lst)\n    # Find the item with the highest occurrence and return it along with its frequency\n    return max(counts.items(), key=lambda x: x[1])",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s):\n    \"\"\"\n    Reverses the vowels in the input string s.\n    \n    Parameters:\n    s (str): The input string containing uppercase and lowercase letters.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n            \n    return ''.join(s_list)\n\n# Check function with provided data points\nprint(reverse_vowels(\"Python\"))   # Expected output: \"Python\"\nprint(reverse_vowels(\"USA\"))      # Expected output: \"ASU\"\nprint(reverse_vowels(\"ab\"))       # Expected output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: attempt to assign sequence of size 1 to extended slice of size 2"
    ],
    "generated_code": "def check_last(arr, p, q):\n    # Perform q operations on each pair of elements in the array.\n    for _ in range(q):\n        arr[::2] = map(lambda x, y: x + y if isinstance(x, int) and isinstance(y, int) else x + y % 2, \n                      arr[::2], arr[1::2])\n    \n    # Check if the last element is even or odd.\n    if len(arr) == 1:\n        if arr[0] % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    elif len(arr) > 1:\n        if arr[-1] % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n\n# Example usage\nprint(check_last([5,7,10], 3, 1))  # Output: ODD\nprint(check_last([2,3], 2, 3))     # Output: EVEN\nprint(check_last([1,2,3], 3, 1))   # Output: ODD",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula n(2n-1)\n    return n * (2 * n - 1)",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def cal_electbill(kWh_used):\n    if kWh_used < 0:\n        raise ValueError(\"kWh used cannot be negative\")\n    \n    basic_rate = 8.08\n    rate_per_kwh = 0.19\n    \n    return basic_rate + rate_per_kwh * kWh_used\n\ndef check():\n    assert abs(cal_electbill(75) - 246.25) < 0.01\n    assert abs(cal_electbill(265) - 1442.75) < 0.01\n    assert abs(cal_electbill(100) - 327.5) < 0.01\n    print(\"All test cases passed!\")\n\ncheck()",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(arr):\n    return sum(x == 0 for x in arr) / len(arr)",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize variables\n    power = 0\n    while n > 0:\n        if n % 2 == 1 and power == 0:\n            power = 1\n        elif n % 2 != 0:\n            return False\n        else:\n            power += 1\n        n //= 2\n    return power > 0",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tup_list):\n    result = []\n    for tup in tup_list:\n        for element in tup:\n            if not isinstance(element, int) and len(result) < len(tup):\n                continue\n            else:\n                result.append(element)\n    return result\n\n# Test cases\nprint(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))  # Should print [3, 4, 5, 7, 1]\nprint(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]))   # Should print [1, 2, 3, 4, 7, 8]\nprint(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) # Should print [7, 8, 9, 10, 11, 12]",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flip(arr, index):\n    \"\"\"\n    Helper function to reverse the first 'index' elements in an array.\n    \"\"\"\n    for i in range(index // 2):\n        arr[i], arr[index - i - 1] = arr[index - i - 1], arr[i]\n\ndef pancake_sort(arr):\n    n = len(arr)\n    while n > 0:\n        # Find the index of the maximum element in the unsorted portion\n        max_index = arr.index(max(arr[:n]))\n        \n        if max_index != n-1:\n            # Move the max element to its correct position\n            flip(arr, max_index + 1)\n            \n            # Move the largest element to its final sorted position\n            flip(arr, n)\n        \n        # Reduce the length of the unsorted portion\n        n -= 1\n    \n    return arr\n\n# Test cases\nprint(pancake_sort([15, 79, 25, 38, 69]))  # Output: [15, 25, 38, 69, 79]\nprint(pancake_sort([98, 12, 54, 36, 85]))  # Output: [12, 36, 54, 85, 98]\nprint(pancake_sort([41, 42, 32, 12, 23]))  # Output: [12, 23, 32, 41, 42]",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    return len(set(zip(list1, list2, list3)))",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test cases\nprint(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))  # Output: 2\nprint(find_lists(([1, 2], [3, 4], [5, 6])))      # Output: 3\nprint(find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1]))) # Output: 1",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n\n# Test cases\nprint(sum_Pairs([1,8,9,15,16],5))  # Expected output: 74\nprint(sum_Pairs([1,2,3,4],4))      # Expected output: 10\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14],9))  # Expected output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    arr.sort()\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    if min_val + k > max_val:\n        return 0\n    \n    diff = abs(min_val + k - max_val)\n    return diff",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    return sum(ord(char) for char in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, n, k):\n    dp = [[0 for _ in range(k+1)] for _ in range(n)]\n    \n    # Base case initialization\n    dp[0][k] = triangle[0][k]\n    \n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n                \n    return max(dp[n-1])\n\n# Test cases\nprint(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2))  # Output: 14\nprint(max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2))  # Output: 24\nprint(max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2))  # Output: 53",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def sum_digits_twoparts(number):\n    # Calculate the sum of all digits in the given number\n    digit_sum = sum(int(digit) for digit in str(number))\n    \n    return digit_sum\n\n# Test cases\nassert sum_digits_twoparts(35) == 17, \"Test case 1 failed\"\nassert sum_digits_twoparts(7) == 7, \"Test case 2 failed\"\nassert sum_digits_twoparts(100) == 19, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_subseq_with_diff_one(nums, target_sum):\n    \"\"\"\n    Finds the length of the longest subsequence in nums where each pair of consecutive elements differ by exactly one.\n    \n    Parameters:\n    nums (List[int]): The input list of integers.\n    target_sum (int): The target sum for consecutive differences.\n    \n    Returns:\n    int: The maximum length of the subsequence satisfying the condition.\n    \"\"\"\n    dp = {0: -1}  # Dictionary to store the length and index of subsequences ending with a specific remainder modulo target_sum\n    maxLength = 0\n    \n    for i, num in enumerate(nums):\n        nextMod = (num + target_sum) % target_sum\n        \n        if nextMod not in dp:\n            dp[nextMod] = i\n        else:\n            prevIndex = dp[nextMod]\n            maxLength = max(maxLength, i - prevIndex)\n        \n        dp[num % target_sum] = i\n            \n    return maxLength\n\n# Check function with provided data points\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Expected output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Expected output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Expected output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'does_Contain_B' is not defined",
      "Test 2: FAIL - name 'does_Contain_B' is not defined",
      "Test 3: FAIL - name 'does_Contain_B' is not defined"
    ],
    "generated_code": "def does_contain_b(a, b, c):\n    \"\"\"\n    This function checks if the number 'b' exists within the infinite sequence starting from 'a', with an increment of 'c'.\n    \n    Parameters:\n    a (int): The initial value of the sequence.\n    b (int): The number to be checked for presence in the sequence.\n    c (int): The incremental value between consecutive numbers in the sequence.\n    \n    Returns:\n    bool: True if 'b' is found in the sequence; otherwise, False.\n    \"\"\"\n    # Calculate the maximum possible occurrence of 'b' in the sequence\n    max_occurrence = ((float('inf') - a) / c)\n    \n    # Check if 'b' falls within this range\n    return b >= a and b <= max_occurrence * c",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_coprime(a, b):\n    \"\"\"\n    Check if two numbers 'a' and 'b' are coprime.\n    \n    Parameters:\n    - a (int): First integer.\n    - b (int): Second integer.\n    \n    Returns:\n    bool: True if 'a' and 'b' are coprime, False otherwise.\n    \"\"\"\n    return math.gcd(a, b) == 1",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a,b,c):\n    x = -b / (2 * a)\n    y = a * pow(x, 2) + b * x + c\n    return (x, y)\n\n# Test cases\nprint(parabola_vertex(5,3,2))  # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9,8,4))  # Expected output: (-0.4444444444444444, 2.2222222222222223)\nprint(parabola_vertex(2,4,6))  # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [row[index] for row in matrix]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0))  # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2))  # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3))  # Output: [2, 2, 5]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    # Calculate the value with all odd bits toggled on using bitwise NOT operator and right shift operation.\n    result = n ^ ((n >> 1) | (n & 1))\n    return result\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 0\nprint(even_bit_toggle_number(20))  # Expected output: 30\nprint(even_bit_toggle_number(30))  # Expected output: 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test cases\nprint(tuple_int_str( (('333', '33'), ('1416', '55')))) # ((333, 33), (1416, 55))\nprint(tuple_int_str( (('999', '99'), ('1000', '500')))) # ((999, 99), (1000, 500))\nprint(tuple_int_str( (('666', '66'), ('1500', '555')))) # ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    encoded = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            encoded.append([count, lst[i-1]])\n            count = 1\n    encoded.append([count, lst[-1]])\n    return encoded",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def min_Ops(nums, k, m):\n    \"\"\"\n    Finds the minimum number of operations required for all numbers in the list 'nums' to become equal.\n    \n    Args:\n    nums: List[int] - A list of integers representing the sequence of numbers.\n    k: int - The target number after which all numbers need to be equal.\n    m: int - The maximum number in the list.\n    \n    Returns:\n    int - The minimum number of operations needed.\n    \"\"\"\n    if len(set(nums)) == 1:\n        # If all elements are already equal to k, no operation is needed.\n        return 0\n    else:\n        diff = max(m-k, k-1)\n        count = 0\n        while nums[0] != k and nums[-1] != k:\n            for num in nums:\n                count += abs(num - k)\n                if num > k:\n                    k += diff\n                elif num < k:\n                    k -= diff\n            if nums[0] != k:\n                break\n            nums.pop(0)\n            nums.append(k)\n        return count\n\n# Example check function to verify the correctness of the solution\ndef check():\n    assert min_Ops([2,2,2,2], 4, 3) == 0\n    assert min_Ops([4,2,6,8], 4, 3) == -1\n    assert min_Ops([21,33,9,45,63], 5, 6) == 24\n    print(\"All test cases passed.\")\n\ncheck()",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def month_season(month, day):\n    if month in ['December', 'January', 'February']:\n        return 'winter'\n    elif month in ['March', 'April', 'May']:\n        return 'spring'\n    elif month in ['June', 'July', 'August']:\n        return 'summer'\n    else:\n        return 'fall'",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solution(a, b, n):\n    if a == 0:\n        if b != 0:\n            return 'No solution'\n        else:\n            if n % 2 == 0:\n                return f'x = {n // 2}, y = 0'\n            else:\n                return f'x = 0, y = {(n - 1) // 2}'\n    elif b == 0:\n        if n % a == 0:\n            return f'x = {n // a}, y = 0'\n        else:\n            return 'No solution'\n    else:\n        m = n // (a * b)\n        if a * m + b * m < n:\n            m += 1\n        k = n - a * m\n        l = b * m\n        if k % b == 0 and k / b == int(k / b):\n            return f'x = {m}, y = {k // b}'\n        else:\n            return 'No solution'",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8]))  # Output should be [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7]))  # Output should be [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7]))  # Output should be [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of positive integers starting from 'n' and decrementing by 2 each time until non-positive.\n    \n    Args:\n    - n: An integer representing the starting number of the sequence.\n\n    Returns:\n    - The sum of all positive integers in the series.\n    \"\"\"\n    total_sum = 0\n    while n >= 0:\n        total_sum += n\n        n -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'tan' is not defined",
      "Test 2: FAIL - name 'tan' is not defined",
      "Test 3: FAIL - name 'tan' is not defined"
    ],
    "generated_code": "def area_polygon(sides, length):\n    # Calculate and return the area of a regular polygon with given number of sides and side length\n    from math import pi\n    \n    return round((sides * pow(length, 2) / (4 * tan(pi / sides))) * 1e-6)",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def areEquivalent(numerator, denominator):\n    # Calculate the sum of divisors for numerator and denominator\n    sum_divisors_numerator = sum([i for i in range(1, int(numerator**0.5) + 1) if numerator % i == 0])\n    sum_divisors_denominator = sum([i for i in range(1, int(denominator**0.5) + 1) if denominator % i == 0])\n\n    # Check if the sums are equal\n    return sum_divisors_numerator == sum_divisors_denominator",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(s):\n    \"\"\"\n    Counts how many characters at the same position exist in both English lowercase and uppercase versions of themselves.\n    \n    Parameters:\n    s (str): The input string for which character positions are counted.\n    \n    Returns:\n    int: The number of positions where characters match the corresponding characters' position in the English alphabet.\n    \"\"\"\n    char_count = {}\n    total_matches = 0\n    \n    # Iterate over each character in the string\n    for i, char in enumerate(s):\n        lower_char = char.lower()\n        \n        # Count occurrences of lower case characters\n        if lower_char not in char_count:\n            char_count[lower_char] = 1\n        else:\n            char_count[lower_char] += 1\n        \n        # Check if there is an equivalent uppercase character\n        upper_char = chr(ord(char) - ord('a') + ord('A'))\n        if upper_char in char_count:\n            total_matches += char_count[char]\n    \n    return total_matches\n\n# Test cases\nprint(count_char_position(\"xbcefg\"))  # Expected output: 2\nprint(count_char_position(\"ABcED\"))   # Expected output: 3\nprint(count_char_position(\"AbgdeF\"))  # Expected output: 5",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_even_Pair(arr, target): \n    result = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if ((arr[i] ^ arr[j]) == target and (arr[i] ^ arr[j]) % 2 == 0): \n                result += 1\n    return result",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'next_Power_OF_2' is not defined. Did you mean: 'next_Power_Of_2'?"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \n    Parameters:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    while result < n:\n        result *= 2\n    return result\n\n# Test cases to verify the correctness of the function\nassert next_Power_Of_2(0) == 1, \"Test case 1 failed\"\nassert next_Power_OF_2(5) == 8, \"Test case 2 failed\"\nassert next_Power_OF_2(17) == 32, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    # Initialize count variable to zero\n    count = 0\n    \n    # Iterate through each element in the array\n    for i in arr:\n        # If the current element is equal to the target number, increment the count\n        if i == num:\n            count += 1\n            \n    # Return the final count of occurrences of the number\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Initialize the first two Pell numbers\n        prev = 0\n        curr = 1\n        for _ in range(2, n + 1):\n            next_num = 2 * prev + curr\n            prev, curr = curr, next_num\n        return curr",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def perimeter_pentagon(sides):\n    # Calculate the perimeter of a pentagon given its side lengths\n    return sum(sides) * 4",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+4] == \"std\":\n            count += 1\n    return count",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_splchar(s):\n    # Remove all non-alphanumeric characters using regex and return result\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(keyvalue_pairs):\n    result = {}\n    for k, v in keyvalue_pairs:\n        if k not in result:\n            result[k] = []\n        result[k].append(v)\n    return result",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(parentheses_str):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in parentheses_str:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            return False\n    \n    return not stack",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(side1, side2, side3):\n    return sum((side1, side2, side3))",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def answer(a, b):\n    # Calculate least common multiple using Euclidean algorithm\n    def lcm(x, y):\n        while x != y:\n            if x > y:\n                x -= y\n            else:\n                y -= x\n        return x\n    \n    # Check all combinations of pairs where both elements in pair are less than or equal to max_num\n    for i in range(min(a, b), min(a + 1, b)):\n        for j in range(i, min(a, b)):\n            if i < j and lcm(i, j) >= a and lcm(i, j) <= b:\n                return (i, j)\n\n# Example usage\nprint(answer(3, 8))  # Output: (3, 6)\nprint(answer(2, 6))  # Output: (2, 4)\nprint(answer(1, 3))  # Output: (1, 2)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef string_literals(literals, main_string):\n    for literal in literals:\n        if re.search(r'\\b' + re.escape(literal) + r'\\b', main_string, re.IGNORECASE):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_num_keith(n):\n    # Initialize variables\n    k = n\n    seen = set()\n    \n    # Continue until we reach 0\n    while k != 0:\n        # Check if it's a Keith number and add its digits\n        k = sum(int(digit) for digit in str(k))\n        \n        # Add to seen if new digit\n        if k not in seen:\n            seen.add(k)\n            \n    # Return True if reached 0 after adding all numbers from n, else False\n    return k == 0\n\n# Test cases\nprint(is_num_keith(14))  # Expected output: True\nprint(is_num_keith(12))  # Expected output: False\nprint(is_num_keith(197)) # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the great-circle distance between two points on the Earth's surface given their \n    latitude and longitude in decimal degrees.\n    \n    Args:\n        lat1 (float): Latitude of the first point in decimal degrees.\n        lon1 (float): Longitude of the first point in decimal degrees.\n        lat2 (float): Latitude of the second point in decimal degrees.\n        lon2 (float): Longitude of the second point in decimal degrees.\n        \n    Returns:\n        float: The distance between the two points in meters.\n    \"\"\"\n    R = 6371.0 # Radius of the earth in kilometers\n    \n    phi1, lam1 = math.radians(lat1), math.radians(lon1)\n    phi2, lam2 = math.radians(lat2), math.radians(lon2)\n    \n    dphi = phi2 - phi1\n    dlam = lam2 - lam1\n    \n    a = math.sin(dphi/2)**2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlam/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    \n    return R * c * 1000 # Convert to meters\n\n# Example check function calls\nprint(distance_lat_long(23.5, 67.5, 25.5, 69.5))  # Expected output is close to 12179.372041317429\nprint(distance_lat_long(10.5, 20.5, 30.5, 40.5))  # Expected output is close to 6069.397933300514\nprint(distance_lat_long(10, 20, 30, 40))         # Expected output is close to 6783.751974994595",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(strs, n):\n    if not strs:\n        return ''\n    \n    # Initialize the prefix with the first string's characters\n    prefix = strs[0][:n]\n    \n    # Check if all other strings have the same prefix\n    for s in strs:\n        if len(s) < n or s[:n] != prefix:\n            return prefix[:n-1]  # Return the prefix excluding the last character\n    \n    return prefix  # The full prefix is found\n\n# Test cases\nprint(common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4))  # Expected output: 'ta'\nprint(common_prefix([\"apples\", \"ape\", \"april\"], 3))  # Expected output: 'ap'\nprint(common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3))  # Expected output: 'teen'",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(s):\n    upper = [char for char in s if char.isupper()]\n    lower = [char for char in s if char.islower()]\n    special = [char for char in s if not char.isalnum()]\n    numbers = [char for char in s if char.isdigit()]\n\n    return (upper, lower, special, numbers)",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport collections\n\ndef count_pairs(nums: List[int], k: int, v: int) -> int:\n    count = collections.Counter()\n    for num in nums:\n        if num + v not in count and num - v not in count:\n            count[num] += 1\n    return sum(v * (i - j) // abs(i - j) for i in count.keys() for j in count if abs(i - j) == v)",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(nums, num):\n    return any(num < x for x in nums)",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a, b, c):\n    # Calculate and return the coordinates of the focus using the formulas derived from the standard form of a parabolic equation.\n    x = -(b**2)/(4*a) - c/(a)\n    y = (1 + b**2/((4*a)**2)) * (-c/a) + ((b**2)/((4*a)**2))\n    \n    return (x, y)\n\n# Test cases\nprint(parabola_focus(5, 3, 2))  # Expected output: (-0.3, 1.6)\nprint(parabola_focus(9, 8, 4))  # Expected output: (-0.4444444444444444, 2.25)\nprint(parabola_focus(2, 4, 6))  # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef check_literals(text, patterns):\n    # Compile the regular expression pattern for each literal in the patterns list.\n    compiled_patterns = [re.compile(pattern) for pattern in patterns]\n    \n    # Search through the text with all the compiled patterns.\n    for pattern in compiled_patterns:\n        match = pattern.search(text)\n        \n        # If a match is found, return 'Matched!' immediately and break out of the loop.\n        if match:\n            return 'Matched!'\n    \n    # If no matches were found after searching through all patterns, return 'Not Matched!'.\n    return 'Not Matched!'\n\n# Test cases provided at the beginning can be used to verify the correctness of the function.\nassert check_literals('The quick brown fox jumps over the lazy dog.', ['fox', 'dog']) == 'Matched!'\nassert check_literals('Jumped over the lazy dog.', ['cat', 'dog']) == 'Not Matched!'\nprint(check_literals('Jumped over the lazy dog.', ['fox', 'horse']))  # Expected output: Not Matched!",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill dp table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    return dp[m][n]\n\n# Test cases\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: 4\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6))   # Output: 3\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4))       # Output: 2",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef prod_Square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    for i in range(sqrt_n + 1):\n        if i * i == n:\n            return True\n    return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i]-1] != nums[i]:\n            temp = nums[nums[i]-1]\n            nums[nums[i]-1] = nums[i]\n            nums[i] = temp\n    \n    for i in range(n):\n        if nums[i] != i+1:\n            return i+1\n    \n    return n+1",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the area of the rectangle formed by the coordinates\n    area = (x2 - x1 + 1) * (y2 - y1 + 1)\n    \n    # Calculate the total possible integer points in both dimensions\n    total_points = abs((x2 - x1)) * abs(y2 - y1)\n    \n    # The integral points will be one less than the total possible points\n    integral_points = total_points - area\n    \n    return integral_points",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    # List of months with 30 days\n    thirty_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Check if the input month name is in the list of months with 30 days\n    return month_name in thirty_days_months",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_String(s):\n    # Check if the string contains at least one letter and one number\n    for char in s:\n        if not char.isalnum(): \n            return False\n    return len(s) > 0",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(tup):\n    # Convert the tuple to a list to allow modification of elements\n    temp = list(tup)\n    \n    # Use set to filter out duplicate elements and convert back to tuple\n    result = tuple(set(temp))\n    \n    return result",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_number):\n    # Convert octal string to integer\n    decimal_value = int(str(octal_number), 8)\n    return decimal_value\n\n# Test cases\nprint(octal_To_Decimal(25))  # Expected output: 21\nprint(octal_To_Decimal(30))  # Expected output: 24\nprint(octal_To_Decimal(40))  # Expected output: 32",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first(arr, target, n):\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target and (mid == 0 or arr[mid-1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    new_lst = []\n    for t in lst:\n        if len(t) != k:\n            new_lst.append(t)\n    return new_lst",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_exponentio(tuple_a, tuple_b):\n    result = []\n    for i in range(len(tuple_a)):\n        product = 1\n        for j in range(len(tuple_b)):\n            product *= tuple_a[i] * tuple_b[j]\n        result.append(product)\n    return tuple(result)\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))  # Expected output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)))  # Expected output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)))  # Expected output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: math domain error"
    ],
    "generated_code": "import math\n\ndef area_of_ellipse(semi_major_axis, semi_minor_axis):\n    return math.pi * semi_major_axis * semi_minor_axis\n\ndef circumference_of_ellipse(semi_major_axis, semi_minor_axis):\n    return 2 * math.sqrt((semi_major_axis + semi_minor_axis) * (semi_major_axis - semi_minor_axis)) * math.cosh(math.acos(-1/(semi_major_axis / semi_minor_axis)))\n\ndef largest_triangle(semi_major_axis, semi_minor_axis):\n    max_perimeter = 0\n    for n in range(3, int(circumference_of_ellipse(semi_major_axis, semi_minor_axis) // semi_major_axis)):\n        current_area = area_of_ellipse(semi_major_axis, semi_minor_axis)\n        while True:\n            new_side_length = (current_area * 2 / semi_major_axis)**(1/2)\n            if not new_side_length.is_integer():\n                break\n            perimeter = (n-2) * semi_major_axis + 2 * new_side_length\n            if perimeter > max_perimeter:\n                max_perimeter = perimeter\n                break\n            else:\n                continue\n    return max_perimeter\n\n# Test cases\nprint(largest_triangle(4, 2)) # Expected output: 10.392304845413264\nprint(largest_triangle(5, 7)) # Expected output: 4.639421805988064\nprint(largest_triangle(9, 1)) # Expected output: 105.2220865598093",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the largest power of 2 less than or equal to n.\n    \n    Parameters:\n    - n: An integer\n    \n    Returns:\n    - The largest power of 2 less than or equal to n as an integer.\n    \"\"\"\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n\n# Test cases\nprint(highest_Power_of_2(10)) # Expected output: 8\nprint(highest_Power_of_2(19)) # Expected output: 16\nprint(highest_Power_of_2(32)) # Expected output: 32",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(lst):\n    max_value = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_value]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all elements in the list are the same\n    first_element = lst[0]\n    for element in lst:\n        if element != first_element:\n            return False\n    return True",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'l'"
    ],
    "generated_code": "def remove_even(s):\n    result = \"\"\n    for char in s:\n        if int(char) % 2 != 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y  # XOR of x and y gives numbers where each bit is different from both x and y.\n    hamming_distance = bin(xor_result).count('1')  # Counting set bits in the result gives the Hamming Distance.\n    return hamming_distance",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, char):\n    # Initialize counter variable\n    count = 0\n    \n    # Loop through each character in the string\n    for c in s:\n        if c == char:\n            # Increment counter if character matches\n            count += 1\n            \n    # Return the final count\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def inversion_elements(tuples_list):\n    # Sort the tuples based on their absolute values and store them in descending order.\n    sorted_tuples = sorted(tuples_list, key=lambda x: abs(x), reverse=True)\n\n    # Calculate inversions for each element compared with its next element in sorted order.\n    inversions = [abs(sorted_tuples[i] - sorted_tuples[i+1]) if i < len(sorted_tuples) - 1 else None for i in range(len(sorted_tuples) - 1)]\n\n    return inversions\n\n# Check function to verify the correctness of the generated function with provided data points.\ndef check_function():\n    assert inversion_elements([7, 8, 9, 1, 10, 7]) == [-8, -9, -10, -2, -11, -8]\n    assert inversion_elements([2, 4, 5, 6, 1, 7]) == [-3, -5, -6, -7, -2, -8]\n    assert inversion_elements([8, 9, 11, 14, 12, 13]) == [-9, -10, -12, -15, -13, -14]\n\ncheck_function()",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        if i % 2 == 0:\n            result.append(''.join(tuples_list[i:i+2]))\n    return result",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    max_length = 0\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if s[i-1] == s[j-1] and i != j:\n                dp[i][j] = dp[i-1][j-1] + 1\n                max_length = max(max_length, dp[i][j])\n                \n    return max_length\n\n# Test cases\nprint(find_longest_repeating_subseq(\"AABEBCDD\"))  # Output: 3\nprint(find_longest_repeating_subseq(\"aabb\"))      # Output: 2\nprint(find_longest_repeating_subseq(\"aab\"))       # Output: 1",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(s):\n    # Regular expression to match a string representing a decimal number with exactly two digits after the decimal point\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('0.21'))    # Expected output: True\nprint(is_decimal('123.1214'))# Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef heap_replace(heap, new_item):\n    \"\"\"Replace the smallest item with new_item in the min-heap represented by `heap`\n    \n    Args:\n        heap (list): Min Heap represented as list where heap[0] is the root.\n        new_item: Item that needs to be inserted into the heap\n    \n    Returns:\n        None\n    \"\"\"\n    heap[0] = new_item  # Replace the root of the heap with new_item\n    _sift_down(heap, 0)  # Ensure the heap property is maintained after replacement\n\ndef _sift_down(heap, startpos):\n    \"\"\"Helper function to maintain the heap property for a min-heap\n    \n    Args:\n        heap (list): Min Heap represented as list.\n        startpos (int): The position to start maintaining the heap property from.\n        \n    Returns:\n        None\n    \"\"\"\n    endpos = len(heap)\n    newItemPosition = startpos\n    childPos = 2 * newItemPosition + 1  # Leftmost leaf\n    \n    while childPos < endpos:\n        # Set childPos to index of smaller child.\n        rightChildPos = childPos + 1\n        if rightChildPos < endpos and not heap[childPos] <= heap[rightChildPos]:\n            childPos = rightChildPos\n        \n        # Move the larger child up.\n        if heap[newItemPosition] >= heap[childPos]:\n            break\n        \n        heap[newItemPosition], heap[childPos] = heap[childPos], heap[newItemPosition]\n        newItemPosition = childPos\n        childPos = 2 * newItemPosition + 1\n\n# Example usage:\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 21))  # Output: [21, 25, 23, 44, 39, 68, 89]\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 110))  # Output: [23, 25, 68, 44, 39, 110, 89]\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 500))  # Output",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    \"\"\"\n    This function checks if the input string contains only the lowercase English letters (a-z), digits (0-9),\n    and punctuation marks (!@#$%^&*()_+).\n    \n    :param s: String to be checked.\n    :return: Boolean value indicating whether the string meets the criteria.\n    \"\"\"\n    pattern = r\"^[a-zA-Z0-9!@#$%^&*()_+\\d]+$\"\n    return bool(re.match(pattern, s))\n\n# Test cases to verify the correctness of the function\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'nth'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'nth'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'nth'"
    ],
    "generated_code": "def count_Num(oth, nth):\n    # Check if both bits are set using bitwise AND operation.\n    if (oth & 1) == 1 and (nth & 1) == 1:\n        return 1\n    else:\n        return 0",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through all natural numbers up to n and calculate their fourth powers\n    for i in range(1, n + 1):\n        total_sum += i ** 4\n    \n    return total_sum\n\n# Test cases\nassert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275\nprint(\"All tests passed successfully.\")",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    # Concatenate the tuples and convert them into a single list with elements separated by commas\n    result = [str(element) for pair in zip(tuple1, tuple2) for element in pair]\n    return tuple(result)",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def degree_radian(radians):\n    return (radians * 180) / 3.141592653589793",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - cannot unpack non-iterable int object",
      "Test 2: FAIL - not enough values to unpack (expected 2, got 1)",
      "Test 3: FAIL - not enough values to unpack (expected 2, got 1)"
    ],
    "generated_code": "def decode_list(rle_list):\n    decoded = []\n    for count, item in rle_list:\n        decoded.extend([item] * count)\n    return decoded",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset_list(subset_list, main_list):\n    for sub in subset_list:\n        found = True\n        for item in sub:\n            if not any(item == sublist for sublist in main_list):\n                found = False\n                break\n        if found:\n            return False\n    return True",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Repeated_Char(s):\n    char_set = set()\n    for i in range(len(s)):\n        if s[i] in char_set:\n            return s[i]\n        else:\n            char_set.add(s[i])\n    return '\\0'",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Operations(x, y):\n    # Calculate the difference between x and y\n    diff = abs(y - x)\n    \n    # Return the number of steps needed to make x equal to y\n    return diff // 2 + 1 if diff % 2 == 0 else diff // 2",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef extract_min_max(tup: Tuple[int], k: int) -> Tuple[int]:\n    \"\"\"\n    Extracts the minimum and maximum of k smallest and largest numbers from the given tuple.\n    \n    Parameters:\n    tup (Tuple[int]): The input tuple containing integer values.\n    k (int): Number of elements to find as minimum and maximum.\n    \n    Returns:\n    Tuple[int]: A tuple containing the minimum and maximum of k smallest and largest numbers from the input tuple.\n    \"\"\"\n    # Sort the tuple\n    sorted_tup = sorted(tup)\n    min_k_elements = tuple(sorted_tup[-k:])\n    max_k_elements = tuple(sorted_tup[:k])\n    return min_k_elements + max_k_elements\n\n# Example usage\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Expected output: (3, 5, 8, 20)\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))   # Expected output: (1, 2, 4, 5, 6, 7)\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)) # Expected output: (2, 3, 4, 7, 8, 9, 11)",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\ndef replace_max_specialchar(s,n=1):\n    # Replace consecutive special characters with a single colon and limit the replacement to n occurrences\n    return re.sub(r'([,.])\\1+', r'\\1:', s, count=n)",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    # Check if all elements in the tuple have the same data type\n    first_type = type(tup[0])\n    for element in tup:\n        if type(element) != first_type:\n            return False\n    return True",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_majority(arr, n, m):\n    count = 0\n    max_count = 0\n    \n    for i in range(n - m + 1):\n        for j in range(i, i + m):\n            if arr[j] == arr[i]:\n                count += 1\n        \n        if count > max_count:\n            max_count = count\n        count = 0\n    \n    return max_count >= m // 2",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of set bits in the binary representation of n.\n    \n    Parameters:\n    n (int): The integer whose set bits are to be counted.\n    \n    Returns:\n    int: The number of set bits in the binary representation of n.\n    \"\"\"\n    # Convert the number to its binary representation and remove the '0b' prefix\n    bin_n = bin(n)[2:]\n    # Count the number of '1's in the binary string\n    set_bits_count = bin_n.count('1')\n    return set_bits_count\n\n# Check function with provided data points\nassert count_Set_Bits(2) == 1, \"Test case 1 failed\"\nassert count_Set_Bits(4) == 1, \"Test case 2 failed\"\nassert count_Set_Bits(6) == 2, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min(arr, left, right):\n    # Base case: if there is one element left, return it as the minimum\n    if left == right:\n        return arr[left]\n    \n    # Base case: if no elements left after rotation, return None or -1 etc.\n    if right - left == 1:\n        return arr[right]\n    \n    mid = (left + right) // 2\n    \n    # If the middle element is greater than the last element, minimum lies in the right half\n    if arr[mid] > arr[right]:\n        return find_Min(arr, mid, right)\n    \n    # If the middle element is less than the first element, minimum lies in the left half\n    elif arr[mid] < arr[left]:\n        return find_Min(arr, left, mid)\n    \n    # Else, rotation must be between mid and left indices, so we need to adjust mid to get correct min\n    else:\n        while mid >= left and arr[mid] == arr[mid-1]:\n            mid -= 1\n        \n        return arr[mid]\n\n# Test cases\nprint(find_Min([1,2,3,4,5], 0, 4))  # Expected output: 1\nprint(find_Min([4,6,8], 0, 2))      # Expected output: 4\nprint(find_Min([2,3,5,7,9], 0, 4))  # Expected output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(input_str):\n    # Initialize an empty string to store characters at even indices\n    result = \"\"\n    \n    # Iterate through the input string\n    for i in range(len(input_str)):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Append the character at the even index to the result string\n            result += input_str[i]\n    \n    return result",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    # Create masks for each bit position and perform bitwise AND with num\n    mask1 = ~(1 << (start_bit - 1))  # Mask for first bit position\n    mask2 = (1 << (end_bit - 1)) - 1  # Mask for last bit position\n    \n    result = ((mask1 & mask2) | (num >> start_bit)) & (mask2 ^ mask1)\n    \n    # If result is zero, all bits between start_bit and end_bit inclusive are set; otherwise, they are not.\n    return bool(result)\n\n# Test cases\nprint(all_Bits_Set_In_The_Given_Range(4, 1, 2))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(17, 2, 4))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(39, 4, 6))  # Expected output: False",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one for storing negative numbers and another for iterating through the list\n    start = end = 0\n    \n    while end < n:\n        if arr[end] < 0:\n            # Swap the element at 'end' with the element at 'start'\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n        end += 1\n    \n    return arr",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s, c):\n    return s.replace(' ', c)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum(triangle, n):\n    # Initialize a DP table with dimensions n x n+1 where n is the number of rows in the triangle.\n    dp = [[0 for _ in range(n + 1)] for __ in range(n)]\n    \n    # Iterate over each row in the triangle from bottom to top.\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1):\n            # If we're at the leftmost column, take the current element plus the value above it.\n            if j == i:\n                dp[i][j] += triangle[i][j]\n            else:\n                # Otherwise, take the maximum sum between the two possible paths and add the current element.\n                dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    \n    # The first element in the DP table will contain the maximum sum.\n    return dp[0][0]\n\n# Test cases\nprint(max_sum([[1], [2,1], [3,3,2]], 3))  # Expected output: 6\nprint(max_sum([[1], [1, 2], [4, 1, 12]], 3))  # Expected output: 15\nprint(max_sum([[2], [3,2], [13,23,12]], 3))  # Expected output: 28)",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def larg_nnum(nums, n):\n    return sorted(nums)[-n:]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n    \n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test cases to verify the correctness of the function\nassert abs(lateralsuface_cylinder(10,5)-314.15) < 0.001\nassert abs(lateralsuface_cylinder(4,5)-125.66) < 0.001\nassert abs(lateralsuface_cylinder(4,10)-251.32) < 0.001\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def even_bit_set_number(n):\n    # Calculate the number of bits in n\n    num_bits = int(math.log2(n)) + 1\n    \n    # Create a mask with all even bits turned off (1s)\n    mask = ((1 << num_bits) - 1) ^ ((1 << (num_bits // 2)) - 1)\n    \n    # Apply the mask to n to get the result\n    result = n & mask\n    \n    return result",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(triangle_size, point_count):\n    if point_count > 2 * triangle_size ** 2 + triangle_size:\n        return -1\n    elif triangle_size == 1:\n        return 0\n    else:\n        total_triangles = (point_count // 3) ** 2\n        remaining_points = (triangle_size ** 2 - (point_count % 3)) // 2\n        extra_points_needed = (remaining_points + point_count % 3) // 2\n        if extra_points_needed < triangle_size and remaining_points >= 2:\n            return total_triangles + (extra_points_needed // 2)\n        else:\n            return total_triangles",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\nimport itertools\n\ndef check_occurences(tuples_list):\n    \"\"\"\n    Given a list of tuples where each tuple contains two elements,\n    returns a dictionary where keys are pairs of identical elements and values are counts of how many times they appear as a pair.\n    \n    :param tuples_list: List of tuples containing elements (a, b)\n    :return: Dictionary with pairs of elements as keys and their occurrence count as values\n    \"\"\"\n    # Grouping the input tuples by their first element and then finding all combinations from these groups\n    grouped = defaultdict(set)\n    for t in tuples_list:\n        grouped[t[0]].add(t[1])\n        \n    # Converting sets to dictionaries before returning\n    result_dict = {tuple(sorted(group)): len(group) for group in grouped.values()}\n    return result_dict\n\n# Test cases\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))  # Expected output: {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nprint(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]))   # Expected output: {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nprint(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]))  # Expected output: {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    result = n * (n + 1) // 2\n    for i in range(n - 1):\n        if s[i] == 'a' and s[i+1] == 'b':\n            result -= 1\n    return result\n\n# Test cases\nprint(number_of_substrings(\"abc\"))  # Expected output: 6\nprint(number_of_substrings(\"abcd\")) # Expected output: 10\nprint(number_of_substrings(\"abcde\"))# Expected output: 15",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    \"\"\"\n    This function calculates the total number of increasing sequences of length n,\n    where each sequence's elements follow a specific order based on given constraints.\n    \n    Args:\n    n (int): The length of the sequence.\n    m (int): An upper limit for the maximum value in the sequence.\n    \n    Returns:\n    int: The total count of valid sequences.\n    \"\"\"\n    if n == 1:\n        return m\n    \n    total_count = 0\n    for i in range(m + 1):\n        if i >= 2 and i <= m:\n            # Recursive call with decreased length and increased max constraint\n            total_count += get_total_number_of_sequences(n-1, max(i*2, m))\n    \n    return total_count\n\n# Test Cases\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(lst, new_lst):\n    lst[-1:] = new_lst\n    return lst",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def array_3d(x,y,z):\n    return [[[ '*' for _ in range(z)] for _ in range(y)] for _ in range(x)]",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(s):\n    # Initialize character counter\n    char_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        char_count += 1\n        \n    return char_count",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sort_on_occurence(lst):\n    # Sort the list using custom key\n    lst.sort(key=lambda x: len(set(x[0])), reverse=True)\n    return lst",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_Perfect_Square(n):\n    import math\n    # Calculate the integer square root of n\n    i = int(math.sqrt(n))\n    # Find the next integer whose square is just less than or equal to n\n    j = i + 1\n    # Square the value of j and check if it's the next perfect square\n    while j * j <= n:\n        j += 1\n    # Return the perfect square greater than n\n    return j * j",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arr, n):\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    # Calculate the maximum sum of all increasing subsequences ending at each index.\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], arr[i])\n        \n    # Find the maximum value between dp[i-2] and dp[i-1].\n    ans = float('-inf')\n    for i in range(n):\n        if dp[i - 2] >= dp[i - 1]:\n            ans = max(ans, dp[i] + arr[i])\n            \n    return ans",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    x = n / 2.0  # Initial guess based on half of n\n    epsilon = 1e-10  # Small value to check convergence\n    while abs(x * x - n) > epsilon:\n        x = (x + n / x) / 2.0  # Babylonian iteration formula\n    return x",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n\n# Test cases\nprint(lps(\"TENS FOR TENS\"))  # Expected output: 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Expected output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Expected output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def harmonic_sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += 1 / i\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, elem):\n    # Initialize a counter variable\n    count = 0\n    # Iterate through each item in the tuple\n    for i in tup:\n        if i == elem:\n            count += 1\n    # Return the final count\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, new_elem):\n    return [new_elem] + lst\n\n# Test cases\nprint(insert_element(['Red', 'Green', 'Black'], 'c')) # ['c', 'Red', 'c', 'Green', 'c', 'Black']\nprint(insert_element(['python', 'java'], 'program')) # ['program', 'python', 'program', 'java']\nprint(insert_element(['happy', 'sad'], 'laugh')) # ['laugh', 'happy', 'laugh', 'sad']",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'cmath' is not defined"
    ],
    "generated_code": "def convert(complex_num):\n    real_part = abs(complex_num)\n    angle_in_radians = cmath.phase(complex_num)\n    angle_degrees = math.degrees(angle_in_radians)\n    return (real_part, angle_degrees)\n\n# Test cases\nprint(convert(1))   # Expected output: (1.0, 0.0)\nprint(convert(4))   # Expected output: (4.0, 0.0)\nprint(convert(5))   # Expected output: (5.0, 0.0)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    # Initialize a counter for integer numbers\n    num_count = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Check if the element is an integer\n        if isinstance(item, int):\n            num_count += 1\n            \n    # Return the total count of integer numbers\n    return num_count",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef words_ae(input_string):\n    # Find all words that start with 'a' or 'e'\n    return [word for word in re.findall(r'\\b[a-e]\\w+', input_string)]",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import product\n\ndef combinations_colors(colors_list, n):\n    \"\"\"\n    Generates all possible combinations with repetitions for choosing 'n' numbers \n    from the list of colors.\n    \n    :param colors_list: List of available colors.\n    :param n: Number of colors to choose in each combination.\n    :return: A list containing all unique combinations.\n    \"\"\"\n    return [color_tuple for color_tuple in product(colors_list, repeat=n)]\n\n# Test Cases\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 1))  # Expected: [('Red',), ('Green',), ('Blue',)]\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 2))  # Expected: [('Red', 'Red'), ('Red', 'Green'), ..., ('Blue', 'Blue')]\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 3))  # Expected: [('Red', 'Red', 'Red'), ...]",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Primes_nums(n):\n    if n <= 1:\n        return 0\n    primes = [True for _ in range(n+1)]\n    p = 2\n    while(p * p <= n):\n        if (primes[p] == True): \n            for i in range(p * p, n+1, p):\n                primes[i] = False\n        p += 1\n    \n    return sum(primes[2:n])",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(a, b):\n    return(b, a)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_odd = lambda lst: sum(1 for i in lst if i % 2 != 0)",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tuple1, tuple2):\n    # Compare each element of the first and second tuple in parallel.\n    # The larger value is kept for corresponding elements, smaller values from tuple2 replace those in tuple1.\n    max_tuple = []\n    for x, y in zip(sorted(tuple1[0]), sorted(tuple2[0])):\n        if x > y:\n            max_tuple.append(x)\n        else:\n            max_tuple.append(y)\n\n    # Append remaining elements from either tuple after comparing them.\n    max_tuple.extend(max(tuple1[1:], tuple2[1:]))\n\n    return (tuple(max_tuple[:2]), tuple(max_tuple[2:]))\n\n# Test cases\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndentationError: expected an indented block after function definition on line 2"
    ],
    "generated_code": "def is_newman_shanks_williams_prime(n):\n    # Your implementation here\n\ndef newman_prime(n):\n    i = n - 1\n    while True:\n        if is_newman_shanks_williams_prime(i + 1) == n:\n            return i + 1\n        i += 1",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(tuple_a, tuple_b):\n    result = [a / b for a, b in zip(tuple_a, tuple_b)]\n    return tuple(result)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n\n# Test cases\nprint(split_two_parts([1,1,2,3,4,4,5,1],3))  # Expected output: ([1, 1, 2], [3, 4, 4, 5, 1])\nprint(split_two_parts(['a', 'b', 'c', 'd'],2))  # Expected output: (['a', 'b'], ['c', 'd'])\nprint(split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4))  # Expected output: (['p', 'y', 't', 'h'], ['o', 'n'])",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n# Test Cases\nprint(merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200}))  # Expected output: {'x': 300, 'y': 200, 'a': 100, 'b': 200}\nprint(merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900}))  # Expected output: {'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}\nprint(merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40}))  # Expected output: {'x': 30, 'y': 40, 'a': 10, 'b': 20}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(animal_age):\n    # Base case for ages less than one human year\n    if animal_age < 1:\n        return round(animal_age * 10.5)\n    \n    # For ages greater than or equal to one human year\n    else:\n        human_years = int(animal_age // 7) + (animal_age % 7 > 0)\n        return round((human_years - 1) * 7 + 10.5 * ((animal_age - human_years * 7)))\n\n# Test cases\nprint(dog_age(12))   # Expected output: 61\nprint(dog_age(15))   # Expected output: 73\nprint(dog_age(24))   # Expected output: 109",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    - side_length (int): The length of one edge of the cube.\n    \n    Returns:\n    int: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2\n\n# Check function with provided data points\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(9) == 324\nassert lateralsurface_cube(10) == 400\n\nprint(\"All checks passed successfully.\")",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over the first n odd natural numbers\n    for i in range(n * 2 - 1, 1, -2):\n        # Add the square of each number to the total sum\n        total_sum += i ** 2\n        \n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    Parameters:\n    n (int): The position of the star number in the sequence.\n    \n    Returns:\n    int: The nth star number.\n    \"\"\"\n    result = ((n * (2 * n - 1)) ** 2)\n    return result\n\n# Check function with provided data points\nassert find_star_num(3) == 37, \"Test case 1 failed\"\nassert find_star_num(4) == 73, \"Test case 2 failed\"\nassert find_star_num(5) == 121, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(numbers_list, length):\n    total_sum = 0\n    for i in range(0, len(numbers_list), 2): # Iterate through indices with step of 2\n        if numbers_list[i] % 2 == 0:   # Check if number is even\n            total_sum += numbers_list[i]\n    return total_sum\n\n# Test Cases\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8],6)) # Expected output: 30\nprint(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10)) # Expected output: 26\nprint(sum_even_and_even_index([5, 6, 12, 1],4)) # Expected output: 12",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    # Initialize sum with zero\n    total_sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(1, n+1):\n        # Add the fifth power of the current even number to the total sum\n        total_sum += ((i * 2)**5)\n    \n    # Return the computed sum\n    return total_sum",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(tuples_list):\n    # Extracting the last element from each tuple in the list\n    extracted_elements = [t[-1] for t in tuples_list]\n    return extracted_elements",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18)))  # Output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45, 16)))  # Output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12)))  # Output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n):\n    # Initialize result as 0\n    result = 0\n    \n    # Iterate from 0 to n where every alternate element is considered for binomial coefficient calculation\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient using combination formula and add it to result if index is even\n        result += comb(i, i//2)\n    \n    return result\n\n# Helper function to calculate combinations (binomial coefficient)\nfrom math import comb\n\n# Example usage:\nprint(even_binomial_Coeff_Sum(4))   # Expected output: 8\nprint(even_binomial_Coeff_Sum(6))   # Expected output: 32\nprint(even_binomial_Coeff_Sum(2))   # Expected output: 2",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, target, index):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == target:\n            count += 1\n        elif count == index + 1 and i != index:\n            return i\n    return -1\n\n# Test Cases\nprint(get_Position([2,5,4],3,2)) # Expected output: 2\nprint(get_Position([4,3],2,2))   # Expected output: 2\nprint(get_Position([1,2,3,4],4,1)) # Expected output: 4",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return round(math.pi * radius**2 * height)",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(dict_input, value):\n    \"\"\"\n    Filters out items from a dictionary where the value is less than the given threshold.\n    \n    Parameters:\n        dict_input (dict): The input dictionary containing individuals as keys and their heights in centimeters as values.\n        value (int): The minimum height requirement for an individual to be included in the output dictionary.\n        \n    Returns:\n        dict: A new dictionary with individuals meeting the specified height criteria.\n    \"\"\"\n    filtered_dict = {key: val for key, val in dict_input.items() if val >= value}\n    return filtered_dict",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_first_elements(tup):\n    # Initialize the count of elements occurring before the record\n    count = 0\n    \n    # Iterate through the tuple starting from the first element\n    for i, elem in enumerate(tup):\n        if isinstance(elem, tuple):\n            # If an element is a tuple, increment the count\n            count += 1\n        else:\n            break\n            \n    return count",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n and returns the nth decagonal number.\n    \n    Parameters:\n    - n: The position of the decagonal number in the sequence.\n    \n    Returns:\n    - The nth decagonal number as an integer.\n    \"\"\"\n    # Formula to calculate nth decagonal number\n    decagonal_number = ((3*n**2 - n)/2)\n    return int(decagonal_number)\n\n# Function to check if the solution is correct for given test cases\ndef check_solution():\n    assert is_num_decagonal(3) == 27, \"Test case 1 failed\"\n    assert is_num_decagonal(7) == 175, \"Test case 2 failed\"\n    assert is_num_decagonal(10) == 370, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'all_unique' is not defined",
      "Test 2: FAIL - name 'all_unique' is not defined",
      "Test 3: FAIL - name 'all_unique' is not defined"
    ],
    "generated_code": "def is_all_unique(arr):\n    # Check if the length of the array is equal to the length of a set created from it\n    return len(arr) == len(set(arr))\n\n# Test cases\nprint(is_all_unique([1,2,3]))  # Expected output: True\nprint(is_all_unique([1,2,1,2]))  # Expected output: False\nprint(is_all_unique([1,2,3,4,5]))  # Expected output: True",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sub_list(list1: List[int], list2: List[int]) -> List[int]:\n    # Subtract each element of list2 from corresponding elements of list1\n    return [x - y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validate(number):\n    num_str = str(number)\n    for i in range(len(num_str)):\n        if int(num_str[i]) > sum(int(digit) for digit in num_str[i+1:]):\n            return False\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(list_of_strings, target_string):\n    # Check if every element in the list is equal to the target string\n    return len(set(list_of_strings)) == 1 and list_of_strings[0] == target_string\n\n# Test cases\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue')) # Expected output: False\nprint(check_element([1,2,3,4], 7)) # Expected output: False\nprint(check_element([\"green\", \"green\", \"green\", \"green\"], 'green')) # Expected output: True",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match_two_three(text):\n    # Check if the string starts with \"a\" and ends with either \"bbb\" or \"bbb\"\n    return \"Found a match!\" if text.startswith(\"a\") and (text.endswith(\"bbb\") or text.endswith(\"bbbb\")) else \"Not matched!\"",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_sub_array_sum_repeated(arr: List[int], n: int, m: int) -> int:\n    # Calculate the length of the original array\n    len_arr = len(arr)\n    \n    # Initialize variables for Kadane's algorithm and maximum subarray sum\n    curr_max = arr[0]\n    global_max = arr[0]\n    dp_table = [arr[0]] * (m + 1)\n    \n    for i in range(1, m):\n        if i >= len_arr:\n            j = i % len_arr\n            dp_table[i] = max(dp_table[i-1] + arr[j], arr[j])\n        else:\n            dp_table[i] = max(curr_max + arr[i], arr[i])\n        \n        curr_max = max(curr_max, dp_table[i])\n        global_max = max(global_max, curr_max)\n    \n    return global_max\n\n# Test cases\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Expected output: 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))       # Expected output: 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))       # Expected output: -1",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    \"\"\"\n    This function calculates the sum of squares of the first n even natural numbers.\n    \n    Parameters:\n    n (int): The number of initial even natural numbers to consider for the calculation.\n    \n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - inverse of 2 (mod 6) does not exist"
    ],
    "generated_code": "from sympy import mod_inverse\n\ndef modular_inverse(arr, n, m):\n    result = sum(mod_inverse(num, m) for num in arr)\n    return result % m",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def odd_Days(year):\n    # If the year is divisible by 4 but not by 100, or if it's divisible by 400,\n    # then it has an odd number of odd days.\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return 5\n    else:\n        return 6\n\n# Test the function with provided data points\nassert odd_Days(100) == 5\nassert odd_Days(50) == 6\nassert odd_Days(75) == 2\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length(lists):\n    if not lists:\n        return 0, []\n    \n    lengths = [len(sublist) for sublist in lists]\n    max_len = max(lengths)\n    max_lists = [lists[i] for i in range(len(lengths)) if lengths[i] == max_len]\n    \n    return max_len, max_lists",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k):\n    # Base case when there's no post\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    \n    # Recursive call for two cases based on previous result\n    res = ((k - 1) * count_no_of_ways(n - 1, k)) + count_no_of_ways(n - 2, k)\n    \n    return res\n\n# Test cases\nprint(count_no_of_ways(2, 4))  # Output: 16\nprint(count_no_of_ways(3, 2))  # Output: 6\nprint(count_no_of_ways(4, 4))  # Output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    if divisor == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    result = dividend // divisor\n    return result",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, c):\n    \"\"\"\n    Find the length of the third side of a right-angled triangle.\n    \n    Parameters:\n        a (float): One side of the triangle.\n        c (float): The hypotenuse of the triangle.\n        \n    Returns:\n        float: Length of the other side.\n    \"\"\"\n    b = math.sqrt(c**2 - a**2)\n    return b",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    # Initialize variable to store the maximum value\n    max_value = lst[0]\n    \n    # Loop through all elements in the list\n    for item in lst:\n        if type(item) != str and item > max_value:\n            max_value = item\n            \n    return max_value",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_div(n):\n    # Initialize sum to 0\n    sum_divisor = 0\n    \n    # Iterate through possible divisors from 1 to n-1\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisor += i\n            \n    return sum_divisor",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n): \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            # Recursively flatten the sublist and append to result\n            result.extend(flatten_list(item))\n        else:\n            # Directly add non-list items to the result\n            result.append(item)\n    return result",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(list1, list2):\n    # Convert lists and sublists into sets for efficient comparison\n    set_list1 = set(flatten_list(list1))\n    set_list2 = set(flatten_list(list2))\n\n    # Find common elements between both sets\n    common_elements = set.intersection(set_list1, set_list2)\n    \n    return common_elements\n\n\n# Helper function to flatten the input lists and convert them to sets\ndef flatten_list(lst):\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'str'"
    ],
    "generated_code": "def max_aggregate(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the tuple with the highest sum of elements.\n    \n    Args:\n    lst: A list of tuples where each tuple contains two elements.\n    \n    Returns:\n    The tuple with the highest sum of its elements.\n    \"\"\"\n    return max(lst, key=lambda x: sum(x))\n\n# Test cases\nassert max_aggregate([(\"Juan Whelan\", 90), (\"Sabah Colley\", 88), (\"Peter Nichols\", 7), (\"Juan Whelan\", 122), (\"Sabah Colley\", 84)]) == [(\"Juan Whelan\", 212)]\nassert max_aggregate([(\"Juan Whelan\", 50), (\"Sabah Colley\", 48), (\"Peter Nichols\", 37), (\"Juan Whelan\", 22), (\"Sabah Colley\", 14)]) == [(\"Juan Whelan\", 72)]\nassert max_aggregate([(\"Juan Whelan\", 10), (\"Sabah Colley\", 20), (\"Peter Nichols\", 30), (\"Juan Whelan\", 40), (\"Sabah Colley\", 50)]) == [(\"Sabah Colley\", 70)]",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: n must be an even number."
    ],
    "generated_code": "def count_binary_seq(n):\n    if n % 2 != 0:\n        raise ValueError(\"n must be an even number.\")\n    \n    # Initialize count for sequences with '1' in odd positions and '0' in even positions.\n    count = pow(2, n // 2)\n    \n    # If n is even, add the count for sequences with '1' in even positions and '0' in odd positions.\n    if n % 2 == 0:\n        count += pow(2, n // 2 - 1)\n    \n    return float(count)\n\n# Test cases\nprint(count_binary_seq(1))   # Expected output: 2.0\nprint(count_binary_seq(2))   # Expected output: 6.0\nprint(count_binary_seq(3))   # Expected output: 20.0",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dict_depth(d):\n    return max([dict_depth(v) for v in d.values()] + [len(str(list(d.items())[0][1]))]) if isinstance(d, dict) else len(str(d))",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def set_Bit_Number(number):\n    \"\"\"\n    This function finds and returns the largest power of two that divides the given integer.\n    \n    Parameters:\n    - number: An integer\n    \n    Returns:\n    - The largest power of two that divides the given integer as an integer.\n    \"\"\"\n    result = 0\n    while number > 0:\n        if number % 2 == 1:\n            break\n        else:\n            result += 1\n            number //= 2\n    return result * (1 << result)\n\n# Check function with provided data points\nassert set_Bit_Number(6) == 4, \"Test case 1 failed\"\nassert set_Bit_Number(10) == 8, \"Test case 2 failed\"\nassert set_Bit_Number(18) == 16, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def solve(arr, k):\n    \"\"\"\n    This function checks if the number of inversions in an array of type 1 and type 2 are equal.\n    \n    Args:\n    arr (list): The input list containing integers of type 1 and type 2.\n    k (int): The threshold value for determining the size of the arrays of type 1 and type 2.\n    \n    Returns:\n    bool: True if the counts of inversions are equal, False otherwise.\n    \"\"\"\n    # Calculate the count of inversions in both type 1 and type 2 arrays.\n    count_type_1 = 0\n    count_type_2 = 0\n    \n    # Count inversions where elements from type 1 come before elements from type 2.\n    for i in range(len(arr)):\n        if len(set(arr[i])) > 1:\n            count_type_1 += 1\n            \n    # Count inversions where elements from type 2 come after elements from type 1.\n    for j in range(1, len(arr)):\n        if len(set(arr[j])) == 1:\n            count_type_2 += 1\n            \n    # Check if the counts of inversions are equal.\n    return count_type_1 == count_type_2\n\n# Example usage:\nprint(solve([1, 0, 2], 3))  # Expected output: True\nprint(solve([1, 2, 0], 3))  # Expected output: False\nprint(solve([1, 2, 1], 3))  # Expected output: True",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'list'"
    ],
    "generated_code": "def find_Element(arr, indices, idx, rotation_count):\n    arr_length = len(arr)\n    \n    # Find the position of the target element in the rotated array.\n    def binary_search(sub_arr, low, high, target):\n        if high < low:\n            return -1\n        \n        mid = low + (high - low) // 2\n        if sub_arr[mid] == target:\n            return mid\n        elif sub_arr[mid] > target:\n            return binary_search(sub_arr, low, mid - 1, target)\n        else:\n            return binary_search(sub_arr, mid + 1, high, target)\n    \n    for i, j in indices:\n        start = max(0, idx - rotation_count + i)\n        end = min(arr_length - 1, idx + j - rotation_count)\n        \n        result = binary_search(arr[start:end+1], start, end, idx)\n        \n        if result != -1:\n            return result\n    \n    return -1\n\n# Test cases\nprint(find_Element([1,2,3,4,5],[[[0,2],[0,3]]],2,1))  # Expected output: 3\nprint(find_Element([1,2,3,4],[[[0,1],[0,2]]],1,2))     # Expected output: 3\nprint(find_Element([1,2,3,4,5,6],[[[0,1],[0,2]]],1,1))  # Expected output: 1",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words):\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i].startswith(\"p\") and words[j].startswith(\"p\"):\n                return words[i], words[j]\n    return None",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list assignment index out of range"
    ],
    "generated_code": "def max_sum_increasing_subseq(arr, n, k, x):\n    dp = [[0 for _ in range(k + 1)] for _ in range(n)]\n    \n    # Calculate the maximum sum ending at each element up to its index.\n    for i in range(n):\n        if i == 0:\n            dp[0][x] = arr[i]\n        else:\n            temp = []\n            for j in range(1, k + 1):\n                temp.append(dp[i - 1][j])\n            dp[i][x] = arr[i] + max(temp)\n    \n    # Update the DP table with additional information.\n    for i in range(1, n):\n        for j in range(k + 1):\n            dp[i][j] += dp[i - 1][max(j - 1, 0)]\n    \n    # Return the maximum sum including the last valid k elements.\n    return dp[n - 1][k]\n\n# Example usage\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))  # Output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5))  # Output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))  # Output: 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'colon_tuplexx' is not defined. Did you mean: 'colon_tuplex'?"
    ],
    "generated_code": "def colon_tuplex(tpl, n, new_val):\n    # Create a copy of the original tuple\n    new_tpl = list(tpl)\n    \n    # Update the nth element with the new value\n    if 0 <= n < len(new_tpl):\n        new_tpl[n] = new_val\n    \n    # Return the updated tuple\n    return tuple(new_tpl)\n\n# Test cases\nprint(colon_tuplexx((\"HELLO\", 5, [], True), 2, 50)) # Expected output: (\"HELLO\", 5, [50], True)\nprint(colon_tuplexx((\"HELLO\", 5, [], True), 2, 100)) # Expected output: (\"HELLO\", 5, [100], True)\nprint(colon_tuplexx((\"HELLO\", 5, [], True), 2, 500)) # Expected output: (\"HELLO\", 5, [500], True)",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def large_product(list1, list2, k):\n    max_products = []\n    for i in range(len(list1)):\n        product = list1[i] * list2[i]\n        max_products.append(product)\n    \n    max_products.sort(reverse=True)\n    return max_products[:k]",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    # Return the larger of the two input values\n    if a > b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(num):\n    # Use bitwise operations to find and set the leftmost unset bit\n    while num & (num - 1) != 0:\n        num ^= (num - 1)\n    return num\n\n# Test cases\nprint(set_left_most_unset_bit(10))  # Expected output: 14\nprint(set_left_most_unset_bit(12))  # Expected output: 14\nprint(set_left_most_unset_bit(15))  # Expected output: 15",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    This function calculates the volume of a cone given its radius and height.\n    \n    Args:\n        radius (float): The radius of the base of the cone.\n        height (float): The height of the cone.\n        \n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return (math.pi * radius ** 2) * height / 3\n\n# Test cases to verify the correctness of the function\nassert round(volume_cone(5, 12), 8) == 314.1592653\nassert round(volume_cone(10, 15), 8) == 1570.7963268\nassert round(volume_cone(19, 17), 8) == 6426.6513717",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    # Use filter with lambda to get only positive numbers and convert them back to list\n    return list(filter(lambda x: x > 0, lst))\n\n# Test cases\nprint(pos_nos([-1,-2,1,2]))  # Expected output: [1, 2]\nprint(pos_nos([3,4,-5]))     # Expected output: [3, 4]\nprint(pos_nos([-2,-3,1]))    # Expected output: [1]",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'float' object is not subscriptable"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    # Initialize DP table with size n+1 x n+1 and values filled with negative infinity\n    dp = [[-float('inf')] * (n + 1) for _ in range(n + 1)]\n    \n    # Fill the first row of the DP table based on the first column of the input grid\n    for j in range(1, n + 1):\n        if j == 1:\n            dp[1][j] = grid[0][0]\n        else:\n            dp[1][j] = max(dp[1][j - 1], grid[0][j - 1])\n            \n    # Fill the rest of the DP table\n    for i in range(2, len(grid) + 1):\n        for j in range(1, n + 1):\n            if j == 1:\n                dp[i][j] = max(dp[i][j - 1], grid[i - 1][0]) + dp[i - 1][j]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1] + grid[i - 1][i - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i][j - 1]) + grid[i - 1][j - 1]\n\n    # Return the maximum value from the last cell of the DP table\n    return max(max(row[-1] for row in dp) for dp in dp)\n\n# Example test cases\nprint(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))  # Output: 7\nprint(max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5))  # Output: 24\nprint(max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5))  # Output: 81",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    # Splitting the string into words\n    words = s.split()\n    \n    max_len_even = -1\n    \n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len_even:\n            max_len_even = len(word)\n            \n    return \" \".join([word for word in words if len(word) == max_len_even])",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_last_occurrence(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Union\nimport re\n\ndef modified_encode(sequence: Union[str, List[int]]) -> List[Union[List[int], int]]:\n    # Convert sequence into a string if it is a list of integers for easier pattern matching\n    sequence = str(sequence)\n    \n    # Regular expression to match sequences of repeated elements followed by an odd number of digits\n    regex_pattern = r'(\\d+)(\\d+)'\n    \n    # Function to process each matched group and encode them in the required format\n    def process_match(match):\n        count = int(match.group(1))\n        char_or_digit = match.group(2)\n        \n        return [int(count), char_or_digit] * (count + 1)\n    \n    # Find all matches using regular expression on the converted sequence string\n    encoded_sequence = re.findall(regex_pattern, sequence)\n    \n    # Apply processing function to each found match\n    processed_sequence = []\n    for item in encoded_sequence:\n        processed_sequence.extend(process_match(item))\n    \n    # Remove duplicate pairs of numbers with one digit\n    processed_sequence = list(set(processed_sequence))\n    \n    return processed_sequence[:-1]\n\n# Test cases\nprint(modified_encode([1,1,2,3,4,4,5,1]))  # Output: [[2, 1], 2, 3, [2, 4], 5, 1]\nprint(modified_encode('automatically'))  # Output: ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', [2, 'l'], 'y']\nprint(modified_encode('python'))  # Output: ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_volume(sum_of_sides):\n    # Calculate the maximum possible side length for each dimension\n    max_length = sum_of_sides // 3\n    max_width = (sum_of_sides - max_length * 2) // 2\n    \n    # Calculate the maximum volume based on the calculated dimensions\n    if max_length < max_width:\n        volume = max_length * max_width\n    else:\n        volume = max_length * (max_length + max_width)\n    \n    return volume\n\n# Test cases to verify the correctness of the solution\nprint(max_volume(8))  # Expected output: 18\nprint(max_volume(4))  # Expected output: 2\nprint(max_volume(1))  # Expected output: 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(s):\n    pattern = r'\\b\\w{5}\\b'\n    matches = re.findall(pattern, s)\n    return matches",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\ndef sum_difference(n):\n    # Calculate the square of the sum of the first n natural numbers\n    square_of_sum = int(math.pow(sum(range(1,n+1)),2))\n    \n    # Calculate the sum of the squares of the first n natural numbers\n    sum_of_squares = sum(i**2 for i in range(1,n+1))\n    \n    # Return the difference between these two values\n    return square_of_sum - sum_of_squares",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_demlo(num):\n    str_num = list(str(num))\n    if len(set(str_num)) != len(str_num):\n        return \"Error: Duplicate digits found.\"\n    else:\n        demlo = ''.join([str(int(digit) + 1) for digit in str_num])\n        reverse_demlo = demlo[::-1]\n        final_result = reverse_demlo[:(len(str_num) * 2 - 1)] + reverse_demlo[len(str_num):][::-1]\n        return final_result.replace('1', '1') + reverse_demlo[:len(str_num)]",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import numpy as np\nfrom typing import List\n\ndef position_min(lst: List[int]) -> List[int]:\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]\n\n# Check function with provided data points\nprint(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))  # Expected output: [3, 11]\nprint(position_min([1,2,2,2,4,4,4,5,5,5,5]))                  # Expected output: [0]\nprint(position_min([2,1,5,6,8,3,4,9,10,11,8,12]))             # Expected output: [1]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def re_arrange(arr, n):\n    # Initialize pointers for positive and negative indices\n    pos_idx = 0\n    neg_idx = 0\n    \n    # Traverse the array\n    while neg_idx < n:\n        # Skip all zeros\n        if arr[neg_idx] == 0:\n            neg_idx += 1\n            continue\n        \n        # Find next position for non-zero elements\n        while arr[pos_idx] <= 0 and pos_idx < len(arr)-1:\n            pos_idx += 1\n        \n        # Place current element at its correct position from the start of positive elements\n        arr[neg_idx], arr[pos_idx] = arr[pos_idx], arr[neg_idx]\n        \n        # Move to the next index after placing a non-zero element\n        neg_idx += 1\n        pos_idx += 1",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_alternates(tup):\n    # Extracting first elements and every second element starting from the second\n    result = tuple(a + b for a, b in zip(tup[::2], tup[1::2]))\n    return result",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Min_Squares(n):\n    count = 0\n    while n > 0:\n        for i in range(int(n**0.5), 0, -1): \n            if n % i == 0: \n                count += 1\n                break\n        n -= i\n    return count",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'words' is not defined"
    ],
    "generated_code": "from collections import Counter\n\ndef most_occurrences(words_list):\n    # Count the occurrence of each word and find the maximum count\n    max_count = max(Counter(words).values())\n    # Find all words that have the maximum occurrence\n    result = [word for word, count in Counter(words_list).items() if count == max_count]\n    \n    # Return the first word found among those with the highest count\n    return result[0]\n\n# Test cases\nprint(most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]))  # Output: 'UTS'\nprint(most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]))  # Output: 'year'\nprint(most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"]))  # Output: 'can'",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if any two sides of the triangle are equal in length\n    return a == b or a == c or b == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, k, n):\n    return lst[k:] + lst[:k]\n\n# Test cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))  # Expected output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))   # Expected output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))   # Expected output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(lst):\n    # Initialize counter for negative numbers\n    neg_count = 0\n    \n    # Iterate through each element in the list\n    for num in lst:\n        # Check if the current number is negative and increment counter if true\n        if num < 0:\n            neg_count += 1\n            \n    return neg_count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    # Define the pattern to match three, four, and five character words\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Find all matches of the pattern in the text\n    result = re.findall(pattern, text)\n    \n    return result",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_unset_bits(num):\n    # Initialize counter for unset bits\n    unset_count = 0\n    \n    # Iterate through each bit position\n    while num:\n        # If the least significant bit is not set (i.e., it's 0), increment the counter\n        if num & 1 == 0:\n            unset_count += 1\n        # Right shift num to check the next bit\n        num >>= 1\n    \n    return unset_count",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(input_string):\n    from collections import Counter\n    return dict(Counter(input_string))",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_list(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(side1, side2, side3):\n    # Check for non-negative sides\n    if side1 < 0 or side2 < 0 or side3 < 0:\n        return False\n    \n    # Sort the sides to simplify comparison\n    sides = sorted([side1, side2, side3])\n    \n    # If the sum of the two smaller sides is greater than the largest side,\n    # then the triangle can be formed.\n    return sides[0] + sides[1] > sides[2]",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can't multiply sequence by non-int of type 'float'",
      "Test 2: FAIL - can't multiply sequence by non-int of type 'float'",
      "Test 3: FAIL - can't multiply sequence by non-int of type 'float'"
    ],
    "generated_code": "def ap_sum(a, d, n):\n    # Calculate the number of terms in the sequence\n    num_terms = n\n    \n    # Sum of an AP is given by the formula: n/2 * [2a + (n-1)d]\n    sum_ap = num_terms / 2 * [2*a + (num_terms - 1)*d]\n    \n    return int(sum_ap)",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        # Add more months and their corresponding number of days as needed.\n    }\n    return True if month_name in months and months[month_name] == 28 else False",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    \"\"\"\n    This function takes a string 'text' as input and returns a message indicating whether a word ends \n    with the specified character(s). The matching is case-insensitive.\n    \n    :param text: str - The input string to be searched for a trailing word match.\n    :return: str - A message indicating the result of the search ('Not matched!' if no such word exists, \n                  'Found a match!' otherwise).\n    \"\"\"\n    pattern = r'\\b\\w+\\Z'\n    return f\"Found a match!\" if re.search(pattern, text) else \"Not matched!\"\n\n# Test cases\nprint(text_match_word(\"python.\"))   # Expected output: Found a match!\nprint(text_match_word(\"lang.\"))     # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_equal_ends(s):\n    # Initialize counters for total substrings and those starting with equal ends\n    total_substrings = start_with_equal_ends = 0\n    \n    # Iterate through the string to find all valid substrings\n    for i in range(len(s)):\n        if i == 0:\n            start_with_equal_ends += 1  # Start with an equal end for single-character strings\n        elif s[i] == s[0]:\n            start_with_equal_ends += 1  # Add to count when a new substring starts with equal ends\n        \n        # Check if current character forms a new valid substring\n        if i > 0 and s[i] != s[i-1]:\n            start_with_equal_ends = 0  # Reset counter after non-equal character is encountered\n            \n        total_substrings += start_with_equal_ends\n    \n    return total_substrings",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max() arg is an empty sequence",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_Divisor(start: int, end: int) -> int:\n    # Initialize the list of divisors and the count for each divisor\n    divisors = [i for i in range(start+1, end+1)]\n    divisor_count = {divisor: divisors.count(divisor) for divisor in set(divisors)}\n    \n    max_divisor = max(divisor_count.items(), key=lambda x: x[1])[0]\n    return max_divisor",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef sum_three_smallest_nums(nums: List[int]) -> int:\n    nums.sort()\n    return sum(nums[:3])",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    \"\"\"\n    Converts each element of the input set to an ordered tuple.\n    \n    Args:\n    input_set (set): The set containing elements to be converted to tuples.\n    \n    Returns:\n    list: A list where each element is a tuple representing one of the original set's elements.\n    \"\"\"\n    return [(element,) for element in input_set]\n\n# Check function with provided data points to verify correctness\nassert set_to_tuple({1, 2, 3, 4, 5}) == [(1,), (2,), (3,), (4,), (5,)]\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == [(6,), (7,), (8,), (9,), (10,), (11,)]\nassert set_to_tuple({12, 13, 14, 15, 16}) == [(12,), (13,), (14,), (15,), (16,)]\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def find_minimum_range(nums):\n    min_num = float('inf')\n    max_num = float('-inf')\n    \n    # Find minimum and maximum values in all subarrays\n    for arr in nums:\n        min_num = min(min_num, min(arr))\n        max_num = max(max_num, max(arr))\n    \n    start, end = min_num, max_num\n    \n    while True:\n        found_in_all_subarrays = True\n        for arr in nums:\n            if not any(x >= end - 1 for x in arr): \n                found_in_all_subarrays = False\n                break\n        \n        if found_in_all_subarrays:\n            return (start, end)\n        \n        start -= 1\n        end += 1\n\n# Test cases\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))  # Expected output: (4, 6)\nprint(find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]))  # Expected output: (4, 7)\nprint(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]))  # Expected output: (5, 7)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    digit_count = sum(c.isdigit() for c in s)\n    letter_count = sum(1 for c in s if c.isalpha())\n    return (digit_count, letter_count)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Odd_Squares(n, m):\n    count = 0\n    for i in range(max(1, n), min(m+1, 101)): # Adjusting max limit to prevent out of range errors\n        if sum(j*j == i for j in range(int(i**0.5)+1)) % 2 != 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    # Calculate differences and store them in a new list\n    return [nums[i] - nums[i-1] for i in range(1, len(nums))]\n\n# Test cases\nprint(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]))  # Output: [0, 2, 1, 0, 1, 1, 1]\nprint(diff_consecutivenums([4, 5, 8, 9, 6, 10]))       # Output: [1, 3, 1, -3, 4]\nprint(diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7]))  # Output: [1, 1, 1, 1, 0, 0, 0, 1, 2]",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zigzag' is not defined",
      "Test 2: FAIL - name 'zigzag' is not defined",
      "Test 3: FAIL - name 'zigzag' is not defined"
    ],
    "generated_code": "def find_number_e(n, k):\n    # Calculate e(n, k)\n    result = sum([1/(i**k) for i in range(1, n+1)])\n    return round(result, 6)\n\n# Test cases\nprint(find_number_e(4, 3))  # Expected output: 5\nprint(find_number_e(4, 2))  # Expected output: 4\nprint(find_number_e(3, 1))  # Expected output: 1",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(m, n):\n    \"\"\"\n    Counts the number of squares within a given m x n grid.\n    \n    Args:\n        m (int): The height of the rectangle.\n        n (int): The width of the rectangle.\n        \n    Returns:\n        int: The total number of squares within the rectangle.\n    \"\"\"\n    if m <= 1 or n <= 1:\n        return 0\n    else:\n        # Initialize the base case for recursion\n        result = ((m + 1) * (n + 1)) // 2 - (min(m, n) * (max(m, n) + min(m, n) - 1))\n        # Calculate the remaining part recursively\n        result += count_Squares(m-1, n-1)\n        return result",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: find_ways() missing 1 required positional argument: 'nums'"
    ],
    "generated_code": "def find_ways(length, nums):\n    from collections import defaultdict\n    \n    dp = defaultdict(int)\n    dp[0] = 1  # Base case for sequence with zero sum\n    \n    for num in nums:\n        new_dp = defaultdict(int)\n        for sum_val, ways in dp.items():\n            if sum_val + num <= length * 2:\n                new_dp[sum_val + num] += ways\n            if num == 0 and sum_val < length:\n                new_dp[sum_val] += ways\n        \n        dp = new_dp\n    \n    return dp[length]\n\n# Test cases\nprint(find_ways(4))  # Output: 2\nprint(find_ways(6))  # Output: 5\nprint(find_ways(8))  # Output: 14",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(s):\n    # Check if all characters in the string are either '0' or '1'\n    return s.isdigit() and len(set(s)) == 2",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def minimum_Length(s):\n    # Find all indices where the character is not equal to 'a'\n    index = [i for i in range(len(s)) if s[i] != 'a']\n    \n    # Sort the indices to process them from left to right\n    index.sort()\n    \n    # If there's no such index, the entire string needs to be removed\n    if len(index) == 0:\n        return len(s)\n    \n    # Calculate the maximum distance between two consecutive occurrences of 'a'\n    max_distance = max([index[i+1] - index[i] - 1 for i in range(len(index)-1)])\n    \n    # Return the total length minus twice the calculated distance\n    return len(s) - 2 * max_distance",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    count = {}\n    \n    # Count occurrences of each element\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    # Find the first element that occurs 'k' times\n    for j in range(n):\n        if count[arr[j]] == k:\n            return arr[j]\n    \n    return -1  # Return -1 if no such element is found",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_chars(s):\n    \"\"\"\n    Check if all characters in the input string 's' are unique.\n    \n    Args:\n    s (str): The input string to check for uniqueness of characters.\n    \n    Returns:\n    bool: True if all characters are unique, False otherwise.\n    \"\"\"\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(matrix, index):\n    return [[row[i] for i in range(len(row)) if i != index] for row in matrix]\n\n# Test cases\nprint(remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))\nprint(remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))\nprint(remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(n, d, a):\n    return a + n * d",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    if r <= 0:\n        return 0\n    \n    # Calculate total circles with radius r\n    total_circles = int(math.pi * pow(r, 2))\n    \n    # Calculate rectangles formed within each circle\n    rectangles_per_circle = 4 + 2*(total_circles - 1)\n    \n    return rectangles_per_circle",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max(tuples_list):\n    # Initialize max value with the first tuple's first element\n    max_value = tuples_list[0][0]\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Update max_value if the current tuple has a larger first element\n        if tup[0] > max_value:\n            max_value = tup[0]\n    \n    return max_value",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef moddiv_list(a: List[int], b: List[int]) -> List[int]:\n    # Using map and lambda functions to perform element-wise modulo operation on lists 'a' and 'b'\n    return list(map(lambda x, y: x % y if y else -1, a, b))",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    # Calculate the discriminant of the quadratic equation ax^2 + bx + c = 0\n    delta = (b**2) - (4*a*c)\n    \n    # If the discriminant is zero, there's exactly one real solution\n    if delta == 0:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = x1\n        return f\"Yes\" if abs(x1) > abs(x2) else \"No\"\n    elif delta < 0:\n        return \"No\"\n    else:\n        roots = [-b/(2*a), -(b+delta**0.5)/(2*a)]\n        smallest_root = min(abs(root) for root in roots)\n        return f\"Yes\" if smallest_root == roots[1] * 2 else \"No\"\n\n# Test cases\nprint(check_solution(1,3,2))  # Expected output: Yes\nprint(check_solution(1,2,3))  # Expected output: No\nprint(check_solution(1,-5,6))  # Expected output: No",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    if n == 0:\n        return 0\n    else:\n        return int('1' + '8'.join(str(i) for i in range(2, n+1))) - 1",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    # Remove empty lists from the input list\n    return [item for item in lst if item]\n\n# Test cases\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]) == ['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []]) == [ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []]) == ['Python', 'programming', 'language']\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(nums):\n    count_dict = {}\n    \n    # Count the occurrences of each number in the list\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the key(s) with the highest occurrence value(s)\n    max_count = max(count_dict.values())\n    result = [key for key, val in count_dict.items() if val == max_count]\n    \n    return result[0]\n\n# Test cases\nprint(max_occurrences([1,2,3,1,2,3,12,4,2]))   # Expected output: 2\nprint(max_occurrences([1,2,6,7,0,1,0,1,0]))    # Expected output: 1,0\nprint(max_occurrences([1,2,3,1,2,4,1]))         # Expected output: 1",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuples_list, K):\n    # Use list comprehension to iterate over each tuple and add K to each element\n    result = [tuple([x + K for x in t]) for t in tuples_list]\n    return result\n\n# Test cases\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))  # Expected output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8))  # Expected output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9))  # Expected output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(s):\n    flip_count = 0\n    left = True\n    \n    for char in s:\n        if left and char == '0':\n            flip_count += 1\n            left = not left\n        elif not left and char == '1':\n            flip_count += 1\n            left = not left\n            \n    return flip_count\n\n# Test cases\nprint(min_flip_to_make_string_alternate(\"0001010111\"))  # Output: 2\nprint(min_flip_to_make_string_alternate(\"001\"))         # Output: 1\nprint(min_flip_to_make_string_alternate(\"010111011\"))   # Output: 2",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(num):\n    count = 0\n    while num > 0:\n        num //= 10\n        count += 1\n    return count",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unterminated string literal (detected at line 17)"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    # Initialize variables to store the maximum product and the current product\n    max_product = float('-inf')\n    curr_product = float('-inf')\n\n    for i in range(len(nums) - 1):\n        # Calculate the product of two consecutive numbers\n        product = nums[i] * nums[i + 1]\n        \n        # Update the maximum product if the current product is greater\n        if product > max_product:\n            max_product = product\n        \n        # If the current product becomes negative, reset it as it will not be larger than the next number's product\n        elif product < 0:\n            curr_product = float('-inf)\n    \n    # Return the maximum product found\n    return max(max_product, curr_product)\n\n# Test cases\nprint(adjacent_num_product([1,2,3,4,5,6]))  # Expected output: 30\nprint(adjacent_num_product([1,2,3,4,5]))   # Expected output: 20\nprint(adjacent_num_product([2,3]))         # Expected output: 6",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def is_tree_balanced(root):\n    def get_height(node):\n        if node is None:\n            return -1\n        left_height = get_height(node.left)\n        right_height = get_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return get_height(root) != -1",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def repeat_tuples(input_tuple, repetitions):\n    result = []\n    for _ in range(repetitions):\n        result.append(input_tuple)\n    return tuple(result)\n\n# Test cases\nprint(repeat_tuples((1, 3), 4))  # Should print: ((1, 3), (1, 3), (1, 3), (1, 3))\nprint(repeat_tuples((1, 2), 3))  # Should print: ((1, 2), (1, 2), (1, 2))\nprint(repeat_tuples((3, 4), 5))  # Should print: ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    return 2 * (length + width) * height",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]))\n\n# Test cases\nprint(float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]))  # [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\nprint(float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')]))  # [('item3', '20'), ('item1', '15'), ('item2', '10')]\nprint(float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')]))  # [('item3', '14'), ('item2', '10'), ('item1', '5')])",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def smallest_missing(arr, start, end):\n    # Iterate through the range of values between start and end\n    for i in range(start + 1, end + 1):\n        # If an element is not present in the array, it's the missing number\n        if i not in arr:\n            return i\n    # If all elements from start to end are present, the next integer is the missing one\n    return end + 1\n\n# Test cases\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6))  # Expected output: 7\nprint(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6))  # Expected output: 3\nprint(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7))  # Expected output: 0",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heap_assending(arr):\n    import heapq\n    # Convert array into min-heap\n    heapq.heapify(arr)\n    \n    result = []\n    while arr:\n        # Pop smallest element from heap and add it to result\n        result.append(heapq.heappop(arr))\n    \n    return result",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def permute_string(s):\n    from itertools import permutations\n    \n    # Convert the input string into a list of characters\n    chars = list(s)\n    \n    # Generate all unique permutations considering case sensitivity\n    perms = [''.join(p) for p in set(permutations(chars))]\n    \n    return perms",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef round_num(number, divisor):\n    \"\"\"\n    Rounds the input number up to the nearest multiple of the specified divisor.\n    \n    Args:\n        number (int): The original number to be rounded.\n        divisor (int): The divisor used for rounding up.\n        \n    Returns:\n        int: The rounded number to the nearest multiple of the divisor.\n    \"\"\"\n    return int(math.ceil(float(number) / divisor)) * divisor\n\n# Test cases\nprint(round_num(4722,10)) # Expected output: 4720\nprint(round_num(1111,5)) # Expected output: 1110\nprint(round_num(219,2)) # Expected output: 218",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_replica(input_tuple):\n    count = {}\n    for item in input_tuple:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    \n    result = []\n    for item in input_tuple:\n        if count[item] == 1:\n            result.append(item)\n        elif count[item] > 1:\n            result.append('MSP') # Custom replacement for duplicates\n    \n    return tuple(result)\n\n# Test cases\nprint(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)))  # Expected output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nprint(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)))  # Expected output: (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nprint(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)))  # Expected output: (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(str, char):\n    new_str = \"\"\n    for ch in str:\n        if ch != char:\n            new_str += ch\n    return new_str",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_first(arr):\n    # Remove the last item and then append it at the beginning of the array\n    arr.pop()\n    arr.insert(0, arr.pop())\n    return arr\n\n# Test cases\nprint(move_first([1,2,3,4]))  # Output: [4,1,2,3]\nprint(move_first([0,1,2,3]))  # Output: [3,0,1,2]\nprint(move_first([9,8,7,1]))  # Output: [1,9,8,7]",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate all six sides and sum them up\n    return 2 * (length*width + length*height + width*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multi_list(n, m):\n    result = []\n    for i in range(n):\n        row = [j * i for j in range(m)]\n        result.append(row)\n    return result",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        \n        mid = low + (high - low) // 2\n        next_element = (mid + 1) % len(arr)\n        prev_element = (mid - 1 + len(arr)) % len(arr)\n        \n        if arr[mid] <= arr[next_element] and arr[mid] <= arr[prev_element]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n# Example usage\narr_example_1 = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nprint(find_rotation_count(arr_example_1))  # Expected output: 3\n\narr_example_2 = [8, 9, 10, 2, 5, 6]\nprint(find_rotation_count(arr_example_2))  # Expected output: 3\n\narr_example_3 = [2, 5, 6, 8, 9, 10]\nprint(find_rotation_count(arr_example_3))  # Expected output: 0",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    \"\"\"\n    Toggles all odd bits of the given number.\n    \n    Parameters:\n    n (int): The integer whose odd bits are to be toggled.\n    \n    Returns:\n    int: The result after toggling all odd bits.\n    \"\"\"\n    # Convert the number to binary string, remove '0b' prefix and get length of binary string.\n    bin_str = bin(n)[2:]\n    len_bin_str = len(bin_str)\n    \n    # Create a mask with odd bits set to 1 and rest as 0s.\n    odd_bits_mask = sum([pow(2, i) for i in range(len_bin_str) if i % 2 == 1])\n    \n    # Apply the mask on the original number to toggle odd bits.\n    toggled_num = n ^ odd_bits_mask\n    \n    # Return the toggled number.\n    return toggled_num\n\n# Test cases to verify the correctness of the solution\nassert even_bit_toggle_number(10) == 15, \"Test case 1 failed\"\nassert even_bit_toggle_number(20) == 1, \"Test case 2 failed\"\nassert even_bit_toggle_number(30) == 11, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(n, arr):\n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Count occurrences of the minimum element and return it\n    return arr.count(min_element)\n\n# Example usage:\nprint(frequency_Of_Smallest(5,[1,2,3,4,3]))  # Expected output: 1\nprint(frequency_Of_Smallest(7,[3,1,2,5,6,2,3]))  # Expected output: 1\nprint(frequency_Of_Smallest(7,[3,3,6,3,7,4,9]))  # Expected output: 3",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    # Base case for the first two Perrin numbers\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        # Recursive call for larger values of n\n        return get_perrin(n - 2) + get_perrin(n - 3)\n\n# Test cases to verify the correctness of the function\nassert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(bracket_string):\n    stack = []\n    balance = [0] * len(bracket_string)\n    \n    # Iterate through the string\n    for i in range(len(bracket_string)):\n        if bracket_string[i] == '[':\n            stack.append(i)\n        else:\n            if not stack:\n                balance[i] = float('inf')\n            else:\n                j = stack.pop()\n                balance[i] = min(balance[i], abs(j - i))\n                \n    return sum(balance)\n\n# Test cases\nprint(swap_count(\"[]][][\"))   # Expected output: 2\nprint(swap_count(\"[[][]]\"))   # Expected output: 0\nprint(swap_count(\"[[][]]][\"))  # Expected output: 1",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_num):\n    # Remove the '0x' prefix if present and convert the result into binary\n    hex_binary = bin(int(hex_num[2:], 16))[2:].zfill(8)\n    \n    # Count the number of '1's in the binary string\n    count_ones = hex_binary.count('1')\n    \n    # Determine if the count is even or odd and return accordingly\n    if count_ones % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases\nprint(even_or_odd(\"AB3454D\"))  # Expected output: \"Odd\"\nprint(even_or_odd(\"ABC\"))      # Expected output: \"Even\"\nprint(even_or_odd(\"AAD\"))      # Expected output: \"Odd\"",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \n    Parameters:\n    n (int): A positive integer\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 2 ** (n.bit_length() - 1)\n\n# Test cases\nprint(highest_Power_of_2(10))  # Expected output: 8\nprint(highest_Power_of_2(19))  # Expected output: 16\nprint(highest_Power_of_2(32))  # Expected output: 32",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_lucas(n):\n    # Initialize the first two numbers of the Lucas sequence\n    l = [0, 2]\n    \n    # Calculate the nth Lucas number using Binet's formula for Fibonacci sequences\n    if n == 0:\n        return l[0]\n    elif n == 1:\n        return l[1]\n    else:\n        # Binet's formula implementation for large values of n\n        import math\n        phi = (1 + math.sqrt(5)) / 2\n        psi = (1 - math.sqrt(5)) / 2\n        result = int((phi ** n - psi ** n) / math.sqrt(5))\n        return result\n\n# Test cases\nassert find_lucas(9) == 76, \"Test case 1 failed\"\nassert find_lucas(4) == 7, \"Test case 2 failed\"\nassert find_lucas(3) == 4, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate str (not \"int\") to str",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - can only concatenate str (not \"int\") to str"
    ],
    "generated_code": "def add_string(lst, str_to_add):\n    # Iterate through each item in the list and prepend the string_to_add\n    return [str_to_add + x for x in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def convert_list_dictionary(list_keys, list_values, values_list):\n    # Initialize an empty result dictionary\n    result_dict = {}\n    \n    # Iterate over each key and value in the input lists\n    for i in range(len(list_keys)):\n        # Create a new sub-dictionary with the current index as the key\n        result_dict[list_keys[i]] = {list_keys[i]: values_list[i]}\n    \n    return [result_dict[key] if isinstance(key, str) else {} for key in list_keys]\n\n# Test cases\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],\n                              [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],\n                              [85, 98, 89, 92]))",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_max_sum(n):\n    dp = [float('-inf')] * (n + 1)\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            dp[i] = max(dp[i], dp[int(i / 2)] + i)\n        if i % 3 == 0:\n            dp[i] = max(dp[i], dp[int(i / 3)] + i)\n        if i % 4 == 0:\n            dp[i] = max(dp[i], dp[int(i / 4)] + i)\n        if i % 5 == 0:\n            dp[i] = max(dp[i], dp[int(i / 5)] + i)\n    \n    return dp[n]",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst):\n    return len(max(lst, key=len)), [item for sublist in lst for item in sublist]",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tup):\n    # Convert the tuple into a set and compare its length with the original tuple's length.\n    return len(set(test_tup)) == len(test_tup)",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(input_string):\n    char_count = {}\n    \n    # Counting occurrences of each character\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Finding the first non-repeated character\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(string):\n    \"\"\"\n    Check if the input string starts and ends with the same character.\n    \n    Args:\n        string (str): The input string to check.\n        \n    Returns:\n        str: 'Valid' if the string starts and ends with the same character, otherwise 'Invalid'.\n    \"\"\"\n    # Regular expression to match strings that start and end with the same character\n    pattern = r\"^(.).*\\1$\"\n    result = bool(re.match(pattern, string))\n    return \"Valid\" if result else \"Invalid\"\n\n# Test cases\nprint(check_char(\"abba\"))  # Expected output: Valid\nprint(check_char(\"a\"))     # Expected output: Valid\nprint(check_char(\"abcd\"))  # Expected output: Invalid",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(num1, num2, num3):\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([num1, num2, num3])\n    \n    # Calculate the median as the middle element after sorting\n    return float(sorted_nums[1])\n\n# Test cases\nprint(median_numbers(25,55,65))  # Expected output: 55.0\nprint(median_numbers(20,10,30))  # Expected output: 20.0\nprint(median_numbers(15,45,75))  # Expected output: 45.0",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int) or isinstance(num, float):  # Check if it's an integer or float\n            total_sum += sum(int(digit) for digit in str(abs(num)))\n    return total_sum\n\n# Test cases\nprint(sum_of_digits([10, 2, 56]))  # Expected output: 14\nprint(sum_of_digits([[10, 20, 4, 5], 'b', 70, ['a']]))  # Expected output: 19\nprint(sum_of_digits([10, 20, -4, 5, -70]))  # Expected output: 19",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    # Initialize result as an empty tuple with length equal to the input tuples\n    res = ()\n    # Loop through each index in the range of the length of either tuple\n    for i in range(len(tup1)):\n        # Calculate the XOR of elements at current index and add to result\n        res += ((tup1[i] ^ tup2[i]), )\n    return res",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef extract_freq(lst):\n    # Create a dictionary with tuple as key and its frequency as value\n    freq_dict = defaultdict(int)\n    \n    for tup in lst:\n        freq_dict[tup] += 1\n    \n    # Get the maximum frequency from the dictionary\n    max_freq = max(freq_dict.values())\n    \n    # Return the count of all frequencies equal to the maximum frequency\n    return len([freq for freq in freq_dict.values() if freq == max_freq])\n\n# Test the function with provided data points\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Expected output: 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]))  # Expected output: 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]))  # Expected output: 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        row_result = ()\n        for j in range(len(tup1[i])):\n            row_result += (tup1[i][j] + tup2[i][j],)\n        result.append(row_result)\n    return tuple(result)\n\n# Test cases\nprint(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def ncr_modp(n, k, p):\n    def factorialMod(a, mod):\n        if a == 0:\n            return 1\n        result = 1\n        for i in range(2, a + 1):\n            result = (result * i) % mod\n        return result\n    \n    fact_n = factorialMod(n, p)\n    fact_k = factorialMod(k, p)\n    fact_nk = factorialMod(n - k, p)\n    \n    return (fact_n // (fact_k * fact_nk)) % p",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^https?:\\/\\/[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\\/?'\n    if re.match(pattern, url) is None:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_tuplex' is not defined",
      "Test 2: FAIL - name 'check_tuplex' is not defined",
      "Test 3: FAIL - name 'check_tuplex' is not defined"
    ],
    "generated_code": "def check_tuple_exists(tup, item):\n    return item in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(num):\n    # Calculate the parity using modulo operation\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test cases\nprint(find_Parity(12))  # Expected output: Even Parity\nprint(find_Parity(7))   # Expected output: Odd Parity\nprint(find_Parity(10))  # Expected output: Even Parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '>' not supported between instances of 'tuple' and 'int'"
    ],
    "generated_code": "from itertools import permutations\n\ndef rearrange_bigger(number):\n    \"\"\"\n    Given an integer 'number', find the smallest permutation of its digits that is greater than it.\n    \n    Parameters:\n        - number (int): The input number whose digit permutation needs to be checked\n    \n    Returns:\n        - int: The next bigger number formed by the digits of 'number' if such exists; otherwise False\n    \"\"\"\n    # Convert the number to a list of its digits for easy manipulation\n    digits = [int(d) for d in str(number)]\n    \n    # Generate all unique permutations of the digits\n    perms = set(permutations(digits))\n    \n    # Convert each tuple back into an integer and sort them based on whether they're larger than the original number\n    sorted_perms = sorted([(perm, perm > number) for perm in perms], reverse=True)\n    \n    # Return the first element (largest permutation) that is greater than the original number\n    return ''.join(map(str, next(filter(lambda x: x[1], sorted_perms))))\n\n# Test cases\nprint(rearrange_bigger(12))   # Expected output: \"21\"\nprint(rearrange_bigger(10))   # Expected output: False\nprint(rearrange_bigger(102))  # Expected output: \"120\"",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    def swap(i, j):\n        nums1[i], nums1[j] = nums1[j], nums1[i]\n        nums2[i], nums2[j] = nums2[j], nums2[i]\n\n    n, m = len(nums1), len(nums2)\n    if k == 0:\n        return []\n    \n    # Start with two smallest elements\n    i, j = 0, 0\n    pq = [(nums1[0] + nums2[0], i, j)] if n > 0 else []\n    visited = set()\n\n    while k > 0 and not pq:\n        val, i, j = pq.pop()\n        for x in range(visited[-1][0] + 1, min(n, visited[-1][1])):\n            y = visited[-1][1]\n            swap(x, y)\n            pq.append((nums1[x] + nums2[y], x, y))\n            if not (x in visited or y in visited):\n                visited.add((x, y))\n\n        k -= 1\n    \n    result = []\n    for i, j in visited:\n        result.append([nums1[i], nums2[j]])\n\n    return result[:k]",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "def min_product_tuple(tuples_list):\n    # Find the smallest first element in each tuple and multiply them together\n    return reduce(lambda x, y: x * y[0] if x * y[0] < x * y[1] else x * y[1], tuples_list)\n\n# Test the function with provided data points\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8,\nassert min_product_tuple([(10, 20), (15, 2), (5, 10)]) == 30,\nassert min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100,\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_val(lst):\n    return min(filter(lambda x: isinstance(x, str), lst))",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Convert snake_case to CamelCase by replacing underscores with uppercase letters and capitalizing the first letter\n    return ''.join(word.capitalize() or '_' for word in re.split('_+', snake_str))\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert snake_to_camel('android_tv') == 'AndroidTv', \"Test case 1 failed\"\n    assert snake_to_camel('google_pixel') == 'GooglePixel', \"Test case 2 failed\"\n    assert snake_to_camel('apple_watch') == 'AppleWatch', \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n\n# Test cases\nprint(remove_odd([1,2,3]))  # Output: [2]\nprint(remove_odd([2,4,6]))  # Output: [2,4,6]\nprint(remove_odd([10,20,3]))  # Output: [10,20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [element for _, *elements in tuples_list for element in elements[:n]]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(seq1, seq2):\n    # Check if seq2 is completely contained within seq1\n    return set(seq2).issubset(set(seq1))",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Product(nums):\n    if not nums:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    # Initialize variables to store the maximum and minimum values\n    max_val = min_val = result = 0\n    \n    for num in nums:\n        # Update max_val and min_val\n        if num > max_val:\n            max_val, min_val = num, max_val\n        elif num < max_val:\n            min_val = num\n        \n        # Calculate the product of max_val and min_val\n        result = max(result, max_val * min_val)\n    \n    return result",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Base case where n is not divisible by 3\n        if n % 3 != 0:\n            return max(breakSum(n - 1), breakSum(n // 2))\n        else:\n            # Recursive call with adjusted values\n            return max(breakSum((n + 2) // 3), breakSum(n // 3)) + n",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(lst):\n    # Sort each tuple and concatenate them with a comma separator\n    result = [tuple(sorted(tup)) for tup in lst]\n    # Join each sorted tuple with a comma separator\n    joined_result = ', '.join(map(str, result))\n    # Split the result back into tuples\n    final_result = map(tuple, joined_result.split(', '))\n    \n    return final_result",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max(L):\n    max_length = -1\n    result = []\n    for sub_list in L:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n            result = sub_list\n    return result\n\n# Test cases\nprint(Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]))  # Expected output: ['A', 'B', 'C']\nprint(Find_Max([[1], [1, 2], [1, 2, 3]]))             # Expected output: [1, 2, 3]\nprint(Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))     # Expected output: [1, 5, 6, 1]",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_and_sum(numbers):\n    # Round each number in the list using map with lambda and then convert back to float for proper addition\n    rounded_numbers = [round(num) for num in numbers]\n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(numbers)\n    return result\n\n# Test cases to verify the correctness of the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\nassert round_and_sum([5,2,9,24.3,29]) == 345\nassert round_and_sum([25.0,56.7,89.2]) == 513",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i)**3\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_tuple(tup):\n    # Use join method with string concatenation operator to combine elements of tuple separated by space\n    result = \"_\".join(map(str, tup))\n    return result\n\n# Test cases to verify the correctness of the function\nprint(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))  # Expected output: ID-is-4-UTS\nprint(concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")))  # Expected output: QWE-is-4-RTY\nprint(concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")))   # Expected output: ZEN-is-4-OP",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes from 1 to n\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the average of cubes\n    avg_of_cubes = sum_of_cubes / n\n    return avg_of_cubes",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_maxgold(mine_map, rows, cols):\n    if not mine_map or rows <= 0 or cols <= 0:\n        return 0\n    \n    dp = [[-1 for _ in range(cols)] for _ in range(rows)]\n    \n    def dfs(i, j):\n        if i < 0 or i >= rows or j < 0 or j >= cols or dp[i][j] != -1:\n            return 0\n        \n        dp[i][j] = mine_map[i][j]\n        \n        # Explore all possible moves: up, down, left, right\n        max_gold = mine_map[i][j] + max(\n            dfs(i-1, j) if i > 0 else 0,\n            dfs(i+1, j) if i < rows-1 else 0,\n            dfs(i, j-1) if j > 0 else 0,\n            dfs(i, j+1) if j < cols-1 else 0\n        )\n        \n        return max_gold\n    \n    start_row, start_col = 0, 0\n    while start_row < rows and start_col < cols:\n        current_max = -float('inf')\n        for i in range(start_row, min(rows, start_row+rows)):\n            for j in range(start_col, min(cols, start_col+cols)):\n                if dp[i][j] == -1:\n                    continue\n                if dp[i][j] > current_max:\n                    current_max = dp[i][j]\n        return current_max\n\n    return 0",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(strings_tuple):\n    # Extracting and returning the last character from each string in the tuple\n    return [string[-1] for string in strings_tuple]\n\n# Test cases\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Expected output: ['s', 'r', 's']\nprint(extract_rear(('Avenge', 'for', 'People')))  # Expected output: ['e', 'r', 'e']\nprint(extract_rear(('Gotta', 'get', 'go')))  # Expected output: ['a', 't', 'o']",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lists, element):\n    count = 0\n    for sublist in lists:\n        if element in sublist:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_string):\n    # Use regular expression to find all digits in the string and sort them.\n    sorted_digits = ''.join(sorted(re.findall(r'\\d', date_string)))\n    \n    # Reconstruct the date string with new order of digits.\n    result_date = f\"{sorted_digits[-2:]}-{sorted_digits[1:-2]}-{sorted_digits[:1]}\"\n    \n    return result_date\n\n# Test cases to verify the correctness of the solution.\nassert change_date_format(\"2026-01-02\") == \"02-01-2026\"\nassert change_date_format(\"2020-11-13\") == \"13-11-2020\"\nassert change_date_format(\"2021-04-26\") == \"26-04-2021\"\n\nprint(change_date_format(\"2026-01-02\"))  # Output: '02-01-2026'",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n    \n    return arr",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    # Element-wise multiplication of tuples with zeros in place of non-matching elements\n    result = tuple([i*j for i, j in zip(tup1, tup2)])\n    return result",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    return -c/a**2 * b**2",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    return (a + c) / 2",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(arr, num):\n    for element in arr:\n        if element > num:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n\n# Test cases\nprint(check_greater([1, 2, 3, 4, 5], 4))  # Expected output: \"No, entered number is less than those in the array\"\nprint(check_greater([2, 3, 4, 5, 6], 8))  # Expected output: \"Yes, the entered number is greater than those in the array\"\nprint(check_greater([9, 7, 4, 8, 6, 1], 11))  # Expected output: \"Yes, the entered number is greater than those in the array\"",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_one(text):\n    pattern = 'a(b*)'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(n):\n    # Calculate the last digit by taking modulo with 10\n    return n % 10",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    # Filter and collect all negative numbers from the given list\n    negatives = [num for num in lst if num < 0]\n    \n    # Return the filtered list of negative numbers\n    return negatives",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    return ''.join([char for char in s if ord(char) % 2 == 0])",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_bidirectional(tuples):\n    # Initialize a dictionary to store tuples and their occurrences\n    num_map = defaultdict(int)\n    \n    # Count occurrences of each number in the input list\n    for i in range(len(tuples)):\n        num_map[tuples[i]] += 1\n    \n    # Calculate the total number of possible bidirectional tuples\n    all_pairs = len(tuples) * (len(tuples) - 1)\n    \n    # Subtract twice the number of times a tuple occurs from the total possible pairs\n    # This accounts for double counting due to self-pairing\n    result = all_pairs - (num_map[len(tuples)] * 2)\n    \n    return str(result)\n\n# Test cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: \"3\"\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: \"2\"\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])) # Output: \"4\"",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_adverb_position(sentence):\n    # Splitting the sentence into words for easier checking of each word\n    words = sentence.split()\n    \n    # Dictionary to store adverbs with their starting index and position\n    adverbs = {}\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Checking if the word is an adverb based on specific rules\n        if word.endswith('ly') or word.lower().endswith('ly'):\n            adverbs[word] = [i, len(word)]\n    \n    return list(adverbs.items())\n\n# Example check function calls\nprint(find_adverb_position(\"clearly!! we can see the sky\"))\nprint(find_adverb_position(\"seriously!! there are many roses\"))\nprint(find_adverb_position(\"unfortunately!! sita is going to home\"))",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(length):\n    # Calculate the surface area of a cube given its length\n    return 6 * length**2",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import numpy as np\n\ndef positive_count(arr):\n    return sum(np.array(arr) > 0) / len(arr)",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(nums):\n    # Initialize variable to store the largest negative number found so far.\n    largest = float('-inf')\n    \n    # Iterate through each number in the list.\n    for num in nums:\n        # If the current number is less than zero and greater than the current largest negative number,\n        # update the largest variable with the new value of the current number.\n        if num < 0 and num > largest:\n            largest = num\n    \n    # Return the largest negative number found.\n    return largest",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(test_list, n):\n    # Trim each tuple in the list by n elements and convert it back into a list of tuples.\n    result = [tuple(t[n:]) for t in test_list]\n    return result\n\n# Test cases\nprint(trim_tuple([((5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)), ((5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7))], 2))",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        product = 1\n        for j in range(len(tup1[i])):\n            product *= tup1[i][j] * tup2[j][i]\n        result.append(tuple([product]))\n    return tuple(result)\n\n# Test cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Occurrence(lst, target):\n    return sum(1 for item in lst if item == target)",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [num**3 for num in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    def perrin_sequence(k):\n        if k == 0:\n            return 3\n        elif k == 1:\n            return 0\n        else:\n            return perrin_sequence(k - 2) + perrin_sequence(k - 3)\n\n    total = sum(perrin_sequence(i) for i in range(max(5, n), n))\n    return total",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the squared distances between all pairs of points\n    d1 = (x1 - x2)**2 + (y1 - y2)**2\n    d2 = (x1 - x3)**2 + (y1 - y3)**2\n    d3 = (x2 - x3)**2 + (y2 - y3)**2\n    \n    # Check if the sum of any two sides is greater than the third side\n    return d1 + d2 > d3 and d1 + d3 > d2 and d2 + d3 > d1",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(strings, size):\n    return [s[-size:] for s in strings]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(s):\n    # Use regular expression to replace one or more whitespace characters (\\s+) with an empty string\n    result = re.sub(r'\\s+', '', s)\n    return result",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(amount_a, amount_b):\n    if amount_a > amount_b:\n        return amount_a - amount_b\n    elif amount_a < amount_b:\n        return None\n    else:\n        return \"Both amounts are equal\"",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sumofFactors(num):\n    total = 0\n    # Loop through all numbers from 1 to num\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            # If both divisors are the same, add it once\n            if i * i == num:\n                total += i\n            else:\n                # Add both divisors\n                total += i\n                total += num // i\n    return total",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz(text):\n    # Use regex to find if the input string contains the pattern \"z\" followed by any characters\n    if re.search(r'\\b\\w*z\\b', text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases\nprint(text_match_wordz(\"pythonz.\"))   # Expected output: Found a match!\nprint(text_match_wordz(\"xyz.\"))      # Expected output: Found a match!\nprint(text_match_wordz(\"  lang  \"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    \"\"\"\n    This function checks if the given month number has 31 days.\n    \n    Parameters:\n    - month_num (int): The month number to be checked.\n    \n    Returns:\n    - bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    return month_num in [1, 3, 5, 7, 8, 10, 12] or month_num == 2 and month_num != 2\n\n# Test cases\nprint(check_monthnumb_number(5)) # Expected output: True\nprint(check_monthnumb_number(2)) # Expected output: False\nprint(check_monthnumb_number(6)) # Expected output: False",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(lst):\n    # Sort each sublist and then take the first element\n    return min(map(min, lst), key=len)",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Use regex to replace all uppercase characters with an empty string\n    return re.sub('[A-Z]', '', input_string)",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list containing \n    the first element from each sublist.\n    \n    Args:\n    lst (list): A list of lists where each sublist contains elements.\n    \n    Returns:\n    list: A list containing the first element from each sublist in their respective order.\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n\n# Test cases\nassert extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert extract([[1,2,3],[4, 5]]) == [1, 4]\nassert extract([[9,8,1],[1,2]]) == [9, 1]",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase characters\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter and increment count accordingly\n        if char >= 'A' and char <= 'Z':\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'itertools' is not defined",
      "Test 2: FAIL - name 'itertools' is not defined",
      "Test 3: FAIL - name 'itertools' is not defined"
    ],
    "generated_code": "def combinations_list(lst):\n    return [list(x) for x in itertools.combinations(lst, len(lst))]",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return None\n    \n    max_val = float('-inf')\n    min_val = float('inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in nums:\n        if num == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n            continue\n        \n        temp_max = max(num * max_ending_here, num * min_ending_here, num)\n        max_ending_here = max(temp_max, num)\n        \n        temp_min = min(num * max_ending_here, num * min_ending_here, num)\n        min_ending_here = min(temp_min, num)\n        \n        max_val = max(max_val, max_ending_here)\n    \n    return max_val\n\n# Test Cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))  # Expected output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2]))       # Expected output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3]))     # Expected output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for *: 'set' and 'int'",
      "Test 2: FAIL - unsupported operand type(s) for *: 'set' and 'int'",
      "Test 3: FAIL - unsupported operand type(s) for *: 'set' and 'int'"
    ],
    "generated_code": "def check_value(d, val):\n    return d.values() == {val} * len(d)",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(input_dict):\n    return {key:value for key, value in input_dict.items() if value is not None}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_peak(arr, n): \n    if arr is None or len(arr) == 0:\n        return -1\n  \n    start = 0\n    end = n-1\n    while(start <= end):\n        mid = int((start + end)/2)\n  \n        # Check if mid is greater than its left neighbor\n        if ((mid == 0 or arr[mid] > arr[mid-1]) and\n                (mid == n-1 or arr[mid] > arr[mid+1])):\n            return mid\n       \n        # If the middle element is not peak and its right neighbor is greater than it,\n        # then the right half must have a peak element\n        elif(mid > 0 and arr[mid] < arr[mid + 1]):\n            start = mid + 1\n          \n        # If the middle element is not peak and its left neighbor is greater than it,\n        # then the left half must have a peak element\n        else:\n            end = mid - 1\n    return -1",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_number):\n    if decimal_number == 0:\n        return \"0\"\n    result = \"\"\n    while decimal_number > 0:\n        result = str(decimal_number % 8) + result\n        decimal_number //= 8\n    return result\n\n# Test cases\nprint(decimal_to_Octal(10))  # Output: 12\nprint(decimal_to_Octal(2))   # Output: 2\nprint(decimal_to_Octal(33))  # Output: 41",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'set' object is not subscriptable",
      "Test 2: FAIL - 'set' object is not subscriptable",
      "Test 3: FAIL - 'set' object is not subscriptable"
    ],
    "generated_code": "from typing import List\n\ndef max_product(arr: List[int], k: int) -> int:\n    # Convert the input list into a set for quick lookup\n    num_set = set(arr)\n    \n    max_product = float('-inf')\n    \n    # Iterate through all unique pairs in the set and calculate their product\n    for i in range(len(num_set)):\n        for j in range(i + 1, len(num_set)):\n            current_product = num_set[i] * num_set[j]\n            if current_product >= max_product and len(set(str(current_product))) == k:\n                max_product = current_product\n    \n    return max_product",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_profit(prices: List[int], k: int) -> int:\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if n <= k:\n        return sum(max(0, prices[i] - prices[i-k]) for i in range(k, n))\n    \n    dp = [[-prices[0]] * n for _ in range(k + 1)]\n    \n    for i in range(1, n):\n        for j in range(1, min(i + 1, k) + 1):\n            dp[j][i] = max(dp[j][i-1], prices[i] + dp[j-1][i-1])\n    \n    return dp[k][-1]\n\n# Test cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)) # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))   # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))         # Expected output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def add_pairwise(tuples_list):\n    # Convert each tuple in the list into a set for pairwise addition and then back to a list\n    return [sum(pair) for pair in zip(*tuples_list)]\n\n# Test cases\nprint(add_pairwise([(1, 5, 7, 8, 10)]))\nprint(add_pairwise([(2, 6, 8, 9, 11)]))\nprint(add_pairwise([(3, 7, 9, 10, 12)]))",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    product = 1\n    for num in arr:\n        product *= num % m\n    return product % m",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(nums):\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] + 1 != nums[i + 1]:\n            return False\n    return True",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(list1, list2):\n    # Convert each tuple in both lists into a set for easier comparison\n    set1 = set(map(frozenset, list1))\n    set2 = set(map(frozenset, list2))\n\n    # Find the symmetric difference between sets and convert back to tuples\n    result_set = frozenset(tuple(sorted(x)) for x in map(lambda t: sorted(t), set1.symmetric_difference(set2)))\n    \n    # Return as a dictionary with custom key type to match expected output format\n    return {frozenset(x): None for x in result_set}\n\n# Test Cases\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])) # Should return {(4, 5), (3, 4), (5, 6)}\nprint(tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)])) # Should return {(4, 7), (1, 4)}\nprint(tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)])) # Should return {(1, 3), (2, 3)}",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_counter(counter_dict):\n    \"\"\"\n    Sorts a dictionary of counts by its values in descending order.\n    \n    Parameters:\n    - counter_dict: A dictionary with string keys and integer values representing count.\n    \n    Returns:\n    - A list of tuples sorted by values, where each tuple contains a key-value pair from the original dictionary,\n      ordered by their corresponding values in descending order.\n      \n    Example usage:\n    >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n    [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    >>> sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})\n    [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    >>> sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})\n    [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n    \"\"\"\n    return sorted(counter_dict.items(), key=lambda item: item[1], reverse=True)\n\n# Test Cases\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)], \"Test case 1 failed\"\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)], \"Test case 2 failed\"\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Return the sum of the maximum and minimum elements\n    return max_element + min_element",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\n    \"\"\"\n    This function takes a string as input and returns the same string converted to lowercase.\n    \n    Args:\n        s (str): The input string which needs to be converted to lowercase.\n        \n    Returns:\n        str: The input string in lowercase.\n    \"\"\"\n    return s.lower()\n\n# Test Cases\nprint(is_lower(\"InValid\"))  # Expected output: invalid\nprint(is_lower(\"TruE\"))     # Expected output: true\nprint(is_lower(\"SenTenCE\")) # Expected output: sentence",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_lowercase(s):\n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate through each character in the input string\n    for i in range(len(s)):\n        # Check if the current character is uppercase\n        if s[i].isupper():\n            # Append it to the result list\n            res.append(s[i])\n    \n    # Join the list elements into a single string and return it\n    return ''.join(res)",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(number):\n    if number < 0:\n        return -first_Digit(-number)\n    \n    while number >= 10:\n        number //= 10\n    \n    return number\n\n# Test cases\nprint(first_Digit(123))  # Output: 1\nprint(first_Digit(456))  # Output: 4\nprint(first_Digit(12))   # Output: 1",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(input_string):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # Iterate through the input string and count occurrences\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the maximum occurrence value\n    max_occurrence = max(char_count.values())\n    \n    # Find the character with the maximum occurrence\n    max_char = \"\"\n    for char, count in char_count.items():\n        if count == max_occurrence:\n            max_char = char\n            break\n    \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset_sum(numbers, target, total_sum=0):\n    numbers.sort(reverse=True)\n    for num in numbers:\n        remainder = total_sum - num\n        if remainder == 0:\n            return True\n        elif remainder > 0 and is_subset_sum(numbers, target, remainder):\n            return True\n    return False\n\n# Test cases\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))  # Output: True\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30))  # Output: False\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15))  # Output: True",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(string):\n    # Use regex to find patterns where an uppercase letter is followed by lowercase letters\n    pattern = '[A-Z][a-z]'\n    result = re.search(pattern, string)\n    \n    if result:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases to verify the correctness of the function\nassert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1\n\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_matching_tuple(tuple_list_1, tuple_list_2):\n    # Remove all elements in tuple_list_2 from tuple_list_1 if they match\n    for item in tuple_list_2:\n        while item in tuple_list_1:\n            tuple_list_1.remove(item)\n    \n    return tuple_list_1\n\n# Test cases\nprint(remove_matching_tuple([(\"Hello\", \"dude\"), (\"How\", \"are\"), (\"you\", \"?\")], [(\"Hello\", \"dude\"), (\"How\", \"are\")]))  # Output: [('you', '?')]\nprint(remove_matching_tuple([(\"Part\", \"of\"), (\"the\", \"journey\"), (\"is \", \"end\")], [(\"Journey\", \"the\"), (\"is\", \"end\")] ))  # Output: [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nprint(remove_matching_tuple([(\"Its\", \"been\"), (\"a\", \"long\"), (\"day\", \"without\")], [(\"a\", \"long\"), (\"my\", \"friend\")] ))  # Output: [('Its', 'been'), ('day', 'without')]",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - largest_palindrome() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef largest_palindrome(arr: List[int]) -> int:\n    \"\"\"\n    Finds the largest palindrome within an array of integers.\n    \n    Parameters:\n    arr (List[int]): The input list containing integer values.\n    \n    Returns:\n    int: The largest palindrome found in the list.\n    \"\"\"\n    max_palindrome = -1\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    q = 1 - p\n    numerator = math.comb(n, k)\n    denominator = pow(q, n-k) * pow(p, k)\n    return numerator / denominator",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a new list where the tuples are sorted in increasing order based on the second element of each tuple.\n    \n    :param test_list: List of tuples\n    :return: A new list of tuples sorted in increasing order based on the second element of each tuple\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[1])\n\n# Test cases to verify the correctness of the solution\nprint(sort_tuple([(1, 3), (3, 2), (2, 1)]))  # Expected output: [(2, 1), (3, 2), (1, 3)]\nprint(sort_tuple([(2, 4), (3, 3), (1, 1)]))  # Expected output: [(1, 1), (3, 3), (2, 4)]\nprint(sort_tuple([(3, 9), (6, 7), (4, 3)]))  # Expected output: [(4, 3), (6, 7), (3, 9)]",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def area_pentagon(s):\n    \"\"\"\n    This function calculates the area of a regular pentagon with side length s.\n    \n    Parameters:\n    - s: The side length of the pentagon.\n    \n    Returns:\n    - The area of the pentagon as a float.\n    \"\"\"\n    return 5 * ((3 ** 0.5) / 4) * s ** 2",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    # Find the maximum value in the array\n    max_value = max(arr)\n    # Initialize count to zero\n    count = 0\n    # Loop through the array to count occurrences of the maximum value\n    for i in arr:\n        if i == max_value:\n            count += 1\n    # Return the count of the maximum value\n    return count\n\n# Test cases\nprint(frequency_Of_Largest([1,2,3,4,4]))  # Output: 2\nprint(frequency_Of_Largest([5,6,5]))      # Output: 1\nprint(frequency_Of_Largest([2,7,7,7]))    # Output: 3",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_symmetric(tup_list):\n    sym_pairs = set()\n    \n    for tup in tup_list:\n        if len(tup) == 2 and tup[0] == tup[1]:\n            sym_pairs.add(tuple(sorted(tup)))\n            \n    return sym_pairs\n\n# Test Cases\nprint(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])) # Should return {(8, 9), (6, 7)}\nprint(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])) # Should return {(9, 10), (7, 8)}\nprint(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])) # Should return {(8, 9), (10, 11)}",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    return int((a * ((r ** n) - 1)) / (r - 1))",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, x):\n    \"\"\"\n    Binary Search Function\n    \n    Searches for an element 'x' in a sorted list 'arr'. Returns True if 'x' is found,\n    otherwise returns False.\n    \n    Args:\n    arr : List[int] - A sorted list of integers where we need to search for 'x'.\n    x : int - The element to be searched within the list.\n    \n    Returns:\n    bool - True if 'x' is present in 'arr', False otherwise.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return False\n\n# Test cases\nprint(binary_search([1,2,3,5,8], 6)) # Expected output: False\nprint(binary_search([7, 8, 9, 10, 13], 10)) # Expected output: True\nprint(binary_search([11, 13, 14, 19, 22, 36], 23)) # Expected output: False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def calculate_polygons(x_start, y_start, width, height, depth):\n    polygons = []\n    \n    for i in range(depth + 1):\n        new_points = []\n        \n        # Calculate upper and lower points based on the current depth level\n        if i % 2 == 0:\n            top_points = [\n                (x_start - i * 0.5, y_start - (i // 2)),\n                (x_start + i * 0.5, y_start - (i // 2))\n            ]\n            bottom_points = [\n                (x_start - i * 0.5, y_start + (i // 2)),\n                (x_start + i * 0.5, y_start + (i // 2))\n            ]\n        else:\n            top_points = [\n                (x_start - (i // 2), y_start - (i % 2) * 0.5),\n                (x_start + (i // 2), y_start - (i % 2) * 0.5)\n            ]\n            bottom_points = [\n                (x_start - (i // 2), y_start + (i % 2) * 0.5),\n                (x_start + (i // 2), y_start + (i % 2) * 0.5)\n            ]\n            \n        # Append points to the current polygon's list\n        new_points.extend(top_points)\n        new_points.extend(bottom_points)\n        \n        polygons.append(new_points)\n    \n    return polygons\n\n# Test the function with provided data points\nprint(calculate_polygons(1,1, 4, 4, 3))  # Expected output as shown in Task 1\nprint(calculate_polygons(5,4,7,9,8))     # Expected output as shown in Task 2\nprint(calculate_polygons(9,6,4,3,2))     # Expected output as shown in Task 3",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert the binary tuple to an integer\n    result = int(\"\".join(map(str, binary_tuple)), 2)\n    return str(result)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Output: \"105\"\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Output: \"101\"\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Output: \"53\"",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Use regex to find and replace all lowercase letters with an empty string\n    return re.sub('[a-z]', '', input_string)\n\n# Test cases\nprint(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf'))  # Expected output: KDALOOOHLAJSI\nprint(remove_lowercase('ProducTnamEstreAmIngMediAplAYer'))  # Expected output: PTEAIMAAY\nprint(remove_lowercase('maNufacTuredbYSheZenTechNolOGIes'))  # Expected output: NTYSZTNOGI",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    return heapq.nsmallest(k, nums)",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cone(radius, slant_height):\n    base_area = math.pi * radius ** 2\n    lateral_surface_area = math.pi * radius * slant_height\n    total_surface_area = base_area + lateral_surface_area\n    return round(total_surface_area, 4)\n\n# Example usage:\nprint(surfacearea_cone(5, 12))  # Expected output: 282.7433\nprint(surfacearea_cone(10, 15)) # Expected output: 880.5179\nprint(surfacearea_cone(19, 17)) # Expected output: 2655.9240",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    while(b != 0):\n        t = b\n        b = a % b\n        a = t\n    return a",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef diameter_circle(radius):\n    \"\"\"\n    This function calculates and returns the diameter of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The diameter of the circle.\n    \"\"\"\n    return 2 * radius * math.sqrt(math.pi)\n\n# Check function with provided data points\nassert abs(diameter_circle(10) - 20) < 0.01\nassert abs(diameter_circle(40) - 80) < 0.01\nassert abs(diameter_circle(15) - 30) < 0.01\nprint(\"All checks passed.\")",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(elements_list):\n    # Concatenate all elements in the list with spaces between them and return the result as a single string\n    concatenated_string = \" \".join(elements_list)\n    return concatenated_string\n\n# Test the function with provided data points\nprint(concatenate_elements(['hello','there','have','a','rocky','day']))  # Expected output: 'hello there have a rocky day '\nprint(concatenate_elements(['Hi', 'there', 'How','are', 'you']))  # Expected output: 'Hi there How are you'\nprint(concatenate_elements(['Part', 'of', 'the','journey', 'is', 'end']))  # Expected output: 'Part of the journey is end'",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(x, y):\n    # Find and return the greatest common divisor of x and y\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return gcd(x, y)",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    return dividend % divisor",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_consecutive_nums(nums):\n    result = []\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        result.append(current_sum)\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    return total_sum",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_order(nums):\n    \"\"\"\n    Move all zeroes in the given list to the end while maintaining the relative order of other elements.\n    \n    :param nums: List[int] - The input list containing integers and possibly zero values.\n    :return: List[int] - The modified list with all zeroes moved to the end.\n    \"\"\"\n    # Count the number of zeros\n    count_zeros = nums.count(0)\n    # Remove zeros from the list\n    new_nums = [num for num in nums if num != 0]\n    # Add back the counted zeros at the end\n    new_nums.extend([0]*count_zeros)\n    return new_nums\n\n# Check function with provided data points\nprint(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]))  # Expected output: [6, 8, 2, 3, 4, 1, 0, 0, 0]\nprint(re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]))  # Expected output: [4, 2, 7, 9, 12, 0, 0, 0, 0]\nprint(re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]))  # Expected output: [3, 11, 74, 14, 1, 2, 0, 0, 0]",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def permutation_coefficient(p, k):\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    if not isinstance(p, int) or p < 0:\n        raise ValueError(\"p must be a non-negative integer\")\n\n    # Calculate the factorial of n and m using math library\n    import math\n    fact_n = math.factorial(p)\n    fact_k = math.factorial(k)\n    fact_p_minus_k = math.factorial(p - k)\n\n    # Calculate the permutation coefficient using formula\n    result = fact_n // (fact_k * fact_p_minus_k)\n    return result\n\n# Test case 1\nprint(permutation_coefficient(10, 2))  # Expected output: 90\n\n# Test case 2\nprint(permutation_coefficient(10, 3))  # Expected output: 720\n\n# Test case 3\nprint(permutation_coefficient(10, 1))  # Expected output: 10",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, word_set):\n    return [word for word in word_list if word not in word_set]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from typing import List\n\ndef same_order(list1: List[str], list2: List[str]) -> bool:\n    \"\"\"\n    Check if all common elements between two lists appear in the same order.\n    \n    Args:\n    - list1 (List[str]): The first list of strings.\n    - list2 (List[str]): The second list of strings.\n    \n    Returns:\n    - bool: True if all common elements appear in the same order, False otherwise.\n    \"\"\"\n    set1 = set(list1)\n    for elem in list1:\n        if elem not in list2:\n            return False\n        while elem in set1 and elem in list2:\n            set1.remove(elem)\n    return len(set1) == 0\n\n# Test cases to verify the correctness of the function\nassert same_order([\"red\",\"green\",\"black\",\"orange\"], [\"red\",\"pink\",\"green\",\"white\",\"black\"]) == True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"], [\"white\",\"orange\",\"pink\",\"black\"]) == False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"], [\"red\",\"pink\",\"green\",\"white\",\"black\"]) == True",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_Odd(num):\n    total = sum(i for i in range(1, num+1, 2))\n    count = len(range(1, num+1, 2))\n    if count == 0:\n        return 0\n    else:\n        return total / count",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def no_of_subsequences(arr, k):\n    count = 0\n    arr.sort(reverse=True)\n    i = 0\n    \n    while i < len(arr):\n        j = i + 1\n        temp_arr = []\n        \n        while j < len(arr) and arr[j] * arr[i] <= k:\n            temp_arr.append(arr[j])\n            j += 1\n        \n        if j == len(arr) or arr[j] * arr[i] > k:\n            break\n        \n        for num in temp_arr:\n            count += 1\n        i = j - 1\n    \n    return count\n\n# Test cases\nprint(no_of_subsequences([1,2,3,4], 10)) # Expected output: 11\nprint(no_of_subsequences([4,8,7,2], 50)) # Expected output: 9\nprint(no_of_subsequences([5,6,7,8], 15)) # Expected output: 4",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 601,
    "problem_statement": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nfrom typing import List, Tuple\nimport heapq\n\nclass Pair:\n    def __init__(self, start: int, end: int):\n        self.start = start\n        self.end = end\n\ndef max_chain_length(pairs: List[Pair], k: int) -> int:\n    # Sort pairs based on their end values in descending order\n    sorted_pairs = sorted(pairs, key=lambda x: -x.end)\n    \n    result = [None] * len(sorted_pairs)\n    count = [-sorted_pairs[i].end for i in range(len(sorted_pairs))]\n    result[0] = count.pop()\n    \n    for i in range(1, len(sorted_pairs)):\n        if count[i-1] > count[i]:\n            continue\n        else:\n            heap = []\n            while count[i-1] == count[i]:\n                j = heapq.heappop(heap)\n                result[i] = count[j]\n                count[j] -= sorted_pairs[i].start\n                if count[j] < 0:\n                    count[j] += sorted_pairs[i].end\n                heapq.heappush(heap, j)\n            heapq.heappush(heap, i)\n            while heap:\n                temp_index = heapq.heappop(heap)\n                result[temp_index] = count[temp_index]\n                count[temp_index] -= sorted_pairs[temp_index].start\n                if count[temp_index] < 0:\n                    count[temp_index] += sorted_pairs[temp_index].end\n                if not heap:\n                    break\n            heapq.heapify(heap)\n    \n    return result[-1]\n\n# Test cases\npairs_1 = [Pair(5, 24), Pair(15, 25), Pair(27, 40), Pair(50, 60)]\nk_1 = 4\nprint(max_chain_length(pairs_1, k_1))  # Expected output: 3\n\npairs_2 = [Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8)]\nk_2 = 4\nprint(max_chain_length(pairs_2, k_2))  # Expected output: 4\n\npairs_3 = [Pair(19, 10), Pair(11, 12), Pair(13, 14), Pair(15, 16), Pair(31, 54)]\nk_3 = 5\nprint(max",
    "test_cases": [
      "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
      "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
      "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
    ]
  },
  {
    "mbpp_id": 602,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
    "test_cases": [
      "assert first_repeated_char(\"abcabc\") == \"a\"",
      "assert first_repeated_char(\"abc\") == \"None\"",
      "assert first_repeated_char(\"123123\") == \"1\""
    ]
  },
  {
    "mbpp_id": 603,
    "problem_statement": "Write a function to get a lucid number smaller than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_ludic(n):\n    ludics = []\n    num = 1\n    while len(ludics) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            ludics.append(num)\n        num += 1\n    return ludics[:n]",
    "test_cases": [
      "assert get_ludic(10) == [1, 2, 3, 5, 7]",
      "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
      "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
    ]
  },
  {
    "mbpp_id": 604,
    "problem_statement": "Write a function to reverse words in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_words(input_string):\n    # Splitting the input string into words and reversing them using list comprehension and join method.\n    return ' '.join(reversed(input_string.split()))\n\n# Test cases\nprint(reverse_words(\"python program\"))  # Expected output: \"program python\"\nprint(reverse_words(\"java language\"))   # Expected output: \"language java\"\nprint(reverse_words(\"indian man\"))      # Expected output: \"man indian\"",
    "test_cases": [
      "assert reverse_words(\"python program\")==(\"program python\")",
      "assert reverse_words(\"java language\")==(\"language java\")",
      "assert reverse_words(\"indian man\")==(\"man indian\")"
    ]
  },
  {
    "mbpp_id": 605,
    "problem_statement": "Write a function to check if the given integer is a prime number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \n    Parameters:\n    num (int): The number to be checked for primality.\n    \n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True",
    "test_cases": [
      "assert prime_num(13)==True",
      "assert prime_num(7)==True",
      "assert prime_num(-1010)==False"
    ]
  },
  {
    "mbpp_id": 606,
    "problem_statement": "Write a function to convert degrees to radians.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\n# Test cases\nprint(radian_degree(90)) # Expected output: approximately 1.5707963267948966\nprint(radian_degree(60)) # Expected output: approximately 1.0471975511965976\nprint(radian_degree(120)) # Expected output: approximately 2.0943951023931953",
    "test_cases": [
      "assert radian_degree(90)==1.5707963267948966",
      "assert radian_degree(60)==1.0471975511965976",
      "assert radian_degree(120)==2.0943951023931953"
    ]
  },
  {
    "mbpp_id": 607,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_literals(text, literal):\n    \"\"\"\n    This function searches for the first occurrence of a specified literal substring \n    in the given text and returns the match object along with its start and end indices.\n    \n    Parameters:\n    - text (str): The string to be searched through.\n    - literal (str): The substring literal we're searching for.\n    \n    Returns:\n    - tuple: A tuple containing the matched literal string and its start and end positions.\n    \n    Usage examples:\n    >>> find_literals(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n    ('fox', 16, 19)\n    >>> find_literals(\"Its been a very crazy procedure right\", \"crazy\")\n    ('crazy', 16, 21)\n    >>> find_literals(\"Hardest choices required strongest will\", \"will\")\n    ('will', 35, 39)\n    \"\"\"\n    match = re.search(literal, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return (match.group(0), start_index, end_index)\n\n# Example usage\nprint(find_literals(\"The quick brown fox jumps over the lazy dog.\", \"fox\"))",
    "test_cases": [
      "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
      "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
      "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
    ]
  },
  {
    "mbpp_id": 608,
    "problem_statement": "Write a python function to find nth bell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def bell_Number(n):\n    # Base case for n=0\n    if n == 0:\n        return 1\n    \n    # Initialize list with initial values\n    result = [1] + [0] * n\n    \n    # Calculate Bell numbers using dynamic programming approach\n    for i in range(1, n+1):\n        temp_result = []\n        for j in range(i, -1, -1):\n            temp_result.append(result[j] + temp_result[-1])\n        result = temp_result\n    \n    return result[i]\n\n# Test cases\nprint(bell_Number(2))  # Expected output: 2\nprint(bell_Number(3))  # Expected output: 5\nprint(bell_Number(4))  # Expected output: 15",
    "test_cases": [
      "assert bell_Number(2) == 2",
      "assert bell_Number(3) == 5",
      "assert bell_Number(4) == 15"
    ]
  },
  {
    "mbpp_id": 609,
    "problem_statement": "Write a python function to find minimum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef floor_Min(a, b, c):\n    # Calculate the minimum of three numbers using max function with negative sign and absolute value\n    min_val = -max(-a, -b, -c)\n    # Return the result after rounding down to the nearest integer\n    return int(min_val)\n\n# Test cases to verify the correctness of the solution\nassert floor_Min(10, 20, 30) == 15\nassert floor_Min(1, 2, 1) == 0\nassert floor_Min(11, 10, 9) == 9\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert floor_Min(10,20,30) == 15",
      "assert floor_Min(1,2,1) == 0",
      "assert floor_Min(11,10,9) == 9"
    ]
  },
  {
    "mbpp_id": 610,
    "problem_statement": "Write a python function to remove the k'th element from a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_kth_element(lst, k):\n    del lst[k-1:k+1]\n    return lst",
    "test_cases": [
      "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
      "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
      "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
    ]
  },
  {
    "mbpp_id": 611,
    "problem_statement": "Write a function to find the maximum of nth column from the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_of_nth(lst, n):\n    # Extracting the nth element from each sub-list in the tuple list and finding the maximum value.\n    return max(x[n-1] for x in lst)",
    "test_cases": [
      "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
      "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
      "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
    ]
  },
  {
    "mbpp_id": 612,
    "problem_statement": "Write a python function to merge the first and last elements separately in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge(lst):\n    merged = []\n    for sub_lst in lst:\n        merged.append(sub_lst[0] + sub_lst[-1])\n    return merged",
    "test_cases": [
      "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
      "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
      "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
    ]
  },
  {
    "mbpp_id": 613,
    "problem_statement": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximum_value(record_list):\n    # Find the record with the highest values for each key\n    max_records = [(k, max(v)) for k, v in record_list]\n    # Sort records based on their associated values and then keys\n    sorted_max_records = sorted(max_records, key=lambda x: (-x[1], x[0]))\n    return sorted_max_records\n\n# Test cases\nprint(maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]))  # Expected: [('key1', 5), ('key2', 4), ('key3', 9)]\nprint(maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]))  # Expected: [('key1', 6), ('key2', 5), ('key3', 10)]\nprint(maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]))  # Expected: [('key1', 7), ('key2', 6), ('key3', 11)]",
    "test_cases": [
      "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
      "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
      "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
    ]
  },
  {
    "mbpp_id": 614,
    "problem_statement": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cummulative_sum(lst):\n    # Calculate the cumulative sum of all elements in the list of tuples\n    total = sum(sum(t) for t in lst)\n    return total",
    "test_cases": [
      "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
      "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
      "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
    ]
  },
  {
    "mbpp_id": 615,
    "problem_statement": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_tuple(tup_of_tuples):\n    return [sum(values) / len(values) for values in zip(*tup_of_tuples)]\n\n# Test cases\nprint(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))\nprint(average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))))\nprint(average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40))))",
    "test_cases": [
      "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
      "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
      "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
    ]
  },
  {
    "mbpp_id": 616,
    "problem_statement": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_modulo(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] % tup2[i])\n    return tuple(result)\n\n# Test cases\nprint(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))  # Output: (0, 4, 5, 1)\nprint(tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)))  # Output: (5, 5, 6, 1)\nprint(tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)))  # Output: (5, 6, 7, 1)",
    "test_cases": [
      "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
      "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
      "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
    ]
  },
  {
    "mbpp_id": 617,
    "problem_statement": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Jumps(d, k, n):\n    if d == 0:\n        return 0\n    jumps = 0\n    while n > 0:\n        n -= d\n        jumps += 1\n    return int(n/d + (n%d != 0))",
    "test_cases": [
      "assert min_Jumps(3,4,11)==3.5",
      "assert min_Jumps(3,4,0)==0",
      "assert min_Jumps(11,14,11)==1"
    ]
  },
  {
    "mbpp_id": 618,
    "problem_statement": "Write a function to divide two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef div_list(list_a: List[int], list_b: List[int]) -> List[float]:\n    # Use map with lambda to perform division between corresponding elements of both lists.\n    return [float(a) / float(b) for a, b in zip(list_a, list_b)]",
    "test_cases": [
      "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
      "assert div_list([3,2],[1,4])==[3.0, 0.5]",
      "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
    ]
  },
  {
    "mbpp_id": 619,
    "problem_statement": "Write a function to move all the numbers in it to the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_num(s):\n    result = ''\n    num_str = '1234567890'\n    \n    for char in s:\n        if char.isalpha():\n            result += char\n        elif char.isdigit() and char not in num_str:\n            # Remove duplicate digits from the beginning of the string\n            while len(result) > 0 and result[0].isdigit():\n                result = result[1:]\n            # Insert the found digit at the beginning of the string\n            result = char + result\n    \n    return result",
    "test_cases": [
      "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
      "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
      "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
    ]
  },
  {
    "mbpp_id": 620,
    "problem_statement": "Write a function to find the largest subset where each pair is divisible.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef largest_subset(numbers: List[int], divisor: int) -> int:\n    count = [1] * len(numbers)\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] % divisor == numbers[j] % divisor and numbers[i] < numbers[j]:\n                count[i] = max(count[i], count[j] + 1)\n\n    return max(count)",
    "test_cases": [
      "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
      "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
      "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
    ]
  },
  {
    "mbpp_id": 621,
    "problem_statement": "Write a function to increment the numeric values in the given strings by k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def increment_numerics(lst, k):\n    \"\"\"\n    This function takes a list of strings and an integer k. It increments each string's numeric value \n    by k. Strings containing numbers are assumed to be integers.\n    \n    :param lst: List[str] - The input list containing strings with numeric values.\n    :param k: int - The integer value to add to each numeric string.\n    :return: List[str] - A new list with incremented numeric values.\n    \"\"\"\n    return [str(int(num) + k) if num.isdigit() else num for num in lst]\n\n# Test cases\nprint(increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"], 6)) # Expected output: ['MSM', '240', 'is', '104', '129', 'best', '10']\nprint(increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"], 12)) # Expected output: ['Dart', '368', 'is', '100', '181', 'Super', '18']\nprint(increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"], 33)) # Expected output: ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
    "test_cases": [
      "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
      "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
      "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
    ]
  },
  {
    "mbpp_id": 622,
    "problem_statement": "Write a function to find the median of two sorted arrays of same size.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: get_median() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int]) -> float:\n    \"\"\"\n    Finds the median of two sorted arrays of equal length.\n    \n    Args:\n    nums1: A list of integers representing the first sorted array.\n    nums2: A list of integers representing the second sorted array.\n    \n    Returns:\n    The median as a float. If the combined list has an even number of elements,\n    it returns half way between the two middle numbers.\n    \"\"\"\n    merged = nums1 + nums2\n    sorted_list = sorted(merged)\n    mid = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]\n\n# Check function with provided data points\nassert abs(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) - 16.0) < 1e-5\nassert abs(get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) - 8.5) < 1e-5\nassert abs(get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) - 25.0) < 1e-5\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
      "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
      "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
    ]
  },
  {
    "mbpp_id": 623,
    "problem_statement": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import numpy as np\n\ndef nth_nums(arr, n):\n    return [x**n for x in arr]\n\n# Test Cases\nprint(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)) # Expected output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nprint(nth_nums([10,20,30],3)) # Expected output: [1000, 8000, 27000]\nprint(nth_nums([12,15],5)) # Expected output: [248832, 759375]",
    "test_cases": [
      "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
      "assert nth_nums([12,15],5)==([248832, 759375])"
    ]
  },
  {
    "mbpp_id": 624,
    "problem_statement": "Write a python function to convert the given string to upper case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_upper(s):\n    \"\"\"\n    Converts the input string s to uppercase.\n    \n    Parameters:\n        s (str): The input string\n    \n    Returns:\n        str: The converted string in uppercase\n    \"\"\"\n    return s.upper()",
    "test_cases": [
      "assert is_upper(\"person\") ==\"PERSON\"",
      "assert is_upper(\"final\") == \"FINAL\"",
      "assert is_upper(\"Valid\") == \"VALID\""
    ]
  },
  {
    "mbpp_id": 625,
    "problem_statement": "Write a python function to interchange first and last elements in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    \"\"\"\n    Interchanges the first and last elements of a given list.\n    \n    Parameters:\n    lst (list): The input list whose first and last elements are to be swapped.\n    \n    Returns:\n    list: A new list with the first and last elements interchanged.\n    \"\"\"\n    if isinstance(lst, list) and len(lst) > 0:\n        return [lst[-1]] + lst[1:-1] + [lst[0]]\n    else:\n        raise ValueError(\"Input must be a non-empty list\")\n\n# Check function with provided data points\nassert swap_List([1,2,3]) == [3,2,1], \"Test case 1 failed\"\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1], \"Test case 2 failed\"\nassert swap_List([4,5,6]) == [6,5,4], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert swap_List([1,2,3]) == [3,2,1]",
      "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
      "assert swap_List([4,5,6]) == [6,5,4]"
    ]
  },
  {
    "mbpp_id": 626,
    "problem_statement": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - x must be non-negative",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def triangle_area(x):\n    # The maximum area of a triangle inscribed in a semicircle is when the base of the triangle \n    # is equal to the diameter of the semicircle and the height is twice the radius.\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    max_area = 0.5 * 2 * 2  # Diameter as base, and radius times 2 as height for a full circle which becomes semicircle with half the area\n    return max_area",
    "test_cases": [
      "assert triangle_area(0) == 0",
      "assert triangle_area(-1) == -1",
      "assert triangle_area(2) == 4"
    ]
  },
  {
    "mbpp_id": 627,
    "problem_statement": "Write a python function to find the smallest missing number from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_First_Missing(arr, start, end):\n    for i in range(start + 1, end): # iterate through elements in the array starting from index 1\n        if arr[i] != i:\n            return i # return the first element which is not equal to its index\n    if start < end-1 and arr[start+1] == start+1:\n        return start+1 # check if the next element is also present as expected, then return the previous one\n    else:\n        return end # if no missing number is found, return the length of the array",
    "test_cases": [
      "assert find_First_Missing([0,1,2,3],0,3) == 4",
      "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
      "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
    ]
  },
  {
    "mbpp_id": 628,
    "problem_statement": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_spaces(input_string):\n    # Replace all spaces in the input string with '%20' using str.replace method\n    modified_string = input_string.replace(' ', '%20')\n    return modified_string\n\n# Test cases to verify the correctness of the function\nprint(replace_spaces(\"My Name is Dawood\"))  # Expected output: \"My%20Name%20is%20Dawood\"\nprint(replace_spaces(\"I am a Programmer\"))  # Expected output: \"I%20am%20a%20Programmer\"\nprint(replace_spaces(\"I love Coding\"))      # Expected output: \"I%20love%20Coding\"",
    "test_cases": [
      "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
      "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
      "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
    ]
  },
  {
    "mbpp_id": 629,
    "problem_statement": "Write a python function to find even numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    # Use list comprehension to filter out odd numbers and collect even ones\n    even_numbers = [num for num in lst if num % 2 == 0]\n    return even_numbers",
    "test_cases": [
      "assert Split([1,2,3,4,5]) == [2,4]",
      "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
      "assert Split ([8,12,15,19]) == [8,12]"
    ]
  },
  {
    "mbpp_id": 630,
    "problem_statement": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_coordinates(coord):\n    x, y = coord\n    result = []\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            if dx != 0 or dy != 0:\n                result.append([x + dx, y + dy])\n    return result\n\n# Test cases\nprint(get_coordinates((3, 4))) # Expected output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nprint(get_coordinates((4, 5))) # Expected output: [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nprint(get_coordinates((5, 6))) # Expected output: [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
    "test_cases": [
      "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
      "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
      "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
    ]
  },
  {
    "mbpp_id": 631,
    "problem_statement": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef replace_spaces(input_string):\n    # Use regex to find all spaces in the input string and replace them with underscores,\n    # then replace all underscores with spaces.\n    return re.sub(r'\\s', '_', input_string).replace('_', r' ').strip()\n\n# Test cases to verify the correctness of the solution\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
    "test_cases": [
      "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
      "assert replace_spaces('The Avengers') == 'The_Avengers'",
      "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
    ]
  },
  {
    "mbpp_id": 632,
    "problem_statement": "Write a python function to move all zeroes to the end of the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'move_zero' is not defined",
      "Test 2: FAIL - name 'move_zero' is not defined",
      "Test 3: FAIL - name 'move_zero' is not defined"
    ],
    "generated_code": "def move_zeroes(nums):\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n    return nums",
    "test_cases": [
      "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
      "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
      "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
    ]
  },
  {
    "mbpp_id": 633,
    "problem_statement": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def pair_OR_Sum(arr, n):\n    # Calculate the XOR of all elements in the array\n    xor_sum = reduce(lambda x, y: x ^ y, arr)\n    \n    # Initialize result with XOR sum\n    res = xor_sum\n    \n    # Iterate through half the size of the array for efficiency\n    for i in range(0, len(arr), 2):\n        temp = reduce(lambda x, y: x ^ y, arr[i:i+2])\n        \n        # Update the result by adding twice the value of the pair's XOR\n        res += 2 * temp\n    \n    return res",
    "test_cases": [
      "assert pair_OR_Sum([5,9,7,6],4) == 47",
      "assert pair_OR_Sum([7,3,5],3) == 12",
      "assert pair_OR_Sum([7,3],2) == 4"
    ]
  },
  {
    "mbpp_id": 634,
    "problem_statement": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    # Initialize the sum with the square of the first even number which is 2^4 = 16.\n    total_sum = pow(2, 4)\n    \n    # Calculate the next four even numbers and their fourth powers.\n    for i in range(2, n + 1):\n        total_sum += pow((2 * i), 4)\n    \n    return total_sum",
    "test_cases": [
      "assert even_Power_Sum(2) == 272",
      "assert even_Power_Sum(3) == 1568",
      "assert even_Power_Sum(4) == 5664"
    ]
  },
  {
    "mbpp_id": 635,
    "problem_statement": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heap_sort(arr):\n    # Build max-heap\n    for i in range(len(arr), -1, -1):\n        sift_down(arr, i, len(arr))\n    \n    # Extract elements from heap one by one\n    for end in range(len(arr)-1, 0, -1):\n        arr[end], arr[0] = arr[0], arr[end]  # Swap\n        sift_down(arr, 0, end)\n        \n    return arr\n\n\ndef sift_down(arr, start, end):\n    root = start\n    \n    while True:\n        child = 2 * root + 1  # Left child\n        if child >= end:\n            break\n        \n        if child + 1 < end and arr[child] < arr[child + 1]:\n            child += 1  # Right child exists and is greater than left child\n        \n        if arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]  # Swap\n            root = child\n        else:\n            break\n\n# Test cases\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))  # Expected output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]))  # Expected output: [14, 22, 25, 25, 35, 58, 65, 75, 85]\nprint(heap_sort([7, 1, 9, 5]))  # Expected output: [1, 5, 7, 9]",
    "test_cases": [
      "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
    ]
  },
  {
    "mbpp_id": 636,
    "problem_statement": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    # If the discriminant is zero, there's exactly one root which is reciprocal\n    if D == 0:\n        return \"Yes\"\n    \n    # If the discriminant is negative, there are no real roots and thus they can't be reciprocals\n    elif D < 0:\n        return \"No\"\n    \n    # For positive discriminant, calculate the two roots\n    x1 = (-b + sqrt(D)) / (2 * a)\n    x2 = (-b - sqrt(D)) / (2 * a)\n    \n    # Check if the product of the roots equals 1 (which means they're reciprocals)\n    if x1 * x2 == 1:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_cases": [
      "assert Check_Solution(2,0,2) == \"Yes\"",
      "assert Check_Solution(2,-5,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\""
    ]
  },
  {
    "mbpp_id": 637,
    "problem_statement": "Write a function to check whether the given amount has no profit and no loss",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def noprofit_noloss(amount1, amount2):\n    return amount1 == amount2",
    "test_cases": [
      "assert noprofit_noloss(1500,1200)==False",
      "assert noprofit_noloss(100,100)==True",
      "assert noprofit_noloss(2000,5000)==False"
    ]
  },
  {
    "mbpp_id": 638,
    "problem_statement": "Write a function to calculate wind chill index.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def wind_chill(temp, t): \n    return int(round((13.1 * temp) - (5.0 * t) - 99.6))",
    "test_cases": [
      "assert wind_chill(120,35)==40",
      "assert wind_chill(40,70)==86",
      "assert wind_chill(10,100)==116"
    ]
  },
  {
    "mbpp_id": 639,
    "problem_statement": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sample_nam(names):\n    # Filter out names starting with a lowercase letter and calculate their lengths\n    filtered_names = [name for name in names if not name[0].islower()]\n    return sum(len(name) for name in filtered_names)",
    "test_cases": [
      "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
      "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
      "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
    ]
  },
  {
    "mbpp_id": 640,
    "problem_statement": "Write a function to remove the parenthesis area in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - expected string or bytes-like object",
      "Test 2: FAIL - expected string or bytes-like object",
      "Test 3: FAIL - expected string or bytes-like object"
    ],
    "generated_code": "import re\n\ndef remove_parenthesis(s):\n    # Use regular expression to replace all occurrences of '()' with ''\n    return re.sub(r'\\(|\\)', '', s)",
    "test_cases": [
      "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
      "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
      "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
    ]
  },
  {
    "mbpp_id": 641,
    "problem_statement": "Write a function to find the nth nonagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_nonagonal(n):\n    # Formula for finding the nth nonagonal number: n * (7*n - 5)/2\n    return int((7*n**2 - 5*n) / 2)\n\n# Test cases\nprint(is_nonagonal(10))  # Expected output: 325\nprint(is_nonagonal(15))  # Expected output: 750\nprint(is_nonagonal(18))  # Expected output: 1089",
    "test_cases": [
      "assert is_nonagonal(10) == 325",
      "assert is_nonagonal(15) == 750",
      "assert is_nonagonal(18) == 1089"
    ]
  },
  {
    "mbpp_id": 642,
    "problem_statement": "Write a function to remove similar rows from the given tuple matrix.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_similar_row(matrix):\n    unique_rows = set(tuple(row) for row in matrix)\n    return {(tuple(row[0]), tuple(row[1])) for row in matrix if len(set(row)) != len(row)}",
    "test_cases": [
      "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
      "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
      "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
    ]
  },
  {
    "mbpp_id": 643,
    "problem_statement": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz_middle(text):\n    # Define the regular expression pattern to match words starting with 'z' but not at the beginning or end.\n    pattern = r\"\\b\\w*z\\w*\\b\"\n    \n    # Search for the pattern in the given text.\n    match = re.search(pattern, text)\n    \n    # If a match is found, return 'Found a match!', otherwise return 'Not matched!'\n    if match:\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n# Test cases to verify the correctness of the function.\nprint(text_match_wordz_middle(\"pythonzabc.\"))   # Expected output: Found a match!\nprint(text_match_wordz_middle(\"xyzabc.\"))       # Expected output: Found a match!\nprint(text_match_wordz_middle(\"  lang  \"))      # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 644,
    "problem_statement": "Write a python function to reverse an array upto a given position.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_Array_Upto_K(arr, k):\n    # Reverse elements from start of arr to index k-1\n    arr[:k] = reversed(arr[:k])\n    \n    return arr",
    "test_cases": [
      "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
      "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
      "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
    ]
  },
  {
    "mbpp_id": 645,
    "problem_statement": "Write a function to find the product of it’s kth index in the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_k_product(tuples_list, k_index):\n    total_product = 1\n    for tuple_ in tuples_list:\n        if len(tuple_) >= k_index + 1:\n            total_product *= tuple_[k_index]\n    return total_product",
    "test_cases": [
      "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
      "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
      "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
    ]
  },
  {
    "mbpp_id": 646,
    "problem_statement": "Write a python function to count number of cubes of size k in a cube of size n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_cubes' is not defined",
      "Test 2: FAIL - name 'No_of_cubes' is not defined",
      "Test 3: FAIL - name 'No_of_cubes' is not defined"
    ],
    "generated_code": "def no_of_cubes(n, k):\n    \"\"\"\n    Calculate the number of cubes of side length 'k' that can be placed inside a cube of side length 'n'.\n    \n    Parameters:\n    - n: An integer representing the side length of the larger cube.\n    - k: An integer representing the side length of the smaller cubes.\n    \n    Returns:\n    The total number of smaller cubes of size k that fit inside the larger cube of size n.\n    \"\"\"\n    # Ensure n is greater than or equal to k for placement to be possible\n    if n < k:\n        return 0\n    \n    # Calculate the number of smaller cubes along one dimension of the larger cube\n    cubes_along_one_dim = n // k\n    \n    # Return the total number of smaller cubes\n    return cubes_along_one_dim ** 3",
    "test_cases": [
      "assert No_of_cubes(2,1) == 8",
      "assert No_of_cubes(5,2) == 64",
      "assert No_of_cubes(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 647,
    "problem_statement": "Write a function to split a string at uppercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_upperstring(s):\n    return [s[i:i+1] for i in range(len(s)) if s[i].isupper()]",
    "test_cases": [
      "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
      "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
      "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
    ]
  },
  {
    "mbpp_id": 648,
    "problem_statement": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def exchange_elements(arr):\n    for i in range(0, len(arr), 2):  # Start from index 0, increment by 2, end at length-1\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr\n\n# Test cases\nprint(exchange_elements([0,1,2,3,4,5]))  # Expected output: [1, 0, 3, 2, 5, 4]\nprint(exchange_elements([5,6,7,8,9,10]))  # Expected output: [6, 5, 8, 7, 10, 9]\nprint(exchange_elements([25,35,45,55,75,95]))  # Expected output: [35, 25, 55, 45, 95, 75]",
    "test_cases": [
      "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
      "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
      "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
    ]
  },
  {
    "mbpp_id": 649,
    "problem_statement": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Range_list(numbers, start_index, end_index):\n    total = 0\n    for i in range(start_index - 1, end_index + 1):\n        total += numbers[i]\n    return total",
    "test_cases": [
      "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
      "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
      "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
    ]
  },
  {
    "mbpp_id": 650,
    "problem_statement": "Write a python function to check whether the given two arrays are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - are_Equal() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - are_Equal() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - are_Equal() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def are_Equal(arr1, arr2, length):\n    # Check if both arrays have the same length\n    if len(arr1) != length or len(arr2) != length:\n        return False\n    \n    # Sort both arrays\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    \n    # Compare each element of the sorted arrays\n    for i in range(length):\n        if sorted_arr1[i] != sorted_arr2[i]:\n            return False\n            \n    return True",
    "test_cases": [
      "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
      "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
      "assert are_Equal([8,9],[4,5,6],2,3) == False"
    ]
  },
  {
    "mbpp_id": 651,
    "problem_statement": "Write a function to check if one tuple is a subset of another tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset(subset, superset):\n    \"\"\"\n    Check if 'subset' is a subset of 'superset'.\n\n    Parameters:\n    subset (tuple): The potential subset.\n    superset (tuple): The set against which the subset will be checked.\n\n    Returns:\n    bool: True if every element in 'subset' is also present in 'superset', otherwise False.\n    \"\"\"\n    return all(item in superset for item in subset)\n\n# Test cases\nprint(check_subset((10, 4, 5, 6), (5, 10)))  # Expected output: True\nprint(check_subset((1, 2, 3, 4), (5, 6)))   # Expected output: False\nprint(check_subset((7, 8, 9, 10), (10, 8))) # Expected output: True",
    "test_cases": [
      "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
      "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
      "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
    ]
  },
  {
    "mbpp_id": 652,
    "problem_statement": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def matrix_to_list(matrix):\n    # Flatten the matrix and join elements into a string format as required\n    result = [str(tuple(row)) for row in zip(*matrix)]\n    return '[' + ', '.join(result) + ']'\n\n# Test the function with provided data points\nprint(matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]))\nprint(matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]))\nprint(matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]))",
    "test_cases": [
      "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
      "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
      "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
    ]
  },
  {
    "mbpp_id": 653,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef grouping_dictionary(lst):\n    # Initialize an empty dictionary for storing grouped data\n    result = defaultdict(list)\n    \n    # Iterate over each key-value pair in the list\n    for key, value in lst:\n        # Append the current value to the corresponding key's list in the dictionary\n        result[key].append(value)\n    \n    return dict(result)  # Convert defaultdict back to a regular dictionary before returning",
    "test_cases": [
      "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
      "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
      "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
    ]
  },
  {
    "mbpp_id": 654,
    "problem_statement": "Write a function to find the perimeter of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_cases": [
      "assert rectangle_perimeter(10,20)==60",
      "assert rectangle_perimeter(10,5)==30",
      "assert rectangle_perimeter(4,2)==12"
    ]
  },
  {
    "mbpp_id": 655,
    "problem_statement": "Write a python function to find the sum of fifth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fifth_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += pow(i, 5)\n    return total_sum",
    "test_cases": [
      "assert fifth_Power_Sum(2) == 33",
      "assert fifth_Power_Sum(4) == 1300",
      "assert fifth_Power_Sum(3) == 276"
    ]
  },
  {
    "mbpp_id": 656,
    "problem_statement": "Write a python function to find the minimum sum of absolute differences of two arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_Min_Sum(arr1: List[int], arr2: List[int], n: int) -> int:\n    \"\"\"\n    Finds the minimum sum of absolute differences between corresponding elements of two arrays.\n    \n    Parameters:\n    arr1 (List[int]): First array of integers.\n    arr2 (List[int]): Second array of integers with the same length as arr1.\n    n (int): The size of both arrays.\n    \n    Returns:\n    int: The minimum sum of absolute differences between corresponding elements of the two arrays.\n    \"\"\"\n    # Calculate prefix sums for both arrays\n    pre_sum_arr1 = [0] * (n + 1)\n    pre_sum_arr2 = [0] * (n + 1)\n    for i in range(n):\n        pre_sum_arr1[i+1] = pre_sum_arr1[i] + arr1[i]\n        pre_sum_arr2[i+1] = pre_sum_arr2[i] + arr2[i]\n\n    min_diff = float('inf')\n    for i in range(1, n+1):\n        diff = abs(pre_sum_arr1[i] - pre_sum_arr2[i]) + abs((pre_sum_arr1[n] - pre_sum_arr1[i]) - (pre_sum_arr2[n] - pre_sum_arr2[i]))\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
    "test_cases": [
      "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
      "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
      "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
    ]
  },
  {
    "mbpp_id": 657,
    "problem_statement": "Write a python function to find the first digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(n):\n    num = str(factorial(n))\n    for i in range(len(num)):\n        if num[i] == '1':\n            continue\n        else:\n            return int(num[i])\n    \ndef factorial(n): \n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    return fact\n\n# Test cases\nprint(first_Digit(5)) # Expected output: 1\nprint(first_Digit(10)) # Expected output: 3\nprint(first_Digit(7)) # Expected output: 5",
    "test_cases": [
      "assert first_Digit(5) == 1",
      "assert first_Digit(10) == 3",
      "assert first_Digit(7) == 5"
    ]
  },
  {
    "mbpp_id": 658,
    "problem_statement": "Write a function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\ndef max_occurrences(nums):\n    return max(Counter(nums).items(), key=lambda x: x[1])[0]",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
      "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
      "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
    ]
  },
  {
    "mbpp_id": 659,
    "problem_statement": "Write a python function to print duplicants from a list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Repeat' is not defined",
      "Test 2: FAIL - name 'Repeat' is not defined",
      "Test 3: FAIL - name 'Repeat' is not defined"
    ],
    "generated_code": "def repeat(lst):\n    # Use set comprehension to find duplicates in the list and convert it back to a list\n    return list(set([x for x in lst if lst.count(x) > 1]))\n\n# Test cases\nprint(repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]))  # Output: [20, 30, -20, 60]\nprint(repeat([-1, 1, -1, 8]))  # Output: [-1]\nprint(repeat([1, 2, 3, 1, 2,]))  # Output: [1, 2]",
    "test_cases": [
      "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
      "assert Repeat([-1, 1, -1, 8]) == [-1]",
      "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
    ]
  },
  {
    "mbpp_id": 660,
    "problem_statement": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_Points' is not defined",
      "Test 2: FAIL - name 'find_Points' is not defined",
      "Test 3: FAIL - name 'find_Points' is not defined"
    ],
    "generated_code": "def find_points(range_start1, range_end1, range_start2, range_end2):\n    \"\"\"\n    Finds points that do not overlap between two given ranges.\n    \n    Parameters:\n    - range_start1 (int): Start of the first range.\n    - range_end1 (int): End of the first range.\n    - range_start2 (int): Start of the second range.\n    - range_end2 (int): End of the second range.\n    \n    Returns:\n    - tuple: A pair of integers representing points that do not overlap between the two ranges.\n    \"\"\"\n    # Calculate the maximum start and minimum end possible for the selected points\n    max_possible_start = max(range_start1, range_start2)\n    min_possible_end = min(range_end1, range_end2)\n    \n    # Find the common part where both ranges intersect\n    intersection = [x for x in range(max_possible_start, min_possible_end + 1)]\n    \n    # If there is an intersection, select the largest element as the result\n    if intersection:\n        return (max(intersection), min_possible_end)\n    \n    # If there's no intersection, return one end of each range as the result\n    return (range_start1, range_end1)\n\n# Test Cases\nprint(find_points(5,10,1,5))  # Expected output: (1, 10)\nprint(find_points(3,5,7,9))   # Expected output: (3, 9)\nprint(find_points(1,5,2,8))   # Expected output: (1, 8)",
    "test_cases": [
      "assert find_Points(5,10,1,5) == (1,10)",
      "assert find_Points(3,5,7,9) == (3,9)",
      "assert find_Points(1,5,2,8) == (1,8)"
    ]
  },
  {
    "mbpp_id": 661,
    "problem_statement": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum_of_three_consecutive(arr, k):\n    n = len(arr)\n    dp = [[float('-inf')] * k for _ in range(n)]\n    \n    # Initialize the first two values of the array if needed.\n    dp[0][0] = arr[0]\n    dp[1][0] = max(dp[0][0], arr[1])\n    \n    for i in range(2, k+1):\n        dp[0][i-1] = arr[i-1] + dp[0][i-2]\n    \n    # Fill the rest of the DP table\n    for j in range(1, n):\n        for i in range(k):\n            if i > 0:\n                dp[j][i] = max(dp[j][i], arr[j+i] + dp[j-i-1][i-1])\n            else:\n                dp[j][i] = arr[j] + dp[j-1][i-1]\n                \n    return max(dp[-1])\n\n# Test cases\nprint(max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5))  # Output: 2101\nprint(max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5))  # Output: 5013\nprint(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8))   # Output: 27",
    "test_cases": [
      "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
      "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
      "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
    ]
  },
  {
    "mbpp_id": 662,
    "problem_statement": "Write a function to sort a list in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sorted_dict(d):\n    return dict(sorted(d.items(), key=lambda item: item[1]))",
    "test_cases": [
      "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
      "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
      "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
    ]
  },
  {
    "mbpp_id": 663,
    "problem_statement": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def find_max_val(n, x, y):\n    # Start from n and keep subtracting x until it's no longer divisible by x\n    while n % x == y:\n        n -= x\n    # The result will be n if it can't be reduced further, otherwise n-1\n    return n - x if n % x != y else n",
    "test_cases": [
      "assert find_max_val(15, 10, 5) == 15",
      "assert find_max_val(187, 10, 5) == 185",
      "assert find_max_val(16, 11, 1) == 12"
    ]
  },
  {
    "mbpp_id": 664,
    "problem_statement": "Write a python function to find the average of even numbers till a given even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def average_Even(n):\n    sum = 0\n    count = 0\n    \n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += i\n            count += 1\n            \n    if count > 0:\n        return sum / count\n    else:\n        return 0",
    "test_cases": [
      "assert average_Even(2) == 2",
      "assert average_Even(4) == 3",
      "assert average_Even(100) == 51"
    ]
  },
  {
    "mbpp_id": 665,
    "problem_statement": "Write a python function to shift first element to the end of given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_last(arr):\n    \"\"\"\n    Shifts the last element of the input array to the beginning.\n    \n    Parameters:\n    arr (list): The input list to be modified.\n    \n    Returns:\n    list: The modified list with the last element moved to the front.\n    \"\"\"\n    if not arr: \n        return []\n    else:\n        last_element = arr.pop()  \n        arr.insert(0, last_element)   \n        return arr\n\n# Test Cases\nprint(move_last([1,2,3,4]))  # Expected output: [2,3,4,1]\nprint(move_last([2,3,4,1,5,0]))  # Expected output: [3,4,1,5,0,2]\nprint(move_last([5,4,3,2,1]))  # Expected output: [4,3,2,1,5]",
    "test_cases": [
      "assert move_last([1,2,3,4]) == [2,3,4,1]",
      "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
      "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
    ]
  },
  {
    "mbpp_id": 666,
    "problem_statement": "Write a function to count occurrence of a character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_char(s, c):\n    # Initialize counter for occurrences of 'c' in string s\n    count = 0\n    \n    # Loop through each character in string s\n    for char in s:\n        if char == c:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_char(\"Python\",'o')==1",
      "assert count_char(\"little\",'t')==2",
      "assert count_char(\"assert\",'s')==2"
    ]
  },
  {
    "mbpp_id": 667,
    "problem_statement": "Write a python function to count number of vowels in the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Check_Vow(s, s2):\n    count = sum(1 for char in s if char.lower() in 'aeiou')\n    # Compare the counts and return True if they are equal, False otherwise\n    return count == len(list(filter(lambda x: x[0].lower() in 'aeiou', list(zip([x.lower() for x in s], [s2[x] for x in range(len(s))])))))\n\n# Test cases\nprint(Check_Vow('corner', 'AaEeIiOoUu'))  # Expected output: True\nprint(Check_Vow('valid', 'AaEeIiOoUu'))   # Expected output: True\nprint(Check_Vow('true', 'AaEeIiOoUu'))     # Expected output: True",
    "test_cases": [
      "assert Check_Vow('corner','AaEeIiOoUu') == 2",
      "assert Check_Vow('valid','AaEeIiOoUu') == 2",
      "assert Check_Vow('true','AaEeIiOoUu') ==2"
    ]
  },
  {
    "mbpp_id": 668,
    "problem_statement": "Write a python function to replace multiple occurence of character by single.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - replace() missing 1 required positional argument: 'new_char'",
      "Test 2: FAIL - replace() missing 1 required positional argument: 'new_char'",
      "Test 3: FAIL - replace() missing 1 required positional argument: 'new_char'"
    ],
    "generated_code": "def replace(s, old_char, new_char):\n    # Replace all occurrences of old_char with new_char in s\n    return s.replace(old_char, new_char)\n\n# Test cases\nprint(replace('peep', 'e', 'p'))  # Expected output: 'pep'\nprint(replace('Greek', 'e', 'k'))  # Expected output: 'Grek'\nprint(replace('Moon', 'o', 'm'))  # Expected output: 'Mon'",
    "test_cases": [
      "assert replace('peep','e') == 'pep'",
      "assert replace('Greek','e') == 'Grek'",
      "assert replace('Moon','o') == 'Mon'"
    ]
  },
  {
    "mbpp_id": 669,
    "problem_statement": "Write a function to check whether the given ip address is valid or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_IP(ip_address):\n    # Regex pattern for validating an IP address\n    pattern = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    \n    # Using regular expression to validate the input string against the pattern\n    if re.match(pattern, ip_address):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n\n# Test cases\nprint(check_IP(\"192.168.0.1\"))   # Expected output: Valid IP address\nprint(check_IP(\"110.234.52.124\"))  # Expected output: Valid IP address\nprint(check_IP(\"366.1.2.2\"))  # Expected output: Invalid IP address",
    "test_cases": [
      "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
      "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
      "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
    ]
  },
  {
    "mbpp_id": 670,
    "problem_statement": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decreasing_trend(nums):\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            continue\n        else:\n            return False\n    return True",
    "test_cases": [
      "assert decreasing_trend([-4,-3,-2,-1]) == True",
      "assert decreasing_trend([1,2,3]) == True",
      "assert decreasing_trend([3,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 671,
    "problem_statement": "Write a python function to set the right most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_Right_most_Unset_Bit(n):\n    # Find the position of the highest bit that is unset\n    pos = n.bit_length() - 1\n    \n    # Set the bit at the found position and mask out all higher bits\n    result = (n | (1 << pos)) & ~(1 << pos)\n    \n    return result\n\n# Test cases\nprint(set_Right_most_Unset_Bit(21))  # Expected output: 23\nprint(set_Right_most_Unset_Bit(11))  # Expected output: 15\nprint(set_Right_most_Unset_Bit(15))  # Expected output: 15",
    "test_cases": [
      "assert set_Right_most_Unset_Bit(21) == 23",
      "assert set_Right_most_Unset_Bit(11) == 15",
      "assert set_Right_most_Unset_Bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 672,
    "problem_statement": "Write a function to find maximum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_cases": [
      "assert max_of_three(10,20,30)==30",
      "assert max_of_three(55,47,39)==55",
      "assert max_of_three(10,49,30)==49"
    ]
  },
  {
    "mbpp_id": 673,
    "problem_statement": "Write a python function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(lst):\n    # Convert each element in the list to string and then join them together.\n    return int(''.join(map(str, lst)))",
    "test_cases": [
      "assert convert([1,2,3]) == 123",
      "assert convert([4,5,6]) == 456",
      "assert convert([7,8,9]) == 789"
    ]
  },
  {
    "mbpp_id": 674,
    "problem_statement": "Write a function to remove duplicate words from a given string using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import OrderedDict\n\ndef remove_duplicate(text):\n    # Split the input text into words and use OrderedDict to preserve order while removing duplicates\n    return ' '.join(OrderedDict.fromkeys(text.split()))\n\n# Example check function to verify the correctness of the solution with provided data points.\ndef check_solution():\n    assert remove_duplicate(\"Python Exercises Practice Solution Exercises\") == \"Python Exercises Practice Solution\"\n    assert remove_duplicate(\"Python Exercises Practice Solution Python\") == \"Python Exercises Practice Solution\"\n    assert remove_duplicate(\"Python Exercises Practice Solution Practice\") == \"Python Exercises Practice Solution\"\n\ncheck_solution()",
    "test_cases": [
      "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
    ]
  },
  {
    "mbpp_id": 675,
    "problem_statement": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_nums(a, b, c, d):\n    result = a + b\n    if result < c and result > d:\n        return 20\n    else:\n        return result",
    "test_cases": [
      "assert sum_nums(2,10,11,20)==20",
      "assert sum_nums(15,17,1,10)==32",
      "assert sum_nums(10,15,5,30)==20"
    ]
  },
  {
    "mbpp_id": 676,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_extra_char(s):\n    # Remove all non-alphanumeric characters\n    cleaned_string = re.sub('[\\W_]+', '', s)\n    return cleaned_string\n\n# Test cases\nprint(remove_extra_char('**//Google Android// - 12. '))  # Expected output: GoogleAndroid12\nprint(remove_extra_char('****//Google Flutter//*** - 36. '))  # Expected output: GoogleFlutter36\nprint(remove_extra_char('**//Google Firebase// - 478. '))  # Expected output: GoogleFirebase478",
    "test_cases": [
      "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
      "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
      "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
    ]
  },
  {
    "mbpp_id": 677,
    "problem_statement": "Write a function to check if the triangle is valid or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validity_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than or equal to the third side.\n    return a + b > c and a + c > b and b + c > a",
    "test_cases": [
      "assert validity_triangle(60,50,90)==False",
      "assert validity_triangle(45,75,60)==True",
      "assert validity_triangle(30,50,100)==True"
    ]
  },
  {
    "mbpp_id": 678,
    "problem_statement": "Write a python function to remove spaces from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_spaces(input_string):\n    # Use str.replace() method to replace all whitespace characters with an empty string\n    result = input_string.replace(\" \", \"\")\n    return result\n\n# Test cases\nprint(remove_spaces(\"a b c\"))  # Expected output: \"abc\"\nprint(remove_spaces(\"1 2 3\"))  # Expected output: \"123\"\nprint(remove_spaces(\" b c\"))   # Expected output: \"bc\"",
    "test_cases": [
      "assert remove_spaces(\"a b c\") == \"abc\"",
      "assert remove_spaces(\"1 2 3\") == \"123\"",
      "assert remove_spaces(\" b c\") == \"bc\""
    ]
  },
  {
    "mbpp_id": 679,
    "problem_statement": "Write a function to access dictionary key’s element by index.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_key(dict_obj, idx):\n    return list(dict_obj.keys())[idx]",
    "test_cases": [
      "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
      "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
      "assert access_key({'program':15,'computer':45},1)== 'computer'"
    ]
  },
  {
    "mbpp_id": 680,
    "problem_statement": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'increasing_trend' is not defined",
      "Test 2: FAIL - name 'increasing_trend' is not defined",
      "Test 3: FAIL - name 'increasing_trend' is not defined"
    ],
    "generated_code": "def is_increasing(tup):\n    # Check if each element in the tuple is less than the next one\n    for i in range(len(tup) - 1):\n        if tup[i] >= tup[i + 1]:\n            return False\n    return True\n\n# Test cases\nprint(is_increasing((1, 2, 3, 4)))  # Expected output: True\nprint(is_increasing((4, 3, 2, 1)))  # Expected output: False\nprint(is_increasing((0, 1, 4, 9)))  # Expected output: True",
    "test_cases": [
      "assert increasing_trend([1,2,3,4]) == True",
      "assert increasing_trend([4,3,2,1]) == False",
      "assert increasing_trend([0,1,4,9]) == True"
    ]
  },
  {
    "mbpp_id": 681,
    "problem_statement": "Write a python function to find the smallest prime divisor of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_Divisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n# Test cases\nprint(smallest_Divisor(10)) # Expected output: 2\nprint(smallest_Divisor(25)) # Expected output: 5\nprint(smallest_Divisor(31)) # Expected output: 31",
    "test_cases": [
      "assert smallest_Divisor(10) == 2",
      "assert smallest_Divisor(25) == 5",
      "assert smallest_Divisor(31) == 31"
    ]
  },
  {
    "mbpp_id": 682,
    "problem_statement": "Write a function to multiply two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def mul_list(list_a, list_b):\n    return list(map(lambda x, y: x * y, list_a, list_b))",
    "test_cases": [
      "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
      "assert mul_list([1,2],[3,4])==[3,8]",
      "assert mul_list([90,120],[50,70])==[4500,8400]"
    ]
  },
  {
    "mbpp_id": 683,
    "problem_statement": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Square(n):\n    for i in range(int((n**0.5)) + 1):\n        j = n - i*i\n        if j == i*i:\n            return True\n    return False",
    "test_cases": [
      "assert sum_Square(25) == True",
      "assert sum_Square(24) == False",
      "assert sum_Square(17) == True"
    ]
  },
  {
    "mbpp_id": 684,
    "problem_statement": "Write a python function to count occurences of a character in a repeated string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Char(s, ch):\n    \"\"\"\n    Count the occurrences of a specific character 'ch' in the string 's'.\n    \n    Parameters:\n    s (str): The string to search within.\n    ch (str): The character to count.\n    \n    Returns:\n    int: The number of times 'ch' occurs in 's'.\n    \"\"\"\n    count = sum(1 for char in s if char == ch)\n    return count",
    "test_cases": [
      "assert count_Char(\"abcac\",'a') == 4",
      "assert count_Char(\"abca\",'c') == 2",
      "assert count_Char(\"aba\",'a') == 7"
    ]
  },
  {
    "mbpp_id": 685,
    "problem_statement": "Write a python function to find sum of prime numbers between 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Primes' is not defined",
      "Test 2: FAIL - name 'sum_Of_Primes' is not defined",
      "Test 3: FAIL - name 'sum_Of_Primes' is not defined"
    ],
    "generated_code": "def sum_of_primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    total_sum = 0\n    for number in range(2, n + 1):\n        if is_prime(number):\n            total_sum += number\n    return total_sum",
    "test_cases": [
      "assert sum_Of_Primes(10) == 17",
      "assert sum_Of_Primes(20) == 77",
      "assert sum_Of_Primes(5) == 10"
    ]
  },
  {
    "mbpp_id": 686,
    "problem_statement": "Write a function to find the frequency of each element in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_element(lst):\n    from collections import Counter\n    result = dict(Counter(lst))\n    return str(result)",
    "test_cases": [
      "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
      "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
      "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
    ]
  },
  {
    "mbpp_id": 687,
    "problem_statement": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# Test cases\nprint(recur_gcd(12, 14)) # Expected output: 2\nprint(recur_gcd(13, 17)) # Expected output: 1\nprint(recur_gcd(9, 3))   # Expected output: 3",
    "test_cases": [
      "assert recur_gcd(12,14) == 2",
      "assert recur_gcd(13,17) == 1",
      "assert recur_gcd(9, 3) == 3"
    ]
  },
  {
    "mbpp_id": 688,
    "problem_statement": "Write a function to get the length of a complex number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef len_complex(a,b):\n    return math.sqrt(a**2 + b**2)",
    "test_cases": [
      "assert len_complex(3,4)==5.0",
      "assert len_complex(9,10)==13.45362404707371",
      "assert len_complex(7,9)==11.40175425099138"
    ]
  },
  {
    "mbpp_id": 689,
    "problem_statement": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_jumps(arr, n): \n    # Initialize variables to store the farthest reachable index and current jump count\n    j = 0  \n    l = 0  \n    c = 0\n  \n    while j < n - 1: \n        farthest = 0  \n      \n        # Find the next maximum jump distance\n        for i in range(j + 1, min(n, j + arr[j] + 1)): \n            if farthest < i: \n                farthest = i\n      \n        # Update the farthest reachable index\n        j = farthest \n      \n        # Increment the current jump count\n        c += 1\n  \n        # If no valid jump is possible, break out of the loop\n        if j == 0: \n            break\n    \n    return c",
    "test_cases": [
      "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
      "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
      "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
    ]
  },
  {
    "mbpp_id": 690,
    "problem_statement": "Write a function to multiply consecutive numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef mul_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(nums)):\n        if nums[i] == 0:\n            break\n        result.append(nums[i-1]*nums[i])\n    return result",
    "test_cases": [
      "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
      "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
      "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
    ]
  },
  {
    "mbpp_id": 691,
    "problem_statement": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_element(lst):\n    grouped_elements = {}\n    for item in lst:\n        key = item[1]\n        if key not in grouped_elements:\n            grouped_elements[key] = []\n        grouped_elements[key].append(item[0])\n    return grouped_elements",
    "test_cases": [
      "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
      "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
      "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
    ]
  },
  {
    "mbpp_id": 692,
    "problem_statement": "Write a python function to find the last two digits in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Two_Digits(n):\n    # Initialize variables\n    result = 1\n    temp = n\n    \n    # Calculate factorial until it becomes less than 10\n    while temp >= 10:\n        result *= temp % 10\n        temp //= 10\n    \n    return result",
    "test_cases": [
      "assert last_Two_Digits(7) == 40",
      "assert last_Two_Digits(5) == 20",
      "assert last_Two_Digits(2) == 2"
    ]
  },
  {
    "mbpp_id": 693,
    "problem_statement": "Write a function to remove multiple spaces in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_multiple_spaces(input_string):\n    # Use regex to replace one or more whitespace characters with a single space\n    cleaned_string = re.sub(r'\\s+', ' ', input_string).strip()\n    return cleaned_string",
    "test_cases": [
      "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
      "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
      "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
    ]
  },
  {
    "mbpp_id": 694,
    "problem_statement": "Write a function to extract unique values from the given dictionary values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_unique(dictionary):\n    result = set()\n    for key in dictionary:\n        if isinstance(dictionary[key], list):\n            result.update(set(dictionary[key]))\n    return sorted(list(result))\n\n# Test cases\nprint(extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} )) # Output: [1, 2, 5, 6, 7, 8, 10, 11, 12]\nprint(extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} )) # Output: [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nprint(extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35] })) # Output: [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
    "test_cases": [
      "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
      "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
      "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
    ]
  },
  {
    "mbpp_id": 695,
    "problem_statement": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] <= tup2[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_greater((10, 4, 5), (13, 5, 18)))  # Expected output: True\nprint(check_greater((1, 2, 3), (2, 1, 4)))     # Expected output: False\nprint(check_greater((4, 5, 6), (5, 6, 7)))     # Expected output: True",
    "test_cases": [
      "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
      "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
      "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
    ]
  },
  {
    "mbpp_id": 696,
    "problem_statement": "Write a function to zip two given lists of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zip_list(list1, list2):\n    # Use zip_longest from itertools to handle unequal length inputs\n    return [list(zip(a, b)) for a, b in zip(list1, list2)]\n\n# Test cases\nprint(zip_list([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]]))\nprint(zip_list([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]))\nprint(zip_list([['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]))",
    "test_cases": [
      "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
      "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
      "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
    ]
  },
  {
    "mbpp_id": 697,
    "problem_statement": "Write a function to find number of even elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_even(numbers):\n    return len(list(filter(lambda x: x % 2 == 0, numbers)))\n\n# Test cases\nprint(count_even([1, 2, 3, 5, 7, 8, 9, 10]))  # Output should be 3\nprint(count_even([10,15,14,13,-18,12,-20]))  # Output should be 5\nprint(count_even([1, 2, 4, 8, 9]))  # Output should be 3",
    "test_cases": [
      "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
      "assert count_even([10,15,14,13,-18,12,-20])==5",
      "assert count_even([1, 2, 4, 8, 9])==3"
    ]
  },
  {
    "mbpp_id": 698,
    "problem_statement": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_dict_item(d):\n    # Convert the dictionary into a list of tuples and sort it based on the product of the first element of each tuple.\n    sorted_items = sorted(d.items(), key=lambda item: item[0][0] * item[0][1])\n    \n    # Extract the sorted items back into a dictionary.\n    sorted_dict = {k: v for k, v in sorted_items}\n    \n    return sorted_dict",
    "test_cases": [
      "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
      "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
      "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
    ]
  },
  {
    "mbpp_id": 699,
    "problem_statement": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(bin_str1, bin_str2):\n    n = len(bin_str1)\n    swap_count = 0\n    \n    for i in range(n):\n        if bin_str1[i] != bin_str2[i]:\n            if i >= swap_count:\n                swap_count += 1\n            \n    # Check if all differences were made within swap_count steps\n    if swap_count == 0 and all(a != b for a, b in zip(bin_str1, bin_str2)):\n        return swap_count\n    else:\n        return \"Not Possible\"\n\n# Test cases\nprint(min_Swaps(\"1101\", \"1110\"))  # Expected output: 1\nprint(min_Swaps(\"1111\", \"0100\"))  # Expected output: Not Possible\nprint(min_Swaps(\"1110000\", \"0001101\"))  # Expected output: 3",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
      "assert min_Swaps(\"1110000\",\"0001101\") == 3"
    ]
  },
  {
    "mbpp_id": 700,
    "problem_statement": "Write a function to count the number of elements in a list which are within a specific range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_range_in_list(lst, lower_bound, upper_bound):\n    return sum(lower_bound <= x <= upper_bound for x in lst)",
    "test_cases": [
      "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
      "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
      "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
    ]
  },
  {
    "mbpp_id": 701,
    "problem_statement": "Write a function to find the equilibrium index of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        if left_sum == (total_sum - left_sum - arr[i]):\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_cases": [
      "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
      "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
      "assert equilibrium_index([1, 2, 3]) == -1"
    ]
  },
  {
    "mbpp_id": 702,
    "problem_statement": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef removals(nums: List[int], k: int, max_): \n    nums.sort() \n    i = j = sum(nums[0:max_]) + k // 2 * 2\n    while j < len(nums): \n        if sum(nums[i:j+1]) > k:\n            i += 1 \n        else:\n            j += 1 \n    return len(nums)-j+i-1",
    "test_cases": [
      "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
      "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
      "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
    ]
  },
  {
    "mbpp_id": 703,
    "problem_statement": "Write a function to check whether the given key is present in the dictionary or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_key_present(dictionary, key):\n    return key in dictionary.keys()",
    "test_cases": [
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
    ]
  },
  {
    "mbpp_id": 704,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += 1 / float(i)\n    return result",
    "test_cases": [
      "assert harmonic_sum(10)==2.9289682539682538",
      "assert harmonic_sum(4)==2.083333333333333",
      "assert harmonic_sum(7)==2.5928571428571425 "
    ]
  },
  {
    "mbpp_id": 705,
    "problem_statement": "Write a function to sort a list of lists by length and value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: '(' was never closed"
    ],
    "generated_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))\n\n# Test Cases\nprint(sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])) # [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nprint(sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])) # [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nprint(sort_sublists([[\"python\"], [\"java\", \"C\", \"C++\"], [\"DBMS\"], [\"SQL\", \"HTML\"]] == [['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']])",
    "test_cases": [
      "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
      "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
      "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
    ]
  },
  {
    "mbpp_id": 706,
    "problem_statement": "Write a function to find whether an array is subset of another array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset(array1, size1, array2, size2):\n    return set(array2).issubset(set(array1[:size1]))\n\n# Test cases\nprint(is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)) # Expected output: True\nprint(is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3))         # Expected output: True\nprint(is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3))        # Expected output: False",
    "test_cases": [
      "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
      "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
      "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
    ]
  },
  {
    "mbpp_id": 707,
    "problem_statement": "Write a python function to count the total set bits from 1 to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Count the total number of set bits in binary representation for all numbers from 1 to n.\n    \n    Parameters:\n    n (int): The upper limit till which we need to calculate the total set bits.\n    \n    Returns:\n    int: Total count of set bits from 1 to n.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        # Calculate the number of set bits using Brian Kernighan's Algorithm\n        while i != 0:\n            count += 1\n            i &= (i - 1)\n    return count",
    "test_cases": [
      "assert count_Set_Bits(16) == 33",
      "assert count_Set_Bits(2) == 2",
      "assert count_Set_Bits(14) == 28"
    ]
  },
  {
    "mbpp_id": 708,
    "problem_statement": "Write a python function to convert a string to a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Convert' is not defined",
      "Test 2: FAIL - name 'Convert' is not defined",
      "Test 3: FAIL - name 'Convert' is not defined"
    ],
    "generated_code": "def convert(s):\n    # Split the string at each space and convert it into a list of words.\n    return s.split()\n\n# Test cases\nprint(convert(\"python program\"))  # Expected output: ['python', 'program']\nprint(convert(\"Data Analysis\"))   # Expected output: ['Data', 'Analysis']\nprint(convert(\"Hadoop Training\")) # Expected output: ['Hadoop', 'Training']",
    "test_cases": [
      "assert Convert('python program') == ['python','program']",
      "assert Convert('Data Analysis') ==['Data','Analysis']",
      "assert Convert('Hadoop Training') == ['Hadoop','Training']"
    ]
  },
  {
    "mbpp_id": 709,
    "problem_statement": "Write a function to count unique keys for each value present in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_unique(tuples_list):\n    unique_count = {}\n    \n    # Loop through each element in the list of tuples\n    for tup in tuples_list:\n        # Check if the second element is already a key in the dictionary\n        if tup[1] not in unique_count.keys():\n            # If not, add it as a new key with a count of 1\n            unique_count[tup[1]] = 1\n        else:\n            # If it's already a key, increment its count by 1\n            unique_count[tup[1]] += 1\n    \n    # Convert the dictionary into a string format\n    result_str = \"{\" + \", \".join([str(key) + \": \" + str(count) for key, count in sorted(unique_count.items())]) + \"}\"\n    \n    return result_str",
    "test_cases": [
      "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
      "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
      "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
    ]
  },
  {
    "mbpp_id": 710,
    "problem_statement": "Write a function to access the initial and last data of the given tuple record.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def front_and_rear(tup_record):\n    # Extracting first element from the tuple\n    front_element = tup_record[0]\n    # Extracting last element from the tuple\n    rear_element = tup_record[-1]\n    return (front_element, rear_element)\n\n# Example usage:\nprint(front_and_rear((10, 4, 5, 6, 7)))  # Expected output: (10, 7)\nprint(front_and_rear((1, 2, 3, 4, 5)))   # Expected output: (1, 5)\nprint(front_and_rear((6, 7, 8, 9, 10)))  # Expected output: (6, 10)",
    "test_cases": [
      "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
      "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
      "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
    ]
  },
  {
    "mbpp_id": 711,
    "problem_statement": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def product_Equal(number):\n    # Initialize product as 1 for all numbers\n    prod_even = 1\n    prod_odd = 1\n    \n    # Multiply each digit found in even position\n    while number > 0:\n        digit = number % 10\n        if number // 10 == 0:\n            break\n        elif (number // 10) % 2 == 0:\n            prod_even *= digit\n        else:\n            prod_odd *= digit\n        number //= 10\n    \n    # Check if products are equal\n    return prod_even == prod_odd\n\n# Test cases\nprint(product_Equal(2841))  # Expected output: True\nprint(product_Equal(1234))  # Expected output: False\nprint(product_Equal(1212))  # Expected output: False",
    "test_cases": [
      "assert product_Equal(2841) == True",
      "assert product_Equal(1234) == False",
      "assert product_Equal(1212) == False"
    ]
  },
  {
    "mbpp_id": 712,
    "problem_statement": "Write a function to remove duplicates from a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_duplicate' is not defined",
      "Test 2: FAIL - name 'remove_duplicate' is not defined",
      "Test 3: FAIL - name 'remove_duplicate' is not defined"
    ],
    "generated_code": "def remove_duplicates(list_of_lists):\n    seen = set()\n    unique_list = []\n    for item in list_of_lists:\n        if item not in seen:\n            seen.add(item)\n            unique_list.append(item)\n    return unique_list",
    "test_cases": [
      "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
      "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
      "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
    ]
  },
  {
    "mbpp_id": 713,
    "problem_statement": "Write a function to check if the given tuple contains all valid values or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_valid' is not defined",
      "Test 2: FAIL - name 'check_valid' is not defined",
      "Test 3: FAIL - name 'check_valid' is not defined"
    ],
    "generated_code": "def is_tuple_consists_of_valid_values(tup):\n    # Check if there is at least one element in the tuple and it's true\n    return len(tup) > 0 and tup[0]\n\n# Test Cases\nprint(is_tuple_consists_of_valid_values((True, True, True, True)))  # Expected output: True\nprint(is_tuple_consists_of_valid_values((True, False, True, True)))  # Expected output: False\nprint(is_tuple_consists_of_valid_values((True, True, True, True)))  # Expected output: True",
    "test_cases": [
      "assert check_valid((True, True, True, True) ) == True",
      "assert check_valid((True, False, True, True) ) == False",
      "assert check_valid((True, True, True, True) ) == True"
    ]
  },
  {
    "mbpp_id": 714,
    "problem_statement": "Write a python function to count the number of distinct power of prime factor of given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Fac(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def prime_factors(num):\n        factors = []\n        while num > 1:\n            for i in range(2, num + 1):\n                if num % i == 0 and is_prime(i):\n                    factors.append(i)\n                    num //= i\n                    break\n        return factors\n    \n    fac_count = len(prime_factors(n))\n    return fac_count",
    "test_cases": [
      "assert count_Fac(24) == 3",
      "assert count_Fac(12) == 2",
      "assert count_Fac(4) == 1"
    ]
  },
  {
    "mbpp_id": 715,
    "problem_statement": "Write a function to convert the given string of integers into a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def str_to_tuple(s):\n    # Splitting the input string by comma and converting each part to an integer\n    result = tuple(map(int, s.split(\", \")))\n    return result",
    "test_cases": [
      "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
      "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
      "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
    ]
  },
  {
    "mbpp_id": 716,
    "problem_statement": "Write a function to find the perimeter of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert rombus_perimeter(10)==40",
      "assert rombus_perimeter(5)==20",
      "assert rombus_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 717,
    "problem_statement": "Write a function to calculate the standard deviation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\nfrom typing import List\n\ndef sd_calc(numbers: List[int]) -> float:\n    mean = sum(numbers) / len(numbers)\n    variance = sum((x - mean)**2 for x in numbers) / len(numbers)\n    return math.sqrt(variance)",
    "test_cases": [
      "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
      "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
      "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
    ]
  },
  {
    "mbpp_id": 718,
    "problem_statement": "Write a function to create a list taking alternate elements from another given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def alternate_elements(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]",
    "test_cases": [
      "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
      "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
      "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
    ]
  },
  {
    "mbpp_id": 719,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match(text):\n    if re.search('a(b*)', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"ac\")==('Found a match!')",
      "assert text_match(\"dc\")==('Not matched!')",
      "assert text_match(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 720,
    "problem_statement": "Write a function to add a dictionary to the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_dict_to_tuple(input_tuple, new_dict):\n    # Convert input_tuple into a list of its items and then convert back to tuple\n    result = list(input_tuple)\n    # Append the new dict as a new item in the list at the end\n    result.append(new_dict)\n    # Convert the modified list back to tuple\n    return tuple(result)\n\n# Test cases\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}))  # Expected output: (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nprint(add_dict_to_tuple((1, 2, 3), {\"UTS\": 2, \"is\": 3, \"Worst\": 4}))  # Expected output: (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nprint(add_dict_to_tuple((8, 9, 10), {\"POS\": 3, \"is\": 4, \"Okay\": 5}))  # Expected output: (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
    "test_cases": [
      "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
      "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
      "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
    ]
  },
  {
    "mbpp_id": 721,
    "problem_statement": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def maxAverageOfPath(matrix, rows):\n    if not matrix:\n        return None\n    \n    row_sum = []\n    total_row = sum([sum(row) for row in matrix])\n    \n    # Calculate the sum of elements from each row\n    for i in range(rows):\n        temp_sum = 0\n        for j in range(i * rows, (i + 1) * rows):\n            temp_sum += matrix[i][j]\n        \n        row_sum.append(temp_sum)\n    \n    max_avg = float('-inf')\n    start_index = 0\n    \n    # Iterate through the list to find the maximum average subarray\n    for end_index in range(1, len(row_sum)):\n        current_sum = row_sum[end_index] - row_sum[start_index]\n        avg = current_sum / ((end_index - start_index))\n        \n        if avg > max_avg:\n            max_avg = avg\n            start_index = end_index - 1\n            \n    return max_avg\n\n\n# Test Cases\nprint(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3))  # Output: 5.2\nprint(maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3))  # Output: 6.2\nprint(maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3))  # Output: 7.2",
    "test_cases": [
      "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
      "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
      "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
    ]
  },
  {
    "mbpp_id": 722,
    "problem_statement": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_data(student_heights, min_height, max_width):\n    filtered_students = {student: (height, width) for student, (height, width) in student_heights.items() if min_height <= height <= max_width}\n    return filtered_students",
    "test_cases": [
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
    ]
  },
  {
    "mbpp_id": 723,
    "problem_statement": "Write a function to count the same pair in two given lists using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: int(x == y), list1, list2))",
    "test_cases": [
      "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
      "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
      "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
    ]
  },
  {
    "mbpp_id": 724,
    "problem_statement": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))",
    "test_cases": [
      "assert power_base_sum(2,100)==115",
      "assert power_base_sum(8,10)==37",
      "assert power_base_sum(8,15)==62"
    ]
  },
  {
    "mbpp_id": 725,
    "problem_statement": "Write a function to extract values between quotation marks of the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Test Cases\nprint(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')) # Should return ['A53', 'multi', 'Processor']\nprint(extract_quotation('Cast your \"favorite\" entertainment \"apps\"')) # Should return ['favorite', 'apps']\nprint(extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')) # Should return ['4k Ultra HD', 'HDR 10']",
    "test_cases": [
      "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
      "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
      "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
    ]
  },
  {
    "mbpp_id": 726,
    "problem_statement": "Write a function to multiply the adjacent elements of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_elements(test_tuple):\n    # Multiply each element with its next adjacent element and store in new tuple\n    result = tuple([x * y for x, y in zip(test_tuple, test_tuple[1:])])\n    return result",
    "test_cases": [
      "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
      "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
      "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
    ]
  },
  {
    "mbpp_id": 727,
    "problem_statement": "Write a function to remove all characters except letters and numbers using regex",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_char(s):\n    # Use regular expression to replace non-letter/number characters with an empty string\n    result = re.sub('[\\W_]+', '', s)\n    return result\n\n# Test cases\nprint(remove_char(\"123abcjw:, .@! eiw\"))  # Expected output: \"123abcjweiw\"\nprint(remove_char(\"Hello1234:, ! Howare33u\"))  # Expected output: \"Hello1234Howare33u\"\nprint(remove_char(\"Cool543Triks@:, Make@987Trips\"))  # Expected output: \"Cool543TriksMake987Trips\"",
    "test_cases": [
      "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
      "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
      "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
    ]
  },
  {
    "mbpp_id": 728,
    "problem_statement": "Write a function to sum elements in two lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
      "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
      "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
    ]
  },
  {
    "mbpp_id": 729,
    "problem_statement": "Write a function to add two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from functools import reduce\n\ndef add_list(list1, list2):\n    # Use zip to pair elements from both lists and use map with a lambda to sum them\n    return list(map(lambda x, y: x + y, list1, list2))\n\n# Test cases\nprint(add_list([1, 2, 3], [4, 5, 6]))  # Expected output: [5, 7, 9]\nprint(add_list([1, 2], [3, 4]))        # Expected output: [4, 6]\nprint(add_list([10, 20], [50, 70]))    # Expected output: [60, 90]",
    "test_cases": [
      "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
      "assert add_list([1,2],[3,4])==[4,6]",
      "assert add_list([10,20],[50,70])==[60,90]"
    ]
  },
  {
    "mbpp_id": 730,
    "problem_statement": "Write a function to remove consecutive duplicates of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def consecutive_duplicates(nums):\n    result = []\n    i = 0\n    while i < len(nums):\n        count = 1\n        j = i + 1\n        while j < len(nums) and nums[j] == nums[i]:\n            count += 1\n            j += 1\n        result.append(nums[i])\n        i = j\n    return result",
    "test_cases": [
      "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
      "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
      "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
    ]
  },
  {
    "mbpp_id": 731,
    "problem_statement": "Write a function to find the lateral surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef lateralsurface_cone(radius, slant_height):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    slant_height (float): The slant height of the cone.\n    \n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    return math.pi * radius * slant_height\n\n# Check function with provided data points\nassert abs(lateralsurface_cone(5, 12) - 204.20352248333654) < 1e-9\nassert abs(lateralsurface_cone(10, 15) - 566.3586699569488) < 1e-9\nassert abs(lateralsurface_cone(19, 17) - 1521.8090132193388) < 1e-9\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert lateralsurface_cone(5,12)==204.20352248333654",
      "assert lateralsurface_cone(10,15)==566.3586699569488",
      "assert lateralsurface_cone(19,17)==1521.8090132193388"
    ]
  },
  {
    "mbpp_id": 732,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_specialchar(s):\n    return s.replace(',',':').replace('.',':').replace(' ',':')\n\n# Test cases\nprint(replace_specialchar('Python language, Programming language.')) # Expected output: 'Python:language::Programming:language:'\nprint(replace_specialchar('a b c,d e f')) # Expected output: 'a:b:c:d:e:f'\nprint(replace_specialchar('ram reshma,ram rahim')) # Expected output: 'ram:reshma:ram:rahim'",
    "test_cases": [
      "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
      "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
      "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
    ]
  },
  {
    "mbpp_id": 733,
    "problem_statement": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_occurrence(arr, x):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] >= x:\n            right = mid\n        else:\n            left = mid + 1\n    return left if arr[left] == x else -1",
    "test_cases": [
      "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
      "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
      "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
    ]
  },
  {
    "mbpp_id": 734,
    "problem_statement": "Write a python function to find sum of products of all possible subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Subarray_Prod' is not defined",
      "Test 2: FAIL - name 'sum_Of_Subarray_Prod' is not defined",
      "Test 3: FAIL - name 'sum_Of_Subarray_Prod' is not defined"
    ],
    "generated_code": "def sum_of_subarray_prod(arr, n):\n    result = [0] * len(arr)\n    product = 1\n    \n    for i in range(len(arr)):\n        # Calculate the cumulative product from start\n        if i > 0:\n            product *= arr[i-1]\n        \n        result[i] = product\n    \n    prod = 1\n    # Calculate the cumulative product from end\n    for j in reversed(range(len(arr))):\n        if j < len(arr)-1:\n            prod *= arr[j+1]\n        \n        result[j] += prod\n        \n    return result[-1]\n\n# Test cases\nprint(sum_of_subarray_prod([1,2,3],3))  # Expected output: 20\nprint(sum_of_subarray_prod([1,2],2))     # Expected output: 5\nprint(sum_of_subarray_prod([1,2,3,4],4)) # Expected output: 84",
    "test_cases": [
      "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
      "assert sum_Of_Subarray_Prod([1,2],2) == 5",
      "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
    ]
  },
  {
    "mbpp_id": 735,
    "problem_statement": "Write a python function to toggle bits of the number except the first and the last bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_middle_bits(n):\n    # XOR n with its inverted version to flip all middle bits\n    return n ^ ((~n + 1) & 0xAAAAAAAA)",
    "test_cases": [
      "assert toggle_middle_bits(9) == 15",
      "assert toggle_middle_bits(10) == 12",
      "assert toggle_middle_bits(11) == 13"
    ]
  },
  {
    "mbpp_id": 736,
    "problem_statement": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_insertion(arr, val):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return low",
    "test_cases": [
      "assert left_insertion([1,2,4,5],6)==4",
      "assert left_insertion([1,2,4,5],3)==2",
      "assert left_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 737,
    "problem_statement": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_str(input_str):\n    \"\"\"\n    Checks if the input string starts with a vowel.\n    \n    Parameters:\n        input_str (str): The string to be checked.\n        \n    Returns:\n        str: \"Valid\" if the string starts with a vowel, otherwise \"Invalid\".\n    \"\"\"\n    pattern = \"[aeiouAEIOU]\"\n    match = re.match(pattern, input_str)\n    return \"Valid\" if match else \"Invalid\"",
    "test_cases": [
      "assert check_str(\"annie\") == 'Valid'",
      "assert check_str(\"dawood\") == 'Invalid'",
      "assert check_str(\"Else\") == 'Valid'"
    ]
  },
  {
    "mbpp_id": 738,
    "problem_statement": "Write a function to calculate the geometric sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \n    Parameters:\n    n (int): The number of terms in the geometric series minus one.\n    \n    Returns:\n    float: The geometric sum of n-1.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1/((2**(n+1)) - 1)\n\n# Test cases\nassert abs(geometric_sum(7) - 1.9921875) < 0.000001\nassert abs(geometric_sum(4) - 1.9375) < 0.000001\nassert abs(geometric_sum(8) - 1.99609375) < 0.000001\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert geometric_sum(7) == 1.9921875",
      "assert geometric_sum(4) == 1.9375",
      "assert geometric_sum(8) == 1.99609375"
    ]
  },
  {
    "mbpp_id": 739,
    "problem_statement": "Write a python function to find the index of smallest triangular number with n digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef is_triangular_number(num):\n    \"\"\"\n    Check if a given number num is a triangular number.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if num is a triangular number, False otherwise.\n    \"\"\"\n    i = int(math.sqrt(2 * num + 0.25) - 0.5)\n    return i**2 / 2 == num\n\ndef find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with exactly n digits.\n    \n    Args:\n    n (int): The exact number of digits required in the triangular number.\n    \n    Returns:\n    int: The index of the smallest triangular number with exactly n digits.\n    \"\"\"\n    left, right = 1, 10**(n-1)*((10**n - 1)//9)\n    while left < right:\n        mid = (left + right) // 2\n        if is_triangular_number(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n\n# Test cases\nprint(find_Index(2))  # Expected output: 4\nprint(find_Index(3))  # Expected output: 14\nprint(find_Index(4))  # Expected output: 45",
    "test_cases": [
      "assert find_Index(2) == 4",
      "assert find_Index(3) == 14",
      "assert find_Index(4) == 45"
    ]
  },
  {
    "mbpp_id": 740,
    "problem_statement": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_dict(test_tuple):\n    result = {}\n    for i in range(0, len(test_tuple), 2):\n        if i + 1 < len(test_tuple):  # Ensure there is a second element to pair with the first.\n            result[test_tuple[i]] = test_tuple[i + 1]\n    return result\n\n# Test cases to verify the correctness of the solution\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}, \"Test case 1 failed\"\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}, \"Test case 2 failed\"\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
      "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
      "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
    ]
  },
  {
    "mbpp_id": 741,
    "problem_statement": "Write a python function to check whether all the characters are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Characters_Same(s):\n    # Convert the string into a list and sort it\n    sorted_list = sorted(list(s))\n    \n    # Check if each element in the sorted list is equal to the first element\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] != sorted_list[0]:\n            return False\n    \n    return True",
    "test_cases": [
      "assert all_Characters_Same(\"python\") == False",
      "assert all_Characters_Same(\"aaa\") == True",
      "assert all_Characters_Same(\"data\") == False"
    ]
  },
  {
    "mbpp_id": 742,
    "problem_statement": "Write a function to caluclate the area of a tetrahedron.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron.\n    \n    Parameters:\n    side_length (float): The length of each edge of the tetrahedron.\n    \n    Returns:\n    float: The total surface area of the tetrahedron.\n    \"\"\"\n    # Area calculation for one face of the tetrahedron\n    face_area = ((3 ** 0.5) / 4) * side_length ** 2\n    \n    # Since a tetrahedron has 4 equilateral triangle faces\n    return 4 * face_area\n\n# Test cases\nassert abs(area_tetrahedron(3) - 15.588457268119894) < 0.0000001\nassert abs(area_tetrahedron(20) - 692.8203230275509) < 0.0000001\nassert abs(area_tetrahedron(10) - 173.20508075688772) < 0.0000001",
    "test_cases": [
      "assert area_tetrahedron(3)==15.588457268119894",
      "assert area_tetrahedron(20)==692.8203230275509",
      "assert area_tetrahedron(10)==173.20508075688772"
    ]
  },
  {
    "mbpp_id": 743,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the right direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_right(lst, k, n):\n    \"\"\"\n    Rotate the elements of lst to the right by k positions.\n    \n    Parameters:\n    lst (list): The input list.\n    k (int): Number of positions to rotate.\n    n (int): Size of the list if it were circularly rotated.\n    \n    Returns:\n    list: The rotated list.\n    \"\"\"\n    return [lst[(n-k+i) % n] for i in range(n)]\n\n# Check function with provided data points\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 10))  # Expected output: [8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 10))  # Expected output: [9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 10))  # Expected output: [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
    "test_cases": [
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
    ]
  },
  {
    "mbpp_id": 744,
    "problem_statement": "Write a function to check if the given tuple has any none value or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False",
    "test_cases": [
      "assert check_none((10, 4, 5, 6, None)) == True",
      "assert check_none((7, 8, 9, 11, 14)) == False",
      "assert check_none((1, 2, 3, 4, None)) == True"
    ]
  },
  {
    "mbpp_id": 745,
    "problem_statement": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if all(int(digit) != 0 and int(num) % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n\n# Test cases\nprint(divisible_by_digits(1, 22)) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nprint(divisible_by_digits(1, 15)) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nprint(divisible_by_digits(20, 25)) # [22, 24]",
    "test_cases": [
      "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
      "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
      "assert divisible_by_digits(20,25)==[22, 24]"
    ]
  },
  {
    "mbpp_id": 746,
    "problem_statement": "Write a function to find area of a sector.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sector_area(radius, angle_in_degrees):\n    if angle_in_degrees == 360:\n        return None  # Return None for 360 degree full circle case\n    \n    area = (angle_in_degrees / 360) * math.pi * radius ** 2\n    return round(area, 5)",
    "test_cases": [
      "assert sector_area(4,45)==6.285714285714286",
      "assert sector_area(9,45)==31.82142857142857",
      "assert sector_area(9,360)==None"
    ]
  },
  {
    "mbpp_id": 747,
    "problem_statement": "Write a function to find the longest common subsequence for the given three string sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lcs_of_three(seq_a, seq_b, seq_c, len_a, len_b, len_c):\n    # Initialize matrix for dynamic programming\n    dp = [[[0 for _ in range(len_c+1)] for __ in range(len_b+1)] for ___ in range(len_a+1)]\n    \n    # Fill the matrix\n    for i in range(1, len_a + 1):\n        for j in range(1, len_b + 1):\n            for k in range(1, len_c + 1):\n                if seq_a[i-1] == seq_b[j-1] and seq_b[j-1] == seq_c[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n                \n    # The length of the LCS is stored in dp[len_a][len_b][len_c]\n    return dp[len_a][len_b][len_c]\n\n# Test cases\nprint(lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5))  # Expected output: 2\nprint(lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13))  # Expected output: 5\nprint(lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5))  # Expected output: 3",
    "test_cases": [
      "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
      "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
      "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
    ]
  },
  {
    "mbpp_id": 748,
    "problem_statement": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef capital_words_spaces(s):\n    # Using regular expression to find and replace word boundaries followed by uppercase letters with just whitespace.\n    return re.sub(r'\\b[A-Z][a-z]*', r' \\g<0>', s)\n\n# Test cases\nprint(capital_words_spaces(\"Python\"))   # Expected output: \"Python\"\nprint(capital_words_spaces(\"PythonProgrammingExamples\"))  # Expected output: \"Python Programming Examples\"\nprint(capital_words_spaces(\"GetReadyToBeCodingFreak\"))  # Expected output: \"Get Ready To Be Coding Freak\"",
    "test_cases": [
      "assert capital_words_spaces(\"Python\") == 'Python'",
      "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
      "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
    ]
  },
  {
    "mbpp_id": 749,
    "problem_statement": "Write a function to sort a given list of strings of numbers numerically.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_numeric_strings(arr):\n    return sorted(arr)\n\n# Test cases\nprint(sort_numeric_strings([ '4','12','45','7','0','100','200','-12','-500']))  # [-500, -12, 0, 4, 7, 12, 45, 100, 200]\nprint(sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2']))  # [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nprint(sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11']))  # [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
    "test_cases": [
      "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
      "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
      "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
    ]
  },
  {
    "mbpp_id": 750,
    "problem_statement": "Write a function to add the given tuple to the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_tuple(lst, tpl):\n    lst.extend(tpl)\n    return lst",
    "test_cases": [
      "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
      "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
      "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
    ]
  },
  {
    "mbpp_id": 751,
    "problem_statement": "Write a function to check if the given array represents min heap or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_min_heap(arr, index=0):\n    n = len(arr)\n    \n    def is_valid_child(node_index):\n        left_child_index = node_index * 2 + 1\n        right_child_index = node_index * 2 + 2\n        \n        if left_child_index < n and arr[left_child_index] < arr[node_index]:\n            return False\n        if right_child_index < n and arr[right_child_index] < arr[node_index]:\n            return False\n        return True\n    \n    for i in range(n // 2 - 1, -1, -1):\n        if not is_valid_child(i):\n            return False\n            \n    return True\n\n# Test cases\nprint(check_min_heap([1, 2, 3, 4, 5, 6]))  # True\nprint(check_min_heap([2, 3, 4, 5, 10, 15]))  # True\nprint(check_min_heap([2, 10, 4, 5, 3, 15]))  # False",
    "test_cases": [
      "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
      "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
      "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
    ]
  },
  {
    "mbpp_id": 752,
    "problem_statement": "Write a function to find the nth jacobsthal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_cases": [
      "assert jacobsthal_num(5) == 11",
      "assert jacobsthal_num(2) == 1",
      "assert jacobsthal_num(4) == 5"
    ]
  },
  {
    "mbpp_id": 753,
    "problem_statement": "Write a function to find minimum k records from tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\nimport heapq\n\ndef min_k(lst: List[Tuple[str, int]], k: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Finds and returns the 'k' smallest tuples from the given list based on their second element.\n    \n    :param lst: A list of tuples where each tuple contains two elements - a string and an integer.\n    :param k: An integer representing how many smallest tuples to find.\n    :return: A list containing the 'k' smallest tuples based on their second element.\n    \"\"\"\n    # Using heapify to convert a list into a min-heap in-place.\n    heapq.heapify(lst)\n    result = []\n    for _ in range(k):\n        # Repeatedly pops the smallest item from the heap and appends it to the result.\n        result.append(heapq.heappop(lst))\n    return result",
    "test_cases": [
      "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
      "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
      "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
    ]
  },
  {
    "mbpp_id": 754,
    "problem_statement": "Write a function to find common index elements from three lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_index_list(list1, list2, list3):\n    return [index for index in range(len(list1)) if list1[index] == list2[index] and list2[index] == list3[index]]\n\n# Test cases\nprint(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])) # [1, 7]\nprint(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])) # [1, 6]\nprint(extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])) # [1, 5]",
    "test_cases": [
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
      "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
    ]
  },
  {
    "mbpp_id": 755,
    "problem_statement": "Write a function to find the second smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def second_smallest(nums):\n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(nums))\n    \n    # Check if there is at least two elements in the list\n    if len(unique_sorted) < 2:\n        return None\n    \n    # Return the second element which is the second smallest\n    return unique_sorted[1]",
    "test_cases": [
      "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
      "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
      "assert second_smallest([2,2])==None"
    ]
  },
  {
    "mbpp_id": 756,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or one 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_zero_one(text):\n    # Check if the text starts with \"a\" and is followed by zero or one \"b\"\n    pattern = r'ab?'  # 'a' followed by zero or one 'b'\n    result = re.match(pattern, text)\n    \n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_zero_one(\"ac\")==('Found a match!')",
      "assert text_match_zero_one(\"dc\")==('Not matched!')",
      "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 757,
    "problem_statement": "Write a function to count the pairs of reverse strings in the given string list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_reverse_pairs(string_list):\n    # Initialize the count of reverse pairs\n    pair_count = 0\n    \n    # Iterate through each unique combination of two strings in the list\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            # Check if both strings and their reverse form an exact match\n            if string_list[i] == string_list[j][::-1] and string_list[j] == string_list[i][::-1]:\n                pair_count += 1\n                \n    return str(pair_count)",
    "test_cases": [
      "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
      "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
      "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
    ]
  },
  {
    "mbpp_id": 758,
    "problem_statement": "Write a function to count number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_sublists(lst):\n    result = {}\n    for sublist in lst:\n        sorted_sublist = tuple(sorted(sublist))\n        if sorted_sublist not in result:\n            result[sorted_sublist] = 1\n        else:\n            result[sorted_sublist] += 1\n    return result",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
    ]
  },
  {
    "mbpp_id": 759,
    "problem_statement": "Write a function to check a decimal with a precision of 2.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(s):\n    \"\"\"\n    This function checks if the input string 's' represents a valid decimal number.\n    It considers numbers with up to two digits after the decimal point and ignores scientific notation.\n    \n    Args:\n    s (str): The string to be checked.\n    \n    Returns:\n    bool: True if 's' is a valid decimal number as per the specified criteria, False otherwise.\n    \"\"\"\n    # Regular expression to match the valid decimal format with at most two digits after the decimal\n    pattern = r'^\\d+(\\.\\d{0,2})?$'\n    return bool(re.match(pattern, s))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('e666.86'))  # Expected output: False\nprint(is_decimal('3.124587'))  # Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11')==True",
      "assert is_decimal('e666.86')==False",
      "assert is_decimal('3.124587')==False"
    ]
  },
  {
    "mbpp_id": 760,
    "problem_statement": "Write a python function to check whether an array contains only one distinct element or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_Element(arr, n):\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            return 'NO'\n        else:\n            count[arr[i]] = 1\n    return 'YES'",
    "test_cases": [
      "assert unique_Element([1,1,1],3) == 'YES'",
      "assert unique_Element([1,2,1,2],4) == 'NO'",
      "assert unique_Element([1,2,3,4,5],5) == 'NO'"
    ]
  },
  {
    "mbpp_id": 761,
    "problem_statement": "Write a function to caluclate arc length of an angle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef arc_length(angle_in_degrees, radius):\n    if angle_in_degrees <= 0:\n        return None\n    else:\n        # Calculate arc length using formula L = (θ / 360) * 2πr\n        arc_len = (angle_in_degrees / 360) * 2 * math.pi * radius\n        return round(arc_len, 6)",
    "test_cases": [
      "assert arc_length(9,45)==3.5357142857142856",
      "assert arc_length(9,480)==None",
      "assert arc_length(5,270)==11.785714285714285"
    ]
  },
  {
    "mbpp_id": 762,
    "problem_statement": "Write a function to check whether the given month number contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 2: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 3: FAIL - name 'check_monthnumber_number' is not defined"
    ],
    "generated_code": "def check_monthnumber(month_number):\n    # Check if the month has 30 days\n    return month_number in [4, 6, 9, 11]",
    "test_cases": [
      "assert check_monthnumber_number(6)==True",
      "assert check_monthnumber_number(2)==False",
      "assert check_monthnumber_number(12)==False"
    ]
  },
  {
    "mbpp_id": 763,
    "problem_statement": "Write a python function to find the minimum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def find_Min_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_cases": [
      "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
      "assert find_Min_Diff((4,3,2,6),4) == 1",
      "assert find_Min_Diff((30,5,20,9),4) == 4"
    ]
  },
  {
    "mbpp_id": 764,
    "problem_statement": "Write a python function to count numeric values in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef number_ctr(s):\n    # Use regular expression to find all occurrences of digits in the string\n    numbers = re.findall(r'\\d', s)\n    # Return the count of found numbers\n    return len(numbers)\n\n# Test cases\nprint(number_ctr('program2bedone'))   # Expected output: 1\nprint(number_ctr('3wonders'))         # Expected output: 1\nprint(number_ctr('123'))              # Expected output: 3",
    "test_cases": [
      "assert number_ctr('program2bedone') == 1",
      "assert number_ctr('3wonders') ==1",
      "assert number_ctr('123') == 3"
    ]
  },
  {
    "mbpp_id": 765,
    "problem_statement": "Write a function to find nth polite number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_polite(nth_number):\n    # Initialize count and current polite number\n    count = 0\n    i = 1\n    \n    while True:\n        # Check if the number of factors equals its value\n        if len(get_factors(i)) == i:\n            count += 1\n            \n            # If we reach the desired nth polite number\n            if count == nth_number:\n                return i\n        \n        # Move to the next number\n        i += 1\n\n# Helper function to get all unique factors of a number\ndef get_factors(num):\n    factors = set()\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    \n    return list(factors)\n\n# Test cases to verify the correctness of the solution\nprint(is_polite(7))  # Expected output: 11\nprint(is_polite(4))  # Expected output: 7\nprint(is_polite(9))  # Expected output: 13",
    "test_cases": [
      "assert is_polite(7) == 11",
      "assert is_polite(4) == 7",
      "assert is_polite(9) == 13"
    ]
  },
  {
    "mbpp_id": 766,
    "problem_statement": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n\n# Test cases\nprint(pair_wise([1,1,2,3,3,4,4,5])) # [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nprint(pair_wise([1,5,7,9,10]))      # [(1, 5), (5, 7), (7, 9), (9, 10)]\nprint(pair_wise([1,2,3,4,5,6,7,8,9,10])) # [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
    "test_cases": [
      "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
      "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
      "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
    ]
  },
  {
    "mbpp_id": 767,
    "problem_statement": "Write a python function to count the number of pairs whose sum is equal to ‘sum’.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Pairs_Count(arr, n, k):\n    # Counting occurrences of each element in array\n    counter = {}\n    for num in arr:\n        if num not in counter:\n            counter[num] = 0\n        counter[num] += 1\n    \n    pair_count = 0\n    seen = set()\n    \n    for num in counter.keys():\n        complement = k - num\n        if complement in counter and complement != num:\n            # Ensure we don't double-count with the same pair (e.g., (1, 3) and (3, 1))\n            if num <= complement:\n                pair_count += min(counter[num], counter[complement])\n            else:\n                pair_count += counter[complement]\n    \n    return pair_count",
    "test_cases": [
      "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
      "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
      "assert get_Pairs_Count([1,-2,3],3,1) == 1"
    ]
  },
  {
    "mbpp_id": 768,
    "problem_statement": "Write a python function to check for odd parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Odd_Parity(number):\n    # Initialize parity flag as False\n    parity = False\n    \n    # Iterate through each digit in the number\n    while number > 0:\n        # Check if the last bit is 1 and set the parity flag accordingly\n        if number % 2 == 1:\n            parity = not parity\n        \n        # Remove the last bit from the number\n        number //= 10\n    \n    # Return whether the initial parity flag was set to True\n    return parity",
    "test_cases": [
      "assert check_Odd_Parity(13) == True",
      "assert check_Odd_Parity(21) == True",
      "assert check_Odd_Parity(18) == False"
    ]
  },
  {
    "mbpp_id": 769,
    "problem_statement": "Write a python function to get the difference between two lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Diff' is not defined",
      "Test 2: FAIL - name 'Diff' is not defined",
      "Test 3: FAIL - name 'Diff' is not defined"
    ],
    "generated_code": "def diff_two_lists(list1, list2):\n    # Convert both lists to sets to remove duplicates and perform set difference operation.\n    result = list(set(list1) - set(list2))\n    return result",
    "test_cases": [
      "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
      "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
      "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
    ]
  },
  {
    "mbpp_id": 770,
    "problem_statement": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(n):\n        total += (2*i + 1)**4\n    return total",
    "test_cases": [
      "assert odd_Num_Sum(2) == 82",
      "assert odd_Num_Sum(3) == 707",
      "assert odd_Num_Sum(4) == 3108"
    ]
  },
  {
    "mbpp_id": 771,
    "problem_statement": "Write a function to check if the given expression is balanced or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_expression(exp):\n    \"\"\"\n    This function checks if the given string 'exp' has balanced parentheses,\n    brackets, and braces.\n    \n    Parameters:\n    exp (str): The input string containing various types of brackets.\n    \n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack\n\n# Test cases\nprint(check_expression(\"{()}[{}]\"))  # Expected output: True\nprint(check_expression(\"{()}[{}][{]}\"))  # Expected output: False\nprint(check_expression(\"{()}[{}][]({})\"))  # Expected output: True",
    "test_cases": [
      "assert check_expression(\"{()}[{}]\") == True",
      "assert check_expression(\"{()}[{]\") == False",
      "assert check_expression(\"{()}[{}][]({})\") == True"
    ]
  },
  {
    "mbpp_id": 772,
    "problem_statement": "Write a function to remove all the words with k length in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef remove_length(s, k):\n    # Use regular expression to find and replace words with length equal to k with an empty string\n    return re.sub(r'\\b\\w{' + str(k) + r',}\\b', '', s)",
    "test_cases": [
      "assert remove_length('The person is most value tet', 3) == 'person is most value'",
      "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
      "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
    ]
  },
  {
    "mbpp_id": 773,
    "problem_statement": "Write a function to find the occurrence and position of the substrings within a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def occurance_substring(main_str, sub_str):\n    index = -1\n    while True:\n        try:\n            index = main_str.index(sub_str, index + 1)\n            print(f\"Found '{sub_str}' at index {index}\")\n        except ValueError:\n            break\n    return f\"'{sub_str}', {index}\"",
    "test_cases": [
      "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
      "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
      "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
    ]
  },
  {
    "mbpp_id": 774,
    "problem_statement": "Write a function to check if the string is a valid email address or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nimport re\n\ndef check_email(email):\n    # Regular expression for validating an Email\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    # Compile the ReGex\n    pattern = re.compile(regex)\n    # If the string is empty\n    if email == None:\n        return \"Invalid Email\"\n    # Matching the regex to the email\n    if(re.search(pattern,email)):\n        return \"Valid Email\"\n    else:\n        return \"Invalid Email\"\n\n# Test the function\nprint(check_email(\"ankitrai326@gmail.com\"))\nprint(check_email(\"my.ownsite@ourearth.org\"))\nprint(check_email(\"ankitaoie326.com\"))",
    "test_cases": [
      "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
      "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
      "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
    ]
  },
  {
    "mbpp_id": 775,
    "problem_statement": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'odd_position' is not defined",
      "Test 2: FAIL - name 'odd_position' is not defined",
      "Test 3: FAIL - name 'odd_position' is not defined"
    ],
    "generated_code": "def is_odd_indexed_numbers_occupied(numbers):\n    \"\"\"\n    Check if every odd index in the list 'numbers' has an odd number of elements.\n    \n    Parameters:\n    numbers (list): The list containing integers.\n    \n    Returns:\n    bool: True if every odd index has an odd number of elements, otherwise False.\n    \"\"\"\n    # Iterate over indices with step of 2 (to get odd indices)\n    for i in range(0, len(numbers), 2):\n        if numbers[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases to verify the correctness of the solution\nprint(is_odd_indexed_numbers_occupied([2,1,4,3,6,7,6,3]))  # Expected output: True\nprint(is_odd_indexed_numbers_occupied([4,1,2]))  # Expected output: True\nprint(is_odd_indexed_numbers_occupied([1,2,3]))  # Expected output: False",
    "test_cases": [
      "assert odd_position([2,1,4,3,6,7,6,3]) == True",
      "assert odd_position([4,1,2]) == True",
      "assert odd_position([1,2,3]) == False"
    ]
  },
  {
    "mbpp_id": 776,
    "problem_statement": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_vowels(s):\n    vowels = \"aeiou\"\n    vowel_count = 0\n    \n    for i in range(len(s) - 1):\n        if s[i] in vowels and s[i + 1] in vowels:\n            vowel_count += 1\n            \n    return vowel_count",
    "test_cases": [
      "assert count_vowels('bestinstareels') == 7",
      "assert count_vowels('partofthejourneyistheend') == 12",
      "assert count_vowels('amazonprime') == 5"
    ]
  },
  {
    "mbpp_id": 777,
    "problem_statement": "Write a python function to find the sum of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, n): \n    # Initialize result as 0\n    res = 0\n  \n    # Traverse through all bits\n    for i in range(32):  \n        curr_bit_sum = 0\n        mask = 1 << i\n        \n        # Check if ith bit is set in every number\n        for j in range(n): \n            if arr[j] & mask: \n                curr_bit_sum += arr[j]\n        \n        # If ith bit is set, add its complement to result else subtract from it\n        if i % 2 == 0: \n            res -= curr_bit_sum \n        else: \n            res += curr_bit_sum \n  \n    return res",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
      "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
      "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
    ]
  },
  {
    "mbpp_id": 778,
    "problem_statement": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i + 1]:\n            i += 1\n            count += 1\n        if count > 1:\n            result.append(list(range(i - count + 1, i + 1)))\n        else:\n            result.append([lst[i]])\n        i += 1\n    return result",
    "test_cases": [
      "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
      "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
      "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
    ]
  },
  {
    "mbpp_id": 779,
    "problem_statement": "Write a function to count the number of unique lists within a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_sublists(lst):\n    return {(tuple(sublist) if isinstance(sublist, list) else sublist): lst.count(sublist) for sublist in lst}\n\n# Test cases\nprint(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\nprint(unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]))\nprint(unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]]))",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
    ]
  },
  {
    "mbpp_id": 780,
    "problem_statement": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_combinations(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            current_sum = tuples_list[i][0] + tuples_list[j][0]\n            second_tuple = (current_sum,) + tuples_list[j][1:]\n            if all(t[0] == second_tuple[0] and t[1] == second_tuple[1] for t in tuples_list[:i]):\n                continue\n            else:\n                new_tuple = (tuples_list[i][0],) + tuples_list[i][1:] + second_tuple\n                result.append(new_tuple)\n    return result",
    "test_cases": [
      "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
      "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
      "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
    ]
  },
  {
    "mbpp_id": 781,
    "problem_statement": "Write a python function to check whether the count of divisors is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Divisors(n):\n    \"\"\"\n    Returns 'Even' if the number of divisors of n is even, otherwise returns 'Odd'.\n    \n    :param n: Integer number.\n    :return: A string indicating whether the number of divisors is even or odd.\n    \"\"\"\n    from math import sqrt\n    \n    def count_divisors(x):\n        count = 0\n        for i in range(1, int(sqrt(x)) + 1):\n            if x % i == 0:\n                if i * i == x:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    \n    divisor_count = count_divisors(n)\n    if divisor_count % 2 == 0:\n        result = 'Even'\n    else:\n        result = 'Odd'\n    \n    return result",
    "test_cases": [
      "assert count_Divisors(10) == \"Even\"",
      "assert count_Divisors(100) == \"Odd\"",
      "assert count_Divisors(125) == \"Even\""
    ]
  },
  {
    "mbpp_id": 782,
    "problem_statement": "Write a python function to find the sum of all odd length subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Odd_Length_Sum(nums):\n    total_sum = 0\n    n = len(nums)\n    \n    # Iterate through each possible starting point for odd-length subarrays\n    for i in range(n):\n        # Calculate the ending index for the current start point\n        end_index = min(i + n // 2, n - 1)\n        \n        # Sum up the values of elements within the current subarray and add it to total_sum\n        for j in range(i, end_index + 1):\n            total_sum += nums[j]\n    \n    return total_sum",
    "test_cases": [
      "assert Odd_Length_Sum([1,2,4]) == 14",
      "assert Odd_Length_Sum([1,2,1,2]) == 15",
      "assert Odd_Length_Sum([1,7]) == 8"
    ]
  },
  {
    "mbpp_id": 783,
    "problem_statement": "Write a function to convert rgb color to hsv color.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rgb_to_hsv(r, g, b):\n    # Normalize values from 0-255 to 0.0-1.0\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Convert RGB to HSV components\n    v = max(r, g, b)\n    if v == r:\n        h = (g - b) / (v - min(g, b)) if g != b else 0.0\n    elif v == g:\n        h = 2 + (b - r) / (v - min(b, r))\n    else:\n        h = 4 + (r - g) / (v - min(r, g))\n    \n    c = v * abs((r - g) / (v - min(r, g)) if v - min(r, g) != 0 else 1)\n    \n    s = c / v if v > 0 else 0\n    return (h, s, c)\n\n# Test cases\nprint(rgb_to_hsv(255, 255, 255))  # Expected output: (0, 0.0, 1.0)\nprint(rgb_to_hsv(0, 215, 0))     # Expected output: (120.0, 1.0, 0.7071067811865475)\nprint(rgb_to_hsv(10, 215, 110)) # Expected output: (149.26829268292684, 0.9534883720930233, 0.7071067811865476)",
    "test_cases": [
      "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
      "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
      "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
    ]
  },
  {
    "mbpp_id": 784,
    "problem_statement": "Write a function to find the product of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def mul_even_odd(lst):\n    return lst[0] * lst[-1]\n\n# Test cases\nprint(mul_even_odd([1,3,5,7,4,1,6,8])) # Expected output: 4\nprint(mul_even_odd([1,2,3,4,5,6,7,8,9,10])) # Expected output: 2\nprint(mul_even_odd([1,5,7,9,10])) # Expected output: 10",
    "test_cases": [
      "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert mul_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 785,
    "problem_statement": "Write a function to convert tuple string to integer tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_str_int(tuple_str):\n    # Convert tuple string to integer tuple using map and int functions\n    return tuple(map(int, tuple_str[1:-1].split(',')))\n\n# Test cases\nprint(tuple_str_int(\"(7, 8, 9)\"))  # Output: (7, 8, 9)\nprint(tuple_str_int(\"(1, 2, 3)\"))  # Output: (1, 2, 3)\nprint(tuple_str_int(\"(4, 5, 6)\"))  # Output: (4, 5, 6)",
    "test_cases": [
      "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
      "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
      "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
    ]
  },
  {
    "mbpp_id": 786,
    "problem_statement": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def right_insertion(sorted_list, target_value):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if sorted_list[mid] == target_value:\n            return mid\n        elif sorted_list[mid] < target_value:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    # If not found, `high` will be one less than the index where it should go.\n    return high + 1",
    "test_cases": [
      "assert right_insertion([1,2,4,5],6)==4",
      "assert right_insertion([1,2,4,5],3)==2",
      "assert right_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 787,
    "problem_statement": "Write a function that matches a string that has an a followed by three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_three(\"ac\")==('Not matched!')",
      "assert text_match_three(\"dc\")==('Not matched!')",
      "assert text_match_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 788,
    "problem_statement": "Write a function to create a new tuple from the given string and list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def new_tuple(strings, element):\n    # Create an empty tuple\n    result = ()\n    # Iterate through each character in strings, adding them to the tuple separated by spaces\n    for s in strings:\n        result += (s,)\n    # Add the last element to the tuple\n    result += (element,)\n    return result",
    "test_cases": [
      "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
      "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
      "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
    ]
  },
  {
    "mbpp_id": 789,
    "problem_statement": "Write a function to calculate the perimeter of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_polygon(sides, length):\n    return sides * length",
    "test_cases": [
      "assert perimeter_polygon(4,20)==80",
      "assert perimeter_polygon(10,15)==150",
      "assert perimeter_polygon(9,7)==63"
    ]
  },
  {
    "mbpp_id": 790,
    "problem_statement": "Write a python function to check whether every even index contains even numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'even_position' is not defined",
      "Test 2: FAIL - name 'even_position' is not defined",
      "Test 3: FAIL - name 'even_position' is not defined"
    ],
    "generated_code": "def is_even_indexed_elements_even(nums):\n    \"\"\"\n    Check if every element at an even index in the given list 'nums' has an even number.\n    \n    :param nums: List[int] - A list of integers.\n    :return: bool - Returns True if all elements at even indices have even numbers, otherwise False.\n    \"\"\"\n    for i in range(0, len(nums), 2):  # Iterate through the list with step 2 to get even indices\n        if nums[i] % 2 != 0:  # Check if current element is odd\n            return False\n    return True\n\n# Test Cases\nprint(is_even_indexed_elements_even([3, 2, 1]))  # Expected output: False\nprint(is_even_indexed_elements_even([1, 2, 3]))  # Expected output: False\nprint(is_even_indexed_elements_even([2, 1, 4]))  # Expected output: True",
    "test_cases": [
      "assert even_position([3,2,1]) == False",
      "assert even_position([1,2,3]) == False",
      "assert even_position([2,1,4]) == True"
    ]
  },
  {
    "mbpp_id": 791,
    "problem_statement": "Write a function to remove the nested record from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_nested(test_tuple):\n    # Remove the nested tuple at index -1 of the input tuple and return the modified tuple.\n    return test_tuple[:-1]",
    "test_cases": [
      "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
      "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
      "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
    ]
  },
  {
    "mbpp_id": 792,
    "problem_statement": "Write a python function to count the number of lists in a given number of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_list(lists):\n    # Initialize counter\n    list_count = 0\n    \n    # Iterate through each sublist in the input list\n    for sublist in lists:\n        if isinstance(sublist, list):  # Check if it's still a list\n            list_count += 1  # Increment counter for nested lists\n            \n    return list_count",
    "test_cases": [
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
      "assert count_list([[1,2],[2,3],[4,5]]) == 3",
      "assert count_list([[1,0],[2,0]]) == 2"
    ]
  },
  {
    "mbpp_id": 793,
    "problem_statement": "Write a python function to find the last position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last(arr, target, n):\n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target and (mid == n - 1 or arr[mid + 1] != target):\n            return mid\n        \n        elif arr[mid] < target:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1",
    "test_cases": [
      "assert last([1,2,3],1,3) == 0",
      "assert last([1,1,1,2,3,4],1,6) == 2",
      "assert last([2,3,2,3,6,8,9],3,8) == 3"
    ]
  },
  {
    "mbpp_id": 794,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_starta_endb(text):\n    # Define the regex pattern to match 'a' followed by any character(s) and end with 'b'\n    pattern = r'^a.*b$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the solution\nprint(text_starta_endb(\"aabbbb\"))  # Expected output: Found a match!\nprint(text_starta_endb(\"aabAbbbc\"))  # Expected output: Not matched!\nprint(text_starta_endb(\"accddbbjjj\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
      "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
      "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 795,
    "problem_statement": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'heapq' is not defined. Did you mean: 'heap'?"
    ],
    "generated_code": "from heapq import heappush, heappop\nfrom typing import List\n\ndef cheap_items(data: List[dict], k: int) -> List[dict]:\n    # Initialize a min heap with negative prices for max priority\n    heap = [(-item['price'], item['name']) for item in data]\n    heappush(heap, (0, \"No Item\"))\n    \n    result = []\n    while heap:\n        _, name = heappop(heap)\n        if name != \"No Item\":\n            result.append({\"name\": name, \"price\": -heapq.heappop(heap)[1]})\n        \n        if len(result) < k and heap:\n            new_item_price, _ = heappop(heap)\n            heappush(heap, (new_item_price, \"No Item\"))\n    \n    return result[:-k] if result else []\n\n# Test Cases\nassert cheap_items([{\"name\": \"Item-1\", \"price\": 101.1},{\"name\": \"Item-2\", \"price\": 555.22}], 1) == [{\"name\": \"Item-1\", \"price\": 101.1}]\nassert cheap_items([{\"name\": \"Item-1\", \"price\": 101.1},{\"name\": \"Item-2\", \"price\": 555.22}], 2) == [{\"name\": \"Item-1\", \"price\": 101.1}, {\"name\": \"Item-2\", \"price\": 555.22}]\nassert cheap_items([{\"name\": \"Item-1\", \"price\": 101.1},{\"name\": \"Item-2\", \"price\": 555.22},{\"name\": \"Item-3\", \"price\": 45.09},{\"name\": \"Item-4\", \"price\": 22.75}], 1) == [{\"name\": \"Item-4\", \"price\": 22.75}]",
    "test_cases": [
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
    ]
  },
  {
    "mbpp_id": 796,
    "problem_statement": "Write function to find the sum of all items in the given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def return_sum(input_dict):\n    total = 0\n    for value in input_dict.values():\n        total += value\n    return total",
    "test_cases": [
      "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
      "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
      "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
    ]
  },
  {
    "mbpp_id": 797,
    "problem_statement": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_in_Range(l, r):\n    # Calculate the number of odd numbers in the range [l, r]\n    num_odds = ((r - l + 1) // 2)\n    \n    # Calculate the sum of the first n odd numbers\n    total_sum = num_odds * (2 * l - 2 * (num_odds - 1))\n    \n    return total_sum",
    "test_cases": [
      "assert sum_in_Range(2,5) == 8",
      "assert sum_in_Range(5,7) == 12",
      "assert sum_in_Range(7,13) == 40"
    ]
  },
  {
    "mbpp_id": 798,
    "problem_statement": "Write a python function to find the sum of an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total",
    "test_cases": [
      "assert _sum([1, 2, 3]) == 6",
      "assert _sum([15, 12, 13, 10]) == 50",
      "assert _sum([0, 1, 2]) == 3"
    ]
  },
  {
    "mbpp_id": 799,
    "problem_statement": "Write a python function to left rotate the bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def left_Rotate(num, d):\n    # Convert num to binary string representation\n    bin_num = bin(num)[2:]\n    \n    # Calculate effective rotation amount\n    n = len(bin_num)\n    effective_rotation = d % n\n    \n    # Perform left rotation on binary string and convert back to integer\n    rotated_bin = bin_num[effective_rotation:] + bin_num[:effective_rotation]\n    \n    # Convert back to decimal integer for the result\n    result = int(rotated_bin, 2)\n    \n    return result\n\n# Test cases\nprint(left_Rotate(16,2))   # Expected output: 64\nprint(left_Rotate(10,2))   # Expected output: 40\nprint(left_Rotate(99,3))   # Expected output: 792",
    "test_cases": [
      "assert left_Rotate(16,2) == 64",
      "assert left_Rotate(10,2) == 40",
      "assert left_Rotate(99,3) == 792"
    ]
  },
  {
    "mbpp_id": 800,
    "problem_statement": "Write a function to remove all whitespaces from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_all_spaces(s):\n    return ''.join(filter(lambda x: x != ' ', s))",
    "test_cases": [
      "assert remove_all_spaces('python  program')==('pythonprogram')",
      "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
      "assert remove_all_spaces('python                     program')==('pythonprogram')"
    ]
  },
  {
    "mbpp_id": 801,
    "problem_statement": "Write a python function to count the number of equal numbers from three given integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def test_three_equal(a, b, c):\n    # Count how many numbers in the list are not equal to each other\n    return sum(x != y and y != z for x, y, z in [(a, b, c), (b, c, a), (c, a, b)]) if len(set([a, b, c])) == 1 else 0",
    "test_cases": [
      "assert test_three_equal(1,1,1) == 3",
      "assert test_three_equal(-1,-2,-3) == 0",
      "assert test_three_equal(1,2,2) == 2"
    ]
  },
  {
    "mbpp_id": 802,
    "problem_statement": "Write a python function to count the number of rotations required to generate a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Rotation(arr, n):\n    count = 0\n    while arr[count] > arr[(count + n) % len(arr)]:\n        count += 1\n    return count",
    "test_cases": [
      "assert count_Rotation([3,2,1],3) == 1",
      "assert count_Rotation([4,5,1,2,3],5) == 2",
      "assert count_Rotation([7,8,9,1,2,3],6) == 3"
    ]
  },
  {
    "mbpp_id": 803,
    "problem_statement": "Write a python function to check whether the given number is a perfect square or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_Perfect_Square(n):\n    \"\"\"\n    This function checks if the given integer n is a perfect square.\n    \n    Args:\n        n (int): The integer to check.\n        \n    Returns:\n        bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n",
    "test_cases": [
      "assert is_Perfect_Square(10) == False",
      "assert is_Perfect_Square(36) == True",
      "assert is_Perfect_Square(14) == False"
    ]
  },
  {
    "mbpp_id": 804,
    "problem_statement": "Write a python function to check whether the product of numbers is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Product_Even(nums, n):\n    product = 1\n    for num in nums:\n        product *= num\n    return product % 2 == 0",
    "test_cases": [
      "assert is_Product_Even([1,2,3],3) == True",
      "assert is_Product_Even([1,2,1,4],4) == True",
      "assert is_Product_Even([1,1],2) == False"
    ]
  },
  {
    "mbpp_id": 805,
    "problem_statement": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_list(lists):\n    return max(lists, key=sum)",
    "test_cases": [
      "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
      "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
      "assert max_sum_list([[2,3,1]])==[2,3,1] "
    ]
  },
  {
    "mbpp_id": 806,
    "problem_statement": "Write a function to find maximum run of uppercase characters in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_run_uppercase(s):\n    max_count = 0\n    current_count = 0\n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count",
    "test_cases": [
      "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
      "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
      "assert max_run_uppercase('GooGLEFluTTER') == 4"
    ]
  },
  {
    "mbpp_id": 807,
    "problem_statement": "Write a python function to find the first odd number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_odd(numbers):\n    # Iterate through each number in the list\n    for num in numbers:\n        # Check if the current number is odd\n        if num % 2 != 0:\n            # Return the first odd number found\n            return num\n    # If no odd number was found, return None\n    return None",
    "test_cases": [
      "assert first_odd([1,3,5]) == 1",
      "assert first_odd([2,4,1,3]) == 1",
      "assert first_odd ([8,9,1]) == 9"
    ]
  },
  {
    "mbpp_id": 808,
    "problem_statement": "Write a function to check if the given tuples contain the k or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_K(tuples_list, number_to_find):\n    # Convert each tuple in the list into an individual element and search for 'number_to_find'\n    return any(element == number_to_find for element in tuples_list)\n\n# Test Cases\nprint(check_K([tuple(x) for x in [(10, 4, 5, 6, 8), (1, 2, 3, 4, 5, 6), (7, 8, 9, 44, 11, 12)]], 6))  # Expected output: True\nprint(check_K([tuple(x) for x in [(10, 4, 5, 6, 8), (1, 2, 3, 4, 5, 6), (7, 8, 9, 44, 11, 12)]], 7))  # Expected output: True\nprint(check_K([tuple(x) for x in [(10, 4, 5, 6, 8), (1, 2, 3, 4, 5, 6), (7, 8, 9, 44, 11, 12)]], 12))  # Expected output: True",
    "test_cases": [
      "assert check_K((10, 4, 5, 6, 8), 6) == True",
      "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
      "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
    ]
  },
  {
    "mbpp_id": 809,
    "problem_statement": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_smaller(tup1, tup2):\n    # Check if all elements in tup2 are less than their corresponding elements in tup1\n    for i in range(len(tup1)):\n        if tup1[i] <= tup2[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_smaller((1, 2, 3), (2, 3, 4)))  # Expected output: False\nprint(check_smaller((4, 5, 6), (3, 4, 5)))  # Expected output: True\nprint(check_smaller((11, 12, 13), (10, 11, 12)))  # Expected output: True",
    "test_cases": [
      "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
      "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
      "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
    ]
  },
  {
    "mbpp_id": 810,
    "problem_statement": "Write a function to iterate over elements repeating each as many times as its count.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - deque index out of range",
      "Test 2: FAIL - deque index out of range",
      "Test 3: FAIL - deque index out of range"
    ],
    "generated_code": "def count_variable(x, y, z, w):\n    from collections import deque\n    \n    # Initialize queue with all unique values in order of increasing their value\n    q = deque(sorted(set([x, y, z, w])))\n    \n    # Create result list initialized to None and set size to len(q)\n    res = [None] * len(q)\n    \n    # Fill the result list with elements repeated according to their count\n    while x + y + z + w:\n        for i in range(len(res)):\n            if not q[i]:\n                continue\n            \n            res[q.index(q[i])] = q[i]\n            \n            # Decrease count and update index accordingly\n            q[i] -= 1\n            if q[i] == 0:\n                del q[i]\n        \n        x += y - z\n        y -= z\n        z = 0\n    \n    return res[:len(res) // 2]",
    "test_cases": [
      "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
      "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
      "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
    ]
  },
  {
    "mbpp_id": 811,
    "problem_statement": "Write a function to check if two lists of tuples are identical or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_identical(list1, list2):\n    # Convert each tuple in both lists to a set and then back to a tuple\n    converted_list1 = tuple(set(tuple(x) for x in list1))\n    converted_list2 = tuple(set(tuple(x) for x in list2))\n\n    # Compare the converted lists\n    return converted_list1 == converted_list2",
    "test_cases": [
      "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
      "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
      "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
    ]
  },
  {
    "mbpp_id": 812,
    "problem_statement": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef road_rd(text):\n    return re.sub(r\"(\\w+) (\\w+)\", r'\\g<1> \\g<2>.', text)\n\n# Test cases\nprint(road_rd(\"ravipadu Road\"))  # Expected output: \"ravipadu Rd.\"\nprint(road_rd(\"palnadu Road\"))   # Expected output: \"palnadu Rd.\"\nprint(road_rd(\"eshwar enclave Road\"))  # Expected output: \"eshwar enclave Rd.\"",
    "test_cases": [
      "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
      "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
      "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
    ]
  },
  {
    "mbpp_id": 813,
    "problem_statement": "Write a function to find length of the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_length(s):\n    return len(s)",
    "test_cases": [
      "assert string_length('python')==6",
      "assert string_length('program')==7",
      "assert string_length('language')==8"
    ]
  },
  {
    "mbpp_id": 814,
    "problem_statement": "Write a function to find the area of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_area(a, b):\n    return 0.5 * a * b",
    "test_cases": [
      "assert rombus_area(10,20)==100",
      "assert rombus_area(10,5)==25",
      "assert rombus_area(4,2)==4"
    ]
  },
  {
    "mbpp_id": 815,
    "problem_statement": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def sort_by_dnf(arr):\n    i = j = k = 0\n    \n    while j < len(arr):\n        if arr[j] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[j] == 1:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        else:\n            arr[k], arr[j] = arr[j], arr[k]\n            k += 1\n            j += 1\n            \n    return arr[:k]\n\n# Test cases\nprint(sort_by_dnf([1,2,0,1,0,1,2,1,1]))  # Expected output: [0, 0, 1, 1, 1, 1, 1, 2, 2]\nprint(sort_by_dnf([1,0,0,1,2,1,2,2,1,0]))  # Expected output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nprint(sort_by_dnf([2,2,1,0,0,0,1,1,2,1]))  # Expected output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
    "test_cases": [
      "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
      "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
      "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
    ]
  },
  {
    "mbpp_id": 816,
    "problem_statement": "Write a function to clear the values of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def clear_tuple(tup):\n    # Use tuple comprehension to remove all elements from the tuple\n    cleared_tup = tuple()\n    return cleared_tup",
    "test_cases": [
      "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
      "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
      "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
    ]
  },
  {
    "mbpp_id": 817,
    "problem_statement": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, nums))",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
    ]
  },
  {
    "mbpp_id": 818,
    "problem_statement": "Write a python function to count lower case letters in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lower_ctr(s):\n    # Initialize counter for lowercase characters\n    lower_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if 'a' <= char <= 'z':\n            lower_count += 1\n            \n    return lower_count",
    "test_cases": [
      "assert lower_ctr('abc') == 3",
      "assert lower_ctr('string') == 6",
      "assert lower_ctr('Python') == 5"
    ]
  },
  {
    "mbpp_id": 819,
    "problem_statement": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_duplic(numbers):\n    counter = {}\n    duplicates_list = []\n    \n    for num in numbers:\n        if num not in counter:\n            counter[num] = 1\n        else:\n            counter[num] += 1\n            \n    sorted_counter = sorted(counter.items())\n    duplicates_count = len(sorted_counter)\n    \n    result_list = [duplicates_count]\n    i = 0\n    \n    while i < duplicates_count:\n        j = i + 1\n        current_val = sorted_counter[i][0]\n        \n        while j < duplicates_count and sorted_counter[j][0] == current_val:\n            duplicates_list.append(sorted_counter[i][1])\n            j += 1\n        \n        i = j\n    \n    return (result_list, duplicates_list)\n\n# Test cases\nprint(count_duplic([1,2,2,2,4,4,4,5,5,5,5])) # Should print ([1, 2, 4, 5], [1, 3, 3, 4])\nprint(count_duplic([2,2,3,1,2,6,7,9])) # Should print ([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nprint(count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])) # Should print ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
    "test_cases": [
      "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
      "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
      "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ]
  },
  {
    "mbpp_id": 820,
    "problem_statement": "Write a function to check whether the given month number contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum_number(month_num):\n    # Define a list of months with 28 days\n    special_months = [4, 6, 9, 11]\n    \n    # Check if the month number is in the list of special months\n    return month_num in special_months",
    "test_cases": [
      "assert check_monthnum_number(2)==True",
      "assert check_monthnum_number(1)==False",
      "assert check_monthnum_number(3)==False"
    ]
  },
  {
    "mbpp_id": 821,
    "problem_statement": "Write a function to merge two dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries(dict1, dict2):\n    # Merge both dictionaries and return as a new dictionary\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2:\n            merged_dict[key] = [dict1[key], dict2[key]]\n        else:\n            merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n\n    # Convert list of lists to a set with unique elements\n    keys_with_lists = [k for k, v in merged_dict.items() if isinstance(v, list)]\n    for key in keys_with_lists:\n        merged_dict[key].sort()\n\n    return merged_dict\n\n\n# Test cases\nprint(merge_dictionaries({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}))  # {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nprint(merge_dictionaries({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))  # {'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nprint(merge_dictionaries({\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))  # {'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
    "test_cases": [
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
      "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
    ]
  },
  {
    "mbpp_id": 822,
    "problem_statement": "Write a function to return true if the password is valid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'pass_validity' is not defined",
      "Test 2: FAIL - name 'pass_validity' is not defined",
      "Test 3: FAIL - name 'pass_validity' is not defined"
    ],
    "generated_code": "import re\n\ndef validate_password(password):\n    \"\"\"\n    Validates a given password based on specific criteria.\n    \n    Criteria:\n    - Contains at least one digit\n    - Contains at least one uppercase letter\n    - Length should be greater than 7\n    \n    Args:\n    password (str): The password to validate.\n    \n    Returns:\n    bool: True if the password is valid, False otherwise.\n    \"\"\"\n    has_digit = re.search(r'\\d', password) is not None\n    has_uppercase = re.search(r'[A-Z]', password) is not None\n    min_length = len(password) > 7\n    \n    return has_digit and has_uppercase and min_length\n\n# Test cases\nprint(validate_password(\"password\"))  # Expected output: False\nprint(validate_password(\"Password@10\"))  # Expected output: True\nprint(validate_password(\"password@10\"))  # Expected output: False",
    "test_cases": [
      "assert pass_validity(\"password\")==False",
      "assert pass_validity(\"Password@10\")==True",
      "assert pass_validity(\"password@10\")==False"
    ]
  },
  {
    "mbpp_id": 823,
    "problem_statement": "Write a function to check if the given string starts with a substring using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_substring(input_string, substring):\n    # Check if the input_string starts with the substring\n    if re.search(substring, input_string): \n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'\n\n# Test cases\nprint(check_substring(\"dreams for dreams makes life fun\", \"makes\"))  \nprint(check_substring(\"Hi there how are you Hi alex\", \"Hi\"))\nprint(check_substring(\"Its been a long day\", \"been\"))",
    "test_cases": [
      "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
      "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
      "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
    ]
  },
  {
    "mbpp_id": 824,
    "problem_statement": "Write a python function to remove even numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_even(numbers):\n    # Use a list comprehension to filter out even numbers\n    result = [num for num in numbers if num % 2 != 0]\n    return result\n\ndef check_function():\n    assert remove_even([1, 3, 5, 2]) == [1, 3, 5], \"Test case 1 failed\"\n    assert remove_even([5, 6, 7]) == [5, 7], \"Test case 2 failed\"\n    assert remove_even([1, 2, 3, 4]) == [1, 3], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert remove_even([1,3,5,2]) == [1,3,5]",
      "assert remove_even([5,6,7]) == [5,7]",
      "assert remove_even([1,2,3,4]) == [1,3]"
    ]
  },
  {
    "mbpp_id": 825,
    "problem_statement": "Write a python function to access multiple elements of specified index from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_elements(lst, indexes):\n    # Extracting and returning the elements at the specified indices in the original list\n    return [lst[i] for i in indexes]\n\n# Test cases\nprint(access_elements([2,3,8,4,7,9], [0,3,5]))  # Expected output: [2, 4, 9]\nprint(access_elements([1, 2, 3, 4, 5], [1,2]))  # Expected output: [2, 3]\nprint(access_elements([1,0,2,3], [0,1]))        # Expected output: [1, 0]",
    "test_cases": [
      "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
      "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
      "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
    ]
  },
  {
    "mbpp_id": 826,
    "problem_statement": "Write a python function to find the type of triangle from the given sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Type_Of_Triangle(a, b, c):\n    if a == 0 or b == 0 or c == 0:\n        return \"Invalid Input\"\n\n    # Check for Pythagorean triplet\n    if ((a**2 + b**2)**0.5 > c and (b**2 + c**2)**0.5 > a and (c**2 + a**2)**0.5 > b):\n        return \"Right-angled Triangle\"\n\n    # Check for Acute angled triangle\n    if ((a**2 + b**2 - c**2) > 0 and (a**2 + c**2 - b**2) > 0 and (b**2 + c**2 - a**2) > 0):\n        return \"Acute-angled Triangle\"\n\n    # Check for Obtuse angled triangle\n    if (((a**2 + b**2 - c**2) < 0 and (a**2 + c**2 - b**2) < 0 and (b**2 + c**2 - a**2) < 0)):\n        return \"Obtuse-angled Triangle\"\n\n# Test cases\nprint(check_Type_Of_Triangle(1,2,3))  # Expected output: \"Obtuse-angled Triangle\"\nprint(check_Type_Of_Triangle(2,2,2))  # Expected output: \"Acute-angled Triangle\"\nprint(check_Type_Of_Triangle(1,0,1))  # Expected output: \"Right-angled Triangle\"",
    "test_cases": [
      "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
      "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
      "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
    ]
  },
  {
    "mbpp_id": 827,
    "problem_statement": "Write a function to sum a specific column of a list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_column(lst, col_idx):\n    return sum(row[col_idx] for row in lst)",
    "test_cases": [
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
    ]
  },
  {
    "mbpp_id": 828,
    "problem_statement": "Write a function to count alphabets,digits and special charactes in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_alpha_dig_spl(s):\n    alpha = dig = spl = 0\n    for c in s:\n        if 'a' <= c.lower() <= 'z':\n            alpha += 1\n        elif '0' <= c <= '9':\n            dig += 1\n        else:\n            spl += 1\n    return alpha, dig, spl",
    "test_cases": [
      "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
      "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
      "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
    ]
  },
  {
    "mbpp_id": 829,
    "problem_statement": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: 3 is not in list"
    ],
    "generated_code": "from collections import Counter\n\ndef second_frequent(strings):\n    # Count occurrences of each string and sort them based on their frequency\n    freq = sorted(Counter(strings).values(), reverse=True)\n    \n    # Find the second highest frequency\n    if len(freq) < 2:\n        return None\n    \n    # Return the corresponding strings from the list of original strings\n    return [strings[i] for i in range(len(strings)) if freq.count(Counter(strings)[strings[i]]) == freq.index(max(freq), 1)]\n\n# Example usage\nprint(second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']))  # Output: 'bbb'\nprint(second_frequent(['abc','bcd','abc','bcd','bcd','bcd']))  # Output: 'abc'\nprint(second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']))  # Output: 'gsm'",
    "test_cases": [
      "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
      "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
      "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
    ]
  },
  {
    "mbpp_id": 830,
    "problem_statement": "Write a function to round up a number to specific digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_up(number, ndigits):\n    return round(number + 0.999 * 10**-ndigits, ndigits)",
    "test_cases": [
      "assert round_up(123.01247,0)==124",
      "assert round_up(123.01247,1)==123.1",
      "assert round_up(123.01247,2)==123.02"
    ]
  },
  {
    "mbpp_id": 831,
    "problem_statement": "Write a python function to count equal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count",
    "test_cases": [
      "assert count_Pairs([1,1,1,1],4) == 6",
      "assert count_Pairs([1,5,1],3) == 1",
      "assert count_Pairs([3,2,1,7,8,9],6) == 0"
    ]
  },
  {
    "mbpp_id": 832,
    "problem_statement": "Write a function to extract the maximum numeric value from a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_max(s):\n    max_num = -1 * float(\"inf\")\n    matches = re.findall(r'\\d+', s)\n    for match in matches:\n        num = int(match)\n        if num > max_num:\n            max_num = num\n    return max_num\n\n# Test cases\nprint(extract_max('100klh564abc365bg'))  # Output: 564\nprint(extract_max('hello300how546mer231'))  # Output: 546\nprint(extract_max('its233beenalong343journey234'))  # Output: 343",
    "test_cases": [
      "assert extract_max('100klh564abc365bg') == 564",
      "assert extract_max('hello300how546mer231') == 546",
      "assert extract_max('its233beenalong343journey234') == 343"
    ]
  },
  {
    "mbpp_id": 833,
    "problem_statement": "Write a function to get dictionary keys as a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_key(dict_obj):\n    # Convert the keys of the dictionary into a list and return it\n    return list(dict_obj.keys())",
    "test_cases": [
      "assert get_key({1:'python',2:'java'})==[1,2]",
      "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
      "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
    ]
  },
  {
    "mbpp_id": 834,
    "problem_statement": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "import numpy as np\n\ndef generate_matrix(n):\n    \"\"\"\n    Generates a nxn matrix filled with numbers starting from 1 and spiraling outwards.\n    \n    Args:\n    n (int): The size of the square matrix.\n    \n    Returns:\n    list: A square matrix filled with numbers from 1 to n^2 arranged in a spiral pattern.\n    \"\"\"\n    result = [[0 for _ in range(n)] for _ in range(n)]\n    num = 1\n    while num <= n**2:\n        # Fill top row\n        for i in range(num, num + n - 1):\n            result[num-1][i] = num\n            num += 1\n        # Fill right column\n        for j in range(num+1, num+n):\n            result[j][num-1] = num\n            num += 1\n        # Fill bottom row if applicable\n        if num < n + 1:\n            for k in range(num, num+n-2, -1):\n                result[-k][-1-num] = num\n                num += 1\n        # Fill left column if applicable\n        if num < n + 1:\n            for m in range(-1-num,-1,num-1):\n                result[-1-m][-1] = num\n                num += 1\n    return result\n\n# Test cases\nprint(generate_matrix(3))\nprint(generate_matrix(2))\nprint(generate_matrix(7))",
    "test_cases": [
      "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
      "assert generate_matrix(2)==[[1,2],[4,3]]",
      "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
    ]
  },
  {
    "mbpp_id": 835,
    "problem_statement": "Write a python function to find the slope of a line.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def slope(x1, y1, x2, y2):\n    \"\"\"\n    Calculate the slope of a line given two points (x1, y1) and (x2, y2).\n\n    Args:\n    x1 (float): The x-coordinate of the first point.\n    y1 (float): The y-coordinate of the first point.\n    x2 (float): The x-coordinate of the second point.\n    y2 (float): The y-coordinate of the second point.\n\n    Returns:\n    float: The slope of the line.\n    \"\"\"\n\n    # Calculate the difference in coordinates\n    delta_x = x2 - x1\n    delta_y = y2 - y1\n    \n    # Avoid division by zero if points are collinear\n    if delta_x == 0:\n        return \"undefined\" if delta_y != 0 else 0\n    \n    # Calculate the slope\n    return delta_y / delta_x",
    "test_cases": [
      "assert slope(4,2,2,5) == -1.5",
      "assert slope(2,4,4,6) == 1",
      "assert slope(1,2,4,2) == 0"
    ]
  },
  {
    "mbpp_id": 836,
    "problem_statement": "Write a function to find length of the subarray having maximum sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def max_sub_array_sum(arr):\n    current_max = global_max = arr[0]\n    for num in arr[1:]:\n        current_max = max(num, current_max + num)\n        if current_max > global_max:\n            global_max = current_max\n    return global_max",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
      "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
      "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
    ]
  },
  {
    "mbpp_id": 837,
    "problem_statement": "Write a python function to find the cube sum of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    total = 0\n    for i in range(1, 2*n + 1, 2): \n        total += i ** 3\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 28",
      "assert cube_Sum(3) == 153",
      "assert cube_Sum(4) == 496"
    ]
  },
  {
    "mbpp_id": 838,
    "problem_statement": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    return count",
    "test_cases": [
      "assert min_Swaps(\"0011\",\"1111\") == 1",
      "assert min_Swaps(\"00011\",\"01001\") == 2",
      "assert min_Swaps(\"111\",\"111\") == 0"
    ]
  },
  {
    "mbpp_id": 839,
    "problem_statement": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the string elements in the first position of each tuple\n    sorted_tuples = sorted(tuples_list)\n    return sorted_tuples\n\n# Test cases\nprint(sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]))\n# Expected output: [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n\nprint(sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]))\n# Expected output: [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n\nprint(sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]))\n# Expected output: [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
    "test_cases": [
      "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
      "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
      "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
    ]
  },
  {
    "mbpp_id": 840,
    "problem_statement": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant == 0:\n        # If the discriminant is zero, there is one root\n        # Check if both coefficients are equal and have opposite signs\n        if a == b and a < 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    elif discriminant > 0:\n        # If the discriminant is positive, there are two distinct real roots\n        return \"No\"\n    \n    else:\n        # If the discriminant is negative, there are no real roots\n        return \"No\"\n\n# Test Cases\nprint(Check_Solution(2, 0, -1))  # Expected output: Yes\nprint(Check_Solution(1, -5, 6))  # Expected output: No\nprint(Check_Solution(2, 0, 2))   # Expected output: Yes",
    "test_cases": [
      "assert Check_Solution(2,0,-1) == \"Yes\"",
      "assert Check_Solution(1,-5,6) == \"No\"",
      "assert Check_Solution(2,0,2) == \"Yes\""
    ]
  },
  {
    "mbpp_id": 841,
    "problem_statement": "Write a function to count the number of inversions in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_inv_count(arr, n): \n    inversion_count = 0\n  \n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inversion_count += 1\n  \n    return inversion_count",
    "test_cases": [
      "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
      "assert get_inv_count([8, 4, 2, 1], 4) == 6",
      "assert get_inv_count([3, 1, 2], 3) == 2"
    ]
  },
  {
    "mbpp_id": 842,
    "problem_statement": "Write a function to find the number which occurs for odd number of times in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_odd_occurence(arr, n):\n    # Initialize result as -1 and set sum to 0\n    res = -1\n    sum_ = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Calculate the cumulative sum of the current element and previous elements\n        if sum_ == 0:\n            sum_ += arr[i]\n            res = arr[i]\n        else:\n            sum_ -= arr[i]\n    \n    # Check if the difference between the calculated sum and previous total is divisible by n\n    if (sum_ + arr[n-1]) % n == 0:\n        res = arr[n-1]\n    \n    return res\n\n# Test Cases\nprint(get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13))  # Expected output: 5\nprint(get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7))  # Expected output: 3\nprint(get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7))  # Expected output: 5",
    "test_cases": [
      "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
      "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
      "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
    ]
  },
  {
    "mbpp_id": 843,
    "problem_statement": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'tuple' and 'int'"
    ],
    "generated_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    \"\"\"\n    Finds the nth super ugly number from a given prime list.\n    \n    :param n: The target position for the super ugly number.\n    :param primes: A list of prime numbers used to generate the super ugly sequence.\n    :return: The nth super ugly number.\n    \"\"\"\n    # Initialize an array to store ugly numbers and heap with first prime\n    ugly_nums = [1]\n    min_heap = [(primes[0], 0)]\n    \n    # Iterate until we reach the desired nth super ugly number\n    while len(ugly_nums) < n:\n        # Get the smallest ugly number from the heap\n        current_ugly = heapq.heappop(min_heap)\n        \n        # Multiply it by each prime in the list\n        for p in primes:\n            new_num = current_ugly * p\n            # If the new number hasn't been added yet, add it to the heap and the ugly nums list\n            if new_num not in {num for num, _ in min_heap}:\n                heapq.heappush(min_heap, (new_num, len(ugly_nums)))\n                ugly_nums.append(new_num)\n                \n    return ugly_nums[-1]\n\n# Check function to verify the solution with provided data points\ndef check_solution():\n    assert nth_super_ugly_number(12, [2,7,13,19]) == 32\n    assert nth_super_ugly_number(10, [2,7,13,19]) == 26\n    assert nth_super_ugly_number(100, [2,7,13,19]) == 5408\n    print(\"All test cases passed.\")\n\ncheck_solution()",
    "test_cases": [
      "assert nth_super_ugly_number(12,[2,7,13,19])==32",
      "assert nth_super_ugly_number(10,[2,7,13,19])==26",
      "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
    ]
  },
  {
    "mbpp_id": 844,
    "problem_statement": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Number(k, n):\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer\")\n    \n    odd_index = 0\n    even_index = 1\n    \n    while True:\n        if odd_index >= n - k + 1:\n            break\n        \n        if odd_index % 2 == 0:\n            yield odd_index\n            even_index += 2\n        else:\n            yield even_index\n            odd_index += 2\n            \n            # Skip even indices after finding the k-th odd number\n            skip_count = k // 2\n            while skip_count > 0:\n                even_index += 2\n                skip_count -= 1\n                \n            if even_index < n:\n                yield even_index",
    "test_cases": [
      "assert get_Number(8,5) == 2",
      "assert get_Number(7,2) == 3",
      "assert get_Number(5,2) == 3"
    ]
  },
  {
    "mbpp_id": 845,
    "problem_statement": "Write a python function to count the number of digits in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Digits(n):\n    def fact_digits(num):\n        if num == 0:\n            return 0\n        else:\n            return (num % 10 + fact_digits(int(num / 10)))\n    \n    result = fact_digits(n)\n    while result >= 10:\n        result //= 10\n    return len(str(result))\n\n# Test cases\nprint(find_Digits(7))  # Expected output: 4\nprint(find_Digits(5))  # Expected output: 3\nprint(find_Digits(4))  # Expected output: 2",
    "test_cases": [
      "assert find_Digits(7) == 4",
      "assert find_Digits(5) == 3",
      "assert find_Digits(4) == 2"
    ]
  },
  {
    "mbpp_id": 846,
    "problem_statement": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_platform(arrival, departure, n): \n    arrival.sort()\n    departure.sort()\n    \n    platform_needed = 1\n    max_platforms = 1\n    \n    i = 1\n    while i < n:\n        if arrival[i] >= departure[platform_needed - 1]:\n            platform_needed += 1\n            max_platforms = max(max_platforms, platform_needed)\n            i += 1\n        else:\n            platform_needed -= 1\n            \n    return max_platforms",
    "test_cases": [
      "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
      "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
      "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
    ]
  },
  {
    "mbpp_id": 847,
    "problem_statement": "Write a python function to copy a list from a singleton tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lcopy(tup):\n    # Convert the singleton tuple into a list and then back into a tuple for copying\n    return tuple(list(tup))\n\n# Test cases\nprint(lcopy([1, 2, 3]))  # Expected output: [1, 2, 3]\nprint(lcopy([4, 8, 2, 10, 15, 18]))  # Expected output: [4, 8, 2, 10, 15, 18]\nprint(lcopy([4, 5, 6]))  # Expected output: [4, 5, 6]",
    "test_cases": [
      "assert lcopy([1, 2, 3]) == [1, 2, 3]",
      "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
      "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
    ]
  },
  {
    "mbpp_id": 848,
    "problem_statement": "Write a function to find the area of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def area_trapezium(a, b, h):\n    \"\"\"\n    Calculate the area of a trapezium given its parallel sides and height.\n    \n    Args:\n        a (float): The length of one parallel side of the trapezium.\n        b (float): The length of the other parallel side of the trapezium.\n        h (float): The height of the trapezium.\n        \n    Returns:\n        float: The area of the trapezium.\n    \"\"\"\n    return 0.5 * (a + b) * h",
    "test_cases": [
      "assert area_trapezium(6,9,4)==30",
      "assert area_trapezium(10,20,30)==450",
      "assert area_trapezium(15,25,35)==700"
    ]
  },
  {
    "mbpp_id": 849,
    "problem_statement": "Write a python function to find sum of all prime divisors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sum' is not defined",
      "Test 2: FAIL - name 'Sum' is not defined",
      "Test 3: FAIL - name 'Sum' is not defined"
    ],
    "generated_code": "def sum_of_prime_divisors(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    result = 0\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0 and is_prime(divisor):\n            result += divisor\n            n //= divisor\n        divisor += 1\n    return result",
    "test_cases": [
      "assert Sum(60) == 10",
      "assert Sum(39) == 16",
      "assert Sum(40) == 7"
    ]
  },
  {
    "mbpp_id": 850,
    "problem_statement": "Write a function to check if a triangle of positive area is possible with the given angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_triangleexists(angle1, angle2, angle3):\n    # Check if all angles are positive and their sum is less than 180 degrees\n    return angle1 > 0 and angle2 > 0 and angle3 > 0 and (angle1 + angle2 + angle3) <= 180",
    "test_cases": [
      "assert is_triangleexists(50,60,70)==True",
      "assert is_triangleexists(90,45,45)==True",
      "assert is_triangleexists(150,30,70)==False"
    ]
  },
  {
    "mbpp_id": 851,
    "problem_statement": "Write a python function to find sum of inverse of divisors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Sum_of_Inverse_Divisors(numerator, denominator):\n    result = 0\n    for i in range(1, min(numerator, denominator) + 1):\n        if numerator % i == 0 and denominator % i == 0:\n            result += 1 / (i * i)\n    return result",
    "test_cases": [
      "assert Sum_of_Inverse_Divisors(6,12) == 2",
      "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
      "assert Sum_of_Inverse_Divisors(1,4) == 4"
    ]
  },
  {
    "mbpp_id": 852,
    "problem_statement": "Write a python function to remove negative numbers from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_negs(nums):\n    return [num for num in nums if num >= 0]\n\n# Test cases\nprint(remove_negs([1,-2,3,-4]))  # Output: [1, 3]\nprint(remove_negs([1,2,3,-4]))   # Output: [1, 2, 3]\nprint(remove_negs([4,5,-6,7,-8]))  # Output: [4, 5, 7]",
    "test_cases": [
      "assert remove_negs([1,-2,3,-4]) == [1,3]",
      "assert remove_negs([1,2,3,-4]) == [1,2,3]",
      "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
    ]
  },
  {
    "mbpp_id": 853,
    "problem_statement": "Write a python function to find sum of odd factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_of_odd_Factors' is not defined",
      "Test 2: FAIL - name 'sum_of_odd_Factors' is not defined",
      "Test 3: FAIL - name 'sum_of_odd_Factors' is not defined"
    ],
    "generated_code": "import math\n\ndef sum_of_odd_factors(n):\n    total = 1  # Start with 1 because every number is divisible by 1\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):  # Only check odd numbers\n        power = 0\n        \n        while n % i == 0:\n            n //= i\n            power += 1\n            \n            if power > 1:\n                total *= (i**(power-1)) * 2  # Add even powers of factor to the total\n    \n    if n > 2:  # If there's a prime factor greater than sqrt(n)\n        total *= (n**((1 - 0.5)**int(math.log2(n))))\n    \n    return total",
    "test_cases": [
      "assert sum_of_odd_Factors(30) == 24",
      "assert sum_of_odd_Factors(18) == 13",
      "assert sum_of_odd_Factors(2) == 1"
    ]
  },
  {
    "mbpp_id": 854,
    "problem_statement": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def raw_heap(lst):\n    import heapq\n    return list(heapq.nsmallest(len(lst), lst))",
    "test_cases": [
      "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
      "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
      "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
    ]
  },
  {
    "mbpp_id": 855,
    "problem_statement": "Write a python function to check for even parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Even_Parity(number):\n    # Initialize the counter for odd bits\n    odd_bit_counter = 0\n    \n    # Iterate through each bit in the binary representation of the number\n    while number > 0:\n        # Check if the least significant bit is 1 (indicating an odd bit)\n        if number & 1 == 1:\n            odd_bit_counter += 1\n        \n        # Right shift the number to process the next bit\n        number >>= 1\n    \n    # If there's more than one odd bit, then the parity is not even\n    return odd_bit_counter <= 1",
    "test_cases": [
      "assert check_Even_Parity(10) == True",
      "assert check_Even_Parity(11) == False",
      "assert check_Even_Parity(18) == True"
    ]
  },
  {
    "mbpp_id": 856,
    "problem_statement": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Swaps(arr, n):\n    # Initialize variables\n    min_swaps = float('inf')\n    \n    # Iterate through all possible starting positions for the sorted array\n    for i in range(n):\n        current_swaps = 0\n        \n        # Calculate number of swaps needed if we start with '0' at position i\n        for j in range(i + 1, n):\n            if arr[j] == 0:\n                current_swaps += 1\n    \n        # Update the minimum number of swaps found so far\n        min_swaps = min(min_swaps, current_swaps)\n        \n        # Swap elements from right to left and calculate new swap count\n        while i >= 0 and arr[i] != 0:\n            i -= 1\n            current_swaps += 1\n            \n        # Calculate number of swaps needed if we start with '1' at position i\n        current_swaps += abs(len(arr[:i]) - len(arr[i:]))\n        \n        # Update the minimum number of swaps found so far\n        min_swaps = min(min_swaps, current_swaps)\n        \n    return min_swaps\n\n# Test cases\nprint(find_Min_Swaps([1,0,1,0], 4))  # Expected output: 3\nprint(find_Min_Swaps([0,1,0], 3))     # Expected output: 1\nprint(find_Min_Swaps([0,0,1,1,0], 5)) # Expected output: 2",
    "test_cases": [
      "assert find_Min_Swaps([1,0,1,0],4) == 3",
      "assert find_Min_Swaps([0,1,0],3) == 1",
      "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
    ]
  },
  {
    "mbpp_id": 857,
    "problem_statement": "Write a function to list out the list of given strings individually using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def listify_list(input_list):\n    return [list(s) for s in input_list]",
    "test_cases": [
      "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
      "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
      "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
    ]
  },
  {
    "mbpp_id": 858,
    "problem_statement": "Write a function to count number of lists in a given list of lists and square the count.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_list(lst):\n    return len(lst) ** 2\n\n# Test cases\nprint(count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Output: 25\nprint(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )) # Output: 16\nprint(count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])) # Output: 9",
    "test_cases": [
      "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
      "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
    ]
  },
  {
    "mbpp_id": 859,
    "problem_statement": "Write a function to generate all sublists of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sub_lists(lst):\n    result = [[]]\n    for item in lst:\n        # Create new lists by adding the current item to each existing list\n        result += [current + [item] for current in result]\n    return result",
    "test_cases": [
      "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
      "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
      "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
    ]
  },
  {
    "mbpp_id": 860,
    "problem_statement": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_alphanumeric(input_string):\n    # The regular expression pattern looks for anything that is not an alphanumeric character at the end of the string.\n    if re.search(r'\\W+$', input_string):\n        return 'Discard'\n    else:\n        return 'Accept'\n\n# Test cases\nprint(check_alphanumeric(\"dawood@\"))   # Expected output: \"Accept\"\nprint(check_alphanumeric(\"skdmsam326\")) # Expected output: \"Accept\"\nprint(check_alphanumeric(\"cooltricks@\"))# Expected output: \"Discard\"",
    "test_cases": [
      "assert check_alphanumeric(\"dawood@\") == 'Discard'",
      "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
      "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
    ]
  },
  {
    "mbpp_id": 861,
    "problem_statement": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 's' is not defined",
      "Test 2: FAIL - name 's' is not defined",
      "Test 3: FAIL - name 's' is not defined"
    ],
    "generated_code": "from typing import List\nimport functools\n\ndef anagram_lambda(strings: List[str], word: str) -> List[str]:\n    # Sort each word and check if it is present in the sorted version of the target word's elements.\n    return [sorted(s)[0] for s in map(functools.reduce(lambda x,y:x+y,[s]*len(word),word)) if \"\".join(sorted(s))==\"\".join(sorted(word))]",
    "test_cases": [
      "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
      "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
      "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
    ]
  },
  {
    "mbpp_id": 862,
    "problem_statement": "Write a function to find the occurrences of n most common words in a given text.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef n_common_words(text,n=1):\n    # Split the text into words based on spaces and count the occurrences\n    word_counts = Counter(re.findall(r'\\b\\w+\\b', text.lower()))\n    # Get the top n common words\n    return word_counts.most_common(n)\n\n# Test cases\nprint(n_common_words(\"python is a programming language\"))  # Should print [('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\nprint(n_common_words(\"the quick brown fox jumps over the lazy dog\",n=3))  # Should print [('quick', 1), ('brown', 1), ('fox', 1)]\nprint(n_common_words(\"hello world hello universe\",n=4))  # Should print [('hello', 2), ('world', 1), ('universe', 1)]",
    "test_cases": [
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
    ]
  },
  {
    "mbpp_id": 863,
    "problem_statement": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_longest_conseq_subseq() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_longest_conseq_subseq() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_longest_conseq_subseq() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef find_longest_conseq_subseq(arr: List[int]) -> int:\n    unique_nums = set(arr)\n    max_length = 0\n    \n    for num in unique_nums:\n        if num - 1 not in unique_nums:\n            current_num = num\n            while current_num + 1 in unique_nums:\n                current_num += 1\n            max_length = max(max_length, current_num - num + 1)\n    \n    return max_length",
    "test_cases": [
      "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
      "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
      "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
    ]
  },
  {
    "mbpp_id": 864,
    "problem_statement": "Write a function to find palindromes in a given list of strings using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def palindrome_lambda(strings):\n    return [s for s in strings if s == s[::-1]]",
    "test_cases": [
      "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
      "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
      "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
    ]
  },
  {
    "mbpp_id": 865,
    "problem_statement": "Write a function to print n-times a list using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ntimes_list(lst, times):\n    return list(map(lambda x: x * times, lst))",
    "test_cases": [
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
    ]
  },
  {
    "mbpp_id": 866,
    "problem_statement": "Write a function to check whether the given month name contains 31 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumb(month_name):\n    months_with_31_days = [\"April\", \"June\", \"September\", \"November\"]\n    \n    if month_name in months_with_31_days:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnumb(\"February\")==False",
      "assert check_monthnumb(\"January\")==True",
      "assert check_monthnumb(\"March\")==True"
    ]
  },
  {
    "mbpp_id": 867,
    "problem_statement": "Write a python function to add a minimum number such that the sum of array becomes even.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Num(arr, n):\n    total_sum = sum(arr)\n    if total_sum % 2 == 0:\n        # If the total sum is already even, no need to adjust\n        adjusted_value = n - ((total_sum + n) // 2)\n    else:\n        # If the total sum is odd, we need to make it even\n        adjusted_value = n - ((total_sum + n - 1) // 2)\n    return adjusted_value",
    "test_cases": [
      "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
      "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
      "assert min_Num([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 868,
    "problem_statement": "Write a python function to find the length of the last word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'length_Of_Last_Word' is not defined",
      "Test 2: FAIL - name 'length_Of_Last_Word' is not defined",
      "Test 3: FAIL - name 'length_Of_Last_Word' is not defined"
    ],
    "generated_code": "def length_of_last_word(s):\n    # Remove leading and trailing spaces\n    s = s.strip()\n    # Split the string into words\n    words = s.split()\n    # Return the length of the last word if it exists, otherwise return 0\n    return len(words[-1]) if words else 0",
    "test_cases": [
      "assert length_Of_Last_Word(\"python language\") == 8",
      "assert length_Of_Last_Word(\"PHP\") == 3",
      "assert length_Of_Last_Word(\"\") == 0"
    ]
  },
  {
    "mbpp_id": 869,
    "problem_statement": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_list_range(lists, start, end):\n    return [lst for lst in lists if all(i >= start and i <= end for i in lst)]",
    "test_cases": [
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
    ]
  },
  {
    "mbpp_id": 870,
    "problem_statement": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_positivenum(numbers):\n    return sum(x for x in numbers if x > 0)",
    "test_cases": [
      "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
      "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
      "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
    ]
  },
  {
    "mbpp_id": 871,
    "problem_statement": "Write a python function to check whether the given strings are rotations of each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Rotations(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    combined = str1 + str1\n    return str2 in combined",
    "test_cases": [
      "assert are_Rotations(\"abc\",\"cba\") == False",
      "assert are_Rotations(\"abcd\",\"cdba\") == False",
      "assert are_Rotations(\"abacd\",\"cdaba\") == True"
    ]
  },
  {
    "mbpp_id": 872,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset(nested_list1, nested_list2):\n    for sublist1 in nested_list1:\n        found = False\n        for item1 in sublist1:\n            for sublist2 in nested_list2:\n                for item2 in sublist2:\n                    if item1 == item2:\n                        found = True\n                        break\n                if found:\n                    break\n        if not found:\n            return False\n    return True",
    "test_cases": [
      "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
      "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
      "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
    ]
  },
  {
    "mbpp_id": 873,
    "problem_statement": "Write a function to solve the fibonacci sequence using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_cases": [
      "assert fibonacci(7) == 13",
      "assert fibonacci(8) == 21",
      "assert fibonacci(9) == 34"
    ]
  },
  {
    "mbpp_id": 874,
    "problem_statement": "Write a python function to check if the string is a concatenation of another string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Concat(s1, s2):\n    # Concatenate s2 with itself n times and check if it matches s1\n    for i in range(1, len(s1)):\n        if s1 == s2 * i:\n            return True\n    return False",
    "test_cases": [
      "assert check_Concat(\"abcabcabc\",\"abc\") == True",
      "assert check_Concat(\"abcab\",\"abc\") == False",
      "assert check_Concat(\"aba\",\"ab\") == False"
    ]
  },
  {
    "mbpp_id": 875,
    "problem_statement": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_difference(tuples_list):\n    # Find the minimum value from each tuple\n    first_values = [min(x) for x in tuples_list]\n    \n    # Calculate differences between consecutive first values\n    differences = [abs(first_values[i] - first_values[i+1]) for i in range(len(first_values)-1)]\n    \n    # Return the minimum difference found\n    return min(differences)\n\n# Test cases\nprint(min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Output: 1\nprint(min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]))  # Output: 2\nprint(min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]))  # Output: 6",
    "test_cases": [
      "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
      "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
      "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
    ]
  },
  {
    "mbpp_id": 876,
    "problem_statement": "Write a python function to find lcm of two positive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def lcm(x, y):\n    # Find the maximum of x and y\n    max_num = max(x, y)\n    \n    # Keep dividing max_num by both x and y until it is no longer divisible by either\n    while max_num % x == 0 and max_num % y == 0:\n        gcd = max_num\n        max_num //= x\n        max_num //= y\n    \n    # Return the result as the LCM\n    return gcd * x * y // max_num",
    "test_cases": [
      "assert lcm(4,6) == 12",
      "assert lcm(15,17) == 255",
      "assert lcm(2,6) == 6"
    ]
  },
  {
    "mbpp_id": 877,
    "problem_statement": "Write a python function to sort the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_String(s):\n    # Convert the string into a list of characters, sort them alphabetically, and then join back into a string\n    return \"\".join(sorted(list(s)))",
    "test_cases": [
      "assert sort_String(\"cba\") == \"abc\"",
      "assert sort_String(\"data\") == \"aadt\"",
      "assert sort_String(\"zxy\") == \"xyz\""
    ]
  },
  {
    "mbpp_id": 878,
    "problem_statement": "Write a function to check if the given tuple contains only k elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuples(test_tuple, required_elements):\n    # Convert the list of required elements into a set for O(1) lookups\n    required_set = set(required_elements)\n    \n    # Check if all elements in the test tuple are in the required set\n    return len(set(test_tuple)) == len(required_set)\n\n# Test cases\nprint(check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5]))  # Should return True\nprint(check_tuples((4, 5, 6, 4, 6, 5), [4, 5, 6]))  # Should return True\nprint(check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1]))  # Should return False",
    "test_cases": [
      "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
      "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
      "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
    ]
  },
  {
    "mbpp_id": 879,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match 'a' followed by anything and end with 'b'\n    pattern = r'a.*b$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with provided data points\nprint(text_match(\"aabbbbd\"))   # Expected output: Not matched!\nprint(text_match(\"aabAbbbc\"))  # Expected output: Not matched!\nprint(text_match(\"accddbbjjjb\")) # Expected output: Found a match!",
    "test_cases": [
      "assert text_match(\"aabbbbd\") == 'Not matched!'",
      "assert text_match(\"aabAbbbc\") == 'Not matched!'",
      "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 880,
    "problem_statement": "Write a python function to find number of solutions in quadratic equation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return f\"{discriminant} solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n\n# Test cases\nprint(check_solution(2, 5, 2))  # Output: 9 solutions\nprint(check_solution(1, 1, 1))  # Output: No solutions\nprint(check_solution(1, 2, 1))  # Output: 1 solution",
    "test_cases": [
      "assert Check_Solution(2,5,2) == \"2 solutions\"",
      "assert Check_Solution(1,1,1) == \"No solutions\"",
      "assert Check_Solution(1,2,1) == \"1 solution\""
    ]
  },
  {
    "mbpp_id": 881,
    "problem_statement": "Write a function to find the sum of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef sum_even_odd(nums: List[int]) -> int:\n    \"\"\"\n    Finds the sum of the first even and odd numbers in the given list.\n    \n    Args:\n    nums: A list of integers.\n    \n    Returns:\n    The sum of the first even and odd numbers found in the list.\n    \"\"\"\n    sum_even = 0\n    for num in nums:\n        if num % 2 == 0:\n            sum_even += num\n        else:\n            return sum_even",
    "test_cases": [
      "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
      "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
      "assert sum_even_odd([1,5,7,9,10])==11"
    ]
  },
  {
    "mbpp_id": 882,
    "problem_statement": "Write a function to caluclate perimeter of a parallelogram.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parallelogram_perimeter(a,b):\n    return 2 * (a + b)",
    "test_cases": [
      "assert parallelogram_perimeter(10,20)==400",
      "assert parallelogram_perimeter(15,20)==600",
      "assert parallelogram_perimeter(8,9)==144"
    ]
  },
  {
    "mbpp_id": 883,
    "problem_statement": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 and num % n == 0]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
    ]
  },
  {
    "mbpp_id": 884,
    "problem_statement": "Write a python function to check whether all the bits are within a given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    # Check if the bit at 'start_bit' is set and less than the bit at 'end_bit'\n    return num & ((1 << start_bit) - 1) < (1 << end_bit)\n\n# Test cases\nprint(all_Bits_Set_In_The_Given_Range(10, 2, 1))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(5, 2, 4))   # Expected output: False\nprint(all_Bits_Set_In_The_Given_Range(22, 2, 3))  # Expected output: True",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
      "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
      "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
    ]
  },
  {
    "mbpp_id": 885,
    "problem_statement": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Isomorphic(s, t):\n    # Checking if lengths of both strings are different\n    if len(s) != len(t):\n        return False\n    \n    map_s_to_t = {}\n    map_t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in map_s_to_t:\n            if map_s_to_t[char_s] != char_t:\n                return False\n        else:\n            map_s_to_t[char_s] = char_t\n        \n        if char_t in map_t_to_s:\n            if map_t_to_s[char_t] != char_s:\n                return False\n        else:\n            map_t_to_s[char_t] = char_s\n            \n    return True\n\n# Test Cases\nprint(is_Isomorphic(\"paper\", \"title\"))  # Expected output: True\nprint(is_Isomorphic(\"ab\", \"ba\"))        # Expected output: True\nprint(is_Isomorphic(\"ab\", \"aa\"))        # Expected output: False",
    "test_cases": [
      "assert is_Isomorphic(\"paper\",\"title\") == True",
      "assert is_Isomorphic(\"ab\",\"ba\") == True",
      "assert is_Isomorphic(\"ab\",\"aa\") == False"
    ]
  },
  {
    "mbpp_id": 886,
    "problem_statement": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_num(lst):\n    return sum(lst) / len(lst)",
    "test_cases": [
      "assert sum_num((8, 2, 3, 0, 7))==4.0",
      "assert sum_num((-10,-20,-30))==-20.0",
      "assert sum_num((19,15,18))==17.333333333333332"
    ]
  },
  {
    "mbpp_id": 887,
    "problem_statement": "Write a python function to check whether the given number is odd or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_odd(n):\n    # Check if the least significant bit of n is 1\n    return (n & 1) == 1",
    "test_cases": [
      "assert is_odd(5) == True",
      "assert is_odd(6) == False",
      "assert is_odd(7) == True"
    ]
  },
  {
    "mbpp_id": 888,
    "problem_statement": "Write a function to substract the elements of the given nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        temp = ()\n        for j in range(2):\n            temp += (tup1[i][j] - tup2[i][j],)\n        result.append(temp)\n    return tuple(result)\n\n# Test cases\nprint(substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))) # Expected output: ((-5, -4), (1, -4), (1, 8), (-6, 7))\nprint(substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))) # Expected output: ((-6, -4), (0, -4), (1, 8), (-6, 7))\nprint(substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))) # Expected output: ((7, -4), (1, -4), (6, 8), (-2, 7))",
    "test_cases": [
      "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
    ]
  },
  {
    "mbpp_id": 889,
    "problem_statement": "Write a function to reverse each list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_list_lists(lists):\n    return [[num for num in reversed(lst)] for lst in lists]",
    "test_cases": [
      "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
      "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
      "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
    ]
  },
  {
    "mbpp_id": 890,
    "problem_statement": "Write a python function to find the index of an extra element present in one sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Extra(arr1, arr2, n):\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return i + 1",
    "test_cases": [
      "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
      "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
      "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
    ]
  },
  {
    "mbpp_id": 891,
    "problem_statement": "Write a python function to check whether the given two numbers have same number of digits or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def same_Length(num1, num2):\n    \"\"\"\n    Compares the lengths of two integers.\n    \n    Parameters:\n        num1 (int): The first integer to compare.\n        num2 (int): The second integer to compare.\n        \n    Returns:\n        bool: True if both integers have the same length, otherwise False.\n    \"\"\"\n    # Convert integers to strings and compare their lengths\n    return len(str(num1)) == len(str(num2))",
    "test_cases": [
      "assert same_Length(12,1) == False",
      "assert same_Length(2,2) == True",
      "assert same_Length(10,20) == True"
    ]
  },
  {
    "mbpp_id": 892,
    "problem_statement": "Write a function to remove multiple spaces in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_cases": [
      "assert remove_spaces('python  program')==('python program')",
      "assert remove_spaces('python   programming    language')==('python programming language')",
      "assert remove_spaces('python                     program')==('python program')"
    ]
  },
  {
    "mbpp_id": 893,
    "problem_statement": "Write a python function to get the last element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    \"\"\"\n    This function takes a list of lists and returns a new list containing \n    the last element from each sublist.\n    \n    Args:\n    lst (list): A list of lists where each sublist contains elements.\n    \n    Returns:\n    list: A list containing the last element from each sublist in the original list.\n    \"\"\"\n    return [sublist[-1] for sublist in lst]\n\n# Test Cases\nassert extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert extract([[1, 2, 3], [4, 5]]) == [3, 5]",
    "test_cases": [
      "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
      "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
      "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
    ]
  },
  {
    "mbpp_id": 894,
    "problem_statement": "Write a function to convert the given string of float type into tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def float_to_tuple(str_float):\n    # Split the string by comma and convert each element to a float\n    elements = map(float, str_float.split(\", \"))\n    # Convert list of floats to a tuple\n    result = tuple(elements)\n    return result\n\n# Test cases\nprint(float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\"))  # Expected output: (1.2, 1.3, 2.3, 2.4, 6.5)\nprint(float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\"))  # Expected output: (2.3, 2.4, 5.6, 5.4, 8.9)\nprint(float_to_tuple(\"0.3, 0.5, 7.8, 9.4\"))  # Expected output: (0.3, 0.5, 7.8, 9.4)",
    "test_cases": [
      "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
      "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
      "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
    ]
  },
  {
    "mbpp_id": 895,
    "problem_statement": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_subseq(arr):\n    \"\"\"\n    This function takes an array and returns the maximum sum of non-adjacent elements.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    int: The maximum sum of non-adjacent elements in the array\n    \"\"\"\n    incl = 0  # Maximum sum including the previous element\n    excl = 0  # Maximum sum excluding the previous element\n    \n    for i in arr:\n        new_excl = max(incl, excl)  # Update the excluded value\n        incl = excl + i  # Update the included value\n        excl = new_excl  # Move to the next iteration\n        \n    return max(incl, excl)\n\n# Test cases\nprint(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]))  # Expected output: 26\nprint(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]))  # Expected output: 28\nprint(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]))  # Expected output: 44",
    "test_cases": [
      "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
      "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
      "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
    ]
  },
  {
    "mbpp_id": 896,
    "problem_statement": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_cases": [
      "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
      "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
      "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
    ]
  },
  {
    "mbpp_id": 897,
    "problem_statement": "Write a python function to check whether the word is present in a given sentence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Word_Present' is not defined",
      "Test 2: FAIL - name 'is_Word_Present' is not defined",
      "Test 3: FAIL - name 'is_Word_Present' is not defined"
    ],
    "generated_code": "def is_word_present(sentence, word):\n    # Split the sentence into words and join them with spaces\n    split_sentence = ' '.join(sentence.split())\n    \n    # Check if the word is present in the split sentence\n    return word.lower() in split_sentence.lower()\n\n# Test cases\nprint(is_word_present(\"machine learning\", \"machine\"))   # Expected output: True\nprint(is_word_present(\"easy\", \"fun\"))                   # Expected output: False\nprint(is_word_present(\"python language\", \"code\"))       # Expected output: False",
    "test_cases": [
      "assert is_Word_Present(\"machine learning\",\"machine\") == True",
      "assert is_Word_Present(\"easy\",\"fun\") == False",
      "assert is_Word_Present(\"python language\",\"code\") == False"
    ]
  },
  {
    "mbpp_id": 898,
    "problem_statement": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_elements(input_list, num_elements):\n    return input_list[num_elements-1:-num_elements]\n\n# Example usage:\nprint(extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2))  # Output: [1, 4]\nprint(extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4))  # Output: [4]\nprint(extract_elements([0,0,0,0,0], 5))  # Output: [0]",
    "test_cases": [
      "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
      "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
      "assert extract_elements([0,0,0,0,0],5)==[0]"
    ]
  },
  {
    "mbpp_id": 899,
    "problem_statement": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(arr, n):\n    # Your implementation here\n    pass",
    "test_cases": [
      "assert check([3,2,1,2,3,4],6) == True",
      "assert check([2,1,4,5,1],5) == True",
      "assert check([1,2,2,1,2,3],6) == True"
    ]
  },
  {
    "mbpp_id": 900,
    "problem_statement": "Write a function where a string will start with a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def match_num(test_str):\n    # Extracting the first two characters of the test string\n    prefix = test_str[:2]\n    \n    # Checking if the extracted prefix is exactly \"5\" or \"6\"\n    return prefix == '5' or prefix == '6'",
    "test_cases": [
      "assert match_num('5-2345861')==True",
      "assert match_num('6-2345861')==False",
      "assert match_num('78910')==False"
    ]
  },
  {
    "mbpp_id": 901,
    "problem_statement": "Write a function to find the smallest multiple of the first n numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\nfrom functools import reduce\n\ndef gcd(a, b):\n    \"\"\"Compute the greatest common divisor of two integers.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Compute the least common multiple of two integers.\"\"\"\n    return a * b // gcd(a, b)\n\ndef smallest_multiple(n):\n    \"\"\"\n    Compute the smallest positive number that is evenly divisible by all of the integers from 1 to n.\n    \n    Parameters:\n    n (int): The upper bound for divisibility\n    \n    Returns:\n    int: The smallest multiple of all numbers from 1 to n\n    \"\"\"\n    return reduce(lcm, range(1, n + 1))\n\n# Test cases to verify the correctness of the function\nprint(smallest_multiple(13))  # Expected output: 360360\nprint(smallest_multiple(2))   # Expected output: 2\nprint(smallest_multiple(1))   # Expected output: 1",
    "test_cases": [
      "assert smallest_multiple(13)==360360",
      "assert smallest_multiple(2)==2",
      "assert smallest_multiple(1)==1"
    ]
  },
  {
    "mbpp_id": 902,
    "problem_statement": "Write a function to combine two dictionaries by adding values for common keys.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_dict(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
      "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
      "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
    ]
  },
  {
    "mbpp_id": 903,
    "problem_statement": "Write a python function to count the total unset bits from 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Unset_Bits' is not defined",
      "Test 2: FAIL - name 'count_Unset_Bits' is not defined",
      "Test 3: FAIL - name 'count_Unset_Bits' is not defined"
    ],
    "generated_code": "def count_unset_bits(n):\n    # Initialize a counter for unset bits\n    unset_count = 0\n    \n    # Iterate through all bits in n from least significant bit to most significant bit\n    while n > 0:\n        # Check if the current bit is unset (not equal to 1)\n        if n & 1 == 0:\n            unset_count += 1\n        # Right shift n by one position to check the next bit\n        n >>= 1\n    \n    return unset_count",
    "test_cases": [
      "assert count_Unset_Bits(2) == 1",
      "assert count_Unset_Bits(5) == 4",
      "assert count_Unset_Bits(14) == 17"
    ]
  },
  {
    "mbpp_id": 904,
    "problem_statement": "Write a function to return true if the given number is even else return false.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_num(num):\n    \"\"\"\n    This function checks if the given number is even.\n    \n    Parameters:\n        num (int/float): The number to check.\n        \n    Returns:\n        bool: True if the number is even, False otherwise.\n    \"\"\"\n    return int(num) % 2 == 0",
    "test_cases": [
      "assert even_num(13.5)==False",
      "assert even_num(0)==True",
      "assert even_num(-9)==False"
    ]
  },
  {
    "mbpp_id": 905,
    "problem_statement": "Write a python function to find the sum of squares of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def sum_of_square(n):\n    \"\"\"\n    Calculate the sum of squares of binomial coefficients for n elements.\n    \n    Args:\n        n (int): The number of elements in each binomial coefficient.\n        \n    Returns:\n        int: Sum of squares of all binomial coefficients for n elements.\n    \"\"\"\n    # Initialize result as 1 because C(0,0)=C(n,n)=1 and we don't include it twice.\n    result = 1\n    \n    # Iterate from 1 to n-1 to calculate the sum of squares of binomial coefficients.\n    for i in range(1, n):\n        current_result = (i + 1) ** 2 * (n - i)\n        result += current_result\n        \n    return result\n\n# Test cases to verify the correctness of the function.\nassert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert sum_of_square(4) == 70",
      "assert sum_of_square(5) == 252",
      "assert sum_of_square(2) == 6"
    ]
  },
  {
    "mbpp_id": 906,
    "problem_statement": "Write a function to extract year, month and date from a url by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: not enough values to unpack (expected 6, got 4)"
    ],
    "generated_code": "import re\n\ndef extract_date(url):\n    pattern = r'https:\\/\\/(.*\\.)?([a-z]{2})(\\/|)([^/.]+)'\n    match = re.search(pattern, url)\n    if match:\n        domain, _, city_state_country, _, _, date_part = match.groups()\n        date_parts = [int(part) for part in date_part.split('-')]\n        return [(date_parts[0], date_parts[1], date_parts[2])]\n    else:\n        return []\n\n# Test cases\nprint(extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"))\nprint(extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"))\nprint(extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\"))",
    "test_cases": [
      "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
      "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
      "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
    ]
  },
  {
    "mbpp_id": 907,
    "problem_statement": "Write a function to print the first n lucky numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lucky_num(n):\n    result = []\n    for i in range(1, 4*n + 1, 4):\n        if i < n:\n            result.append(i)\n        else:\n            result.extend([i-3, i+1])\n    return result[:n]\n\n# Test cases\nprint(lucky_num(10)) # Should return [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\nprint(lucky_num(5))  # Should return [1, 3, 7, 9, 13]\nprint(lucky_num(8))  # Should return [1, 3, 7, 9, 13, 15, 21, 25]",
    "test_cases": [
      "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
      "assert lucky_num(5)==[1, 3, 7, 9, 13]",
      "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
    ]
  },
  {
    "mbpp_id": 908,
    "problem_statement": "Write a function to find the fixed point in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_fixed_point() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_fixed_point(arr):\n    \"\"\"\n    Find the first occurrence of an element equal to its index in the sorted version of the array.\n    \n    Parameters:\n    arr (list): The input list containing both positive and negative integers.\n    \n    Returns:\n    int: The first fixed point found if exists, otherwise returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid is a fixed point\n        if mid == arr[mid]:\n            return mid\n        \n        # If the middle element is less than the one on its right,\n        # it must be in the right half (after mid)\n        elif arr[mid] < mid:\n            left = mid + 1\n        \n        # Otherwise, it's in the left half (before mid)\n        else:\n            right = mid - 1\n            \n    # If no fixed point is found\n    return -1\n\n# Test cases\nprint(find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100]))  # Expected output: 3\nprint(find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8]))  # Expected output: -1\nprint(find_fixed_point([0, 2, 5, 8, 17]))  # Expected output: 0",
    "test_cases": [
      "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
      "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
      "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
    ]
  },
  {
    "mbpp_id": 909,
    "problem_statement": "Write a function to find the previous palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def previous_palindrome(n):\n    n_str = str(n)\n    mid_index = len(n_str) // 2\n    \n    # If the length is odd, remove the middle digit\n    if len(n_str) % 2 != 0:\n        return int(n_str[:mid_index] + '0' + n_str[mid_index+1:])\n    \n    # If the length is even, compare both halves and swap if necessary\n    if n_str[:mid_index] == n_str[-(mid_index+1):][::-1]:\n        return int(''.join([n_str[i] for i in range(len(n_str)) if i not in [mid_index]]))\n    else:\n        return int(n_str[:mid_index-1] + '9' + ''.join([n_str[i] for i in range(mid_index+1, len(n_str))]))",
    "test_cases": [
      "assert previous_palindrome(99)==88",
      "assert previous_palindrome(1221)==1111",
      "assert previous_palindrome(120)==111"
    ]
  },
  {
    "mbpp_id": 910,
    "problem_statement": "Write a function to validate a gregorian date.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - not all arguments converted during string formatting"
    ],
    "generated_code": "def check_date(m,d,y):\n    # Ensure year is not leap year and month and day are within range for non-leap year\n    return y%4 != 0 or (y % 100 == 0 and y % 400 != 0) and m in [1,3,5,7,8,10,12] and d <= 31 or m in [4,6,9,11] and d <= 30 or m == 2 and d <= 28",
    "test_cases": [
      "assert check_date(11,11,2002)==True",
      "assert check_date(13,11,2002)==False",
      "assert check_date('11','11','2002')==True"
    ]
  },
  {
    "mbpp_id": 911,
    "problem_statement": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef maximum_product(arr):\n    # Extract the three largest and two smallest values from the list\n    largest = heapq.nlargest(3, arr)\n    smallest = heapq.nsmallest(2, arr)\n    \n    # Calculate both possible products\n    product_1 = largest[0] * largest[1] * largest[2]\n    product_2 = largest[0] * smallest[0] * smallest[1]\n    \n    # Return the maximum of the two calculated products\n    return max(product_1, product_2)\n\n# Test the function with provided data points\nprint(maximum_product([12, 74, 9, 50, 61, 41]))  # Expected output: 225700\nprint(maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58]))  # Expected output: 414375\nprint(maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]))  # Expected output: 2520",
    "test_cases": [
      "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
      "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
      "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
    ]
  },
  {
    "mbpp_id": 912,
    "problem_statement": "Write a function to find ln, m lobb number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lobb_num(n, k):\n    \"\"\"\n    Calculate the n-lobb number with k lobbs.\n    \n    Args:\n    - n (int): The total count of items.\n    - k (int): The number of items to choose in each subset.\n    \n    Returns:\n    - int: The calculated lobb number.\n    \"\"\"\n    # Initialize the result variable to store the final value\n    res = 1\n    \n    # Loop from k to 1\n    for i in range(k, 0, -1):\n        # Update the result by multiplying it with n-i+1 and dividing by i\n        res = res * (n - i + 1) // i\n    \n    return res",
    "test_cases": [
      "assert int(lobb_num(5, 3)) == 35",
      "assert int(lobb_num(3, 2)) == 5",
      "assert int(lobb_num(4, 2)) == 20"
    ]
  },
  {
    "mbpp_id": 913,
    "problem_statement": "Write a function to check for a number at the end of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def end_num(s):\n    # Check if the last character in the string is a digit\n    return s[-1].isdigit()",
    "test_cases": [
      "assert end_num('abcdef')==False",
      "assert end_num('abcdef7')==True",
      "assert end_num('abc')==False"
    ]
  },
  {
    "mbpp_id": 914,
    "problem_statement": "Write a python function to check whether the given string is made up of two alternating characters or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Two_Alter(s):\n    # Check if length of string is less than 2\n    if len(s) < 2:\n        return False\n    \n    # Get first and second character\n    first_char = s[0]\n    second_char = s[1] if len(s) > 1 else \"\"\n    \n    # Iterate through all other characters except the first one\n    for i in range(1, len(s)):\n        if s[i] != first_char:\n            return False\n            \n    # If no non-matching characters found, they alternate\n    return True\n\n# Test cases\nprint(is_Two_Alter(\"abab\"))  # Expected output: True\nprint(is_Two_Alter(\"aaaa\"))  # Expected output: False\nprint(is_Two_Alter(\"xyz\"))   # Expected output: False",
    "test_cases": [
      "assert is_Two_Alter(\"abab\") == True",
      "assert is_Two_Alter(\"aaaa\") == False",
      "assert is_Two_Alter(\"xyz\") == False"
    ]
  },
  {
    "mbpp_id": 915,
    "problem_statement": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_numbs(arr):\n    pos = [x for x in arr if x > 0]\n    neg = [-x for x in arr if x < 0]\n    \n    return pos + neg",
    "test_cases": [
      "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
      "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
      "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
    ]
  },
  {
    "mbpp_id": 916,
    "problem_statement": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_triplet_array(arr, target_sum, desired_sum):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == desired_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < desired_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n\n# Example usage:\nprint(find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22))  # Output: (4, 10, 8)\nprint(find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24))   # Output: (12, 3, 9)\nprint(find_triplet_array([1, 2, 3, 4, 5], 5, 9))       # Output: (1, 3, 5)",
    "test_cases": [
      "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
      "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
      "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
    ]
  },
  {
    "mbpp_id": 917,
    "problem_statement": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'text_uppercase_lowercase' is not defined",
      "Test 2: FAIL - name 'text_uppercase_lowercase' is not defined",
      "Test 3: FAIL - name 'text_uppercase_lowercase' is not defined"
    ],
    "generated_code": "def check_text(text):\n    # Check if the first character is uppercase and the rest are lowercase\n    for i in range(len(text)):\n        if text[i].isupper() and all(char.islower() for char in text[i+1:]):\n            return 'Found a match!'\n    return 'Not matched!'\n\n# Test the function with provided data points\nprint(check_text(\"AaBbGg\"))   # Expected output: Found a match!\nprint(check_text(\"aA\"))       # Expected output: Not matched!\nprint(check_text(\"PYTHON\"))   # Expected output: Not matched!",
    "test_cases": [
      "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
      "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
      "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 918,
    "problem_statement": "Write a function to count coin change.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - coin_change() takes 2 positional arguments but 3 were given",
      "Test 2: FAIL - coin_change() takes 2 positional arguments but 3 were given",
      "Test 3: FAIL - coin_change() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef coin_change(cents: int, coins: List[int]) -> int:\n    dp = [0] + [-math.inf] * cents\n    for i in range(1, len(dp)):\n        for j in range(len(coins)):\n            if i >= coins[j]:\n                dp[i] = max(dp[i], dp[i - coins[j]] + 1)\n    return max(dp) if min(dp) != -math.inf else 0",
    "test_cases": [
      "assert coin_change([1, 2, 3],3,4)==4",
      "assert coin_change([4,5,6,7,8,9],6,9)==2",
      "assert coin_change([4,5,6,7,8,9],6,4)==1"
    ]
  },
  {
    "mbpp_id": 919,
    "problem_statement": "Write a python function to multiply all items in the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_list(numbers):\n    # Initialize result to 1 because multiplying anything by 0 would give 0 which is not what we want.\n    result = 1\n    \n    for num in numbers:\n        result *= num\n        \n    return result",
    "test_cases": [
      "assert multiply_list([1,-2,3]) == -6",
      "assert multiply_list([1,2,3,4]) == 24",
      "assert multiply_list([3,1,2,3]) == 18"
    ]
  },
  {
    "mbpp_id": 920,
    "problem_statement": "Write a function to remove all tuples with all none values in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_tuple' is not defined",
      "Test 2: FAIL - name 'remove_tuple' is not defined",
      "Test 3: FAIL - name 'remove_tuple' is not defined"
    ],
    "generated_code": "def remove_none_tuples(tuples_list):\n    return [tuple for tuple in tuples_list if tuple.count(None) < len(tuple)]",
    "test_cases": [
      "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
      "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
      "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
    ]
  },
  {
    "mbpp_id": 921,
    "problem_statement": "Write a function to perform chunking of tuples each of size n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chunk_tuples(lst, n):\n    # Use list comprehension and slicing to create chunks of size n\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test cases\nprint(chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3))  # Expected output: [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nprint(chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2))   # Expected output: [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nprint(chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)) # Expected output: [(11, 14, 16, 17), (19, 21, 22, 25)]",
    "test_cases": [
      "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
      "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
      "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
    ]
  },
  {
    "mbpp_id": 922,
    "problem_statement": "Write a function to find a pair with the highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef max_product(nums: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Finds two numbers in nums such that their product is maximized.\n    \n    Args:\n    nums: A list of integers.\n    \n    Returns:\n    A tuple containing the maximum product and the indices of the elements in nums that produce it.\n    \"\"\"\n    if not nums or len(nums) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n    \n    min_num = float('inf')\n    second_min_num = float('inf')\n    max_num = float('-inf')\n    second_max_num = float('-inf')\n    \n    for i, num in enumerate(nums):\n        if num <= max_num:\n            continue\n        elif num >= max_num:\n            second_max_num = max_num\n            max_num = num\n        \n        elif num >= second_max_num:\n            second_max_num = num\n    \n        # Update minimum number so far\n        if num <= min_num:\n            min_num = num\n    \n    # Check all pairs of min_num and max_num\n    max_product_value = max(max_num * min_num, second_max_num * min_num)\n    return max_num, min_num if max_num * min_num == max_product_value else second_max_num",
    "test_cases": [
      "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
      "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
      "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
    ]
  },
  {
    "mbpp_id": 923,
    "problem_statement": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def super_seq(str1, str2, m, n):\n    # Initialize a DP table with dimensions (m+1) x (n+1)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill the first column of the DP table\n    for i in range(m + 1):\n        dp[i][0] = i\n    \n    # Fill the first row of the DP table\n    for j in range(n + 1):\n        dp[0][j] = j\n    \n    # Fill the rest of the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n    \n    return dp[m][n]\n\n# Test cases\nprint(super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: 9\nprint(super_seq(\"feek\", \"eke\", 4, 3))       # Output: 5\nprint(super_seq(\"PARRT\", \"RTA\", 5, 3))      # Output: 6",
    "test_cases": [
      "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
      "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
      "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
    ]
  },
  {
    "mbpp_id": 924,
    "problem_statement": "Write a function to find maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_two(a, b):\n    return max(a, b)",
    "test_cases": [
      "assert max_of_two(10,20)==20",
      "assert max_of_two(19,15)==19",
      "assert max_of_two(-10,-20)==-10"
    ]
  },
  {
    "mbpp_id": 925,
    "problem_statement": "Write a python function to calculate the product of all the numbers of a given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'mutiple_tuple' is not defined",
      "Test 2: FAIL - name 'mutiple_tuple' is not defined",
      "Test 3: FAIL - name 'mutiple_tuple' is not defined"
    ],
    "generated_code": "def multiple_tuple(tup):\n    # Calculate and return the product of all elements in the tuple\n    result = 1\n    for num in tup:\n        result *= num\n    return result\n\n# Test cases\nprint(multiple_tuple((4, 3, 2, 2, -1, 18)))  # Expected output: -864\nprint(multiple_tuple((1, 2, 3)))              # Expected output: 6\nprint(multiple_tuple((-2, -4, -6)))           # Expected output: -48)",
    "test_cases": [
      "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
      "assert mutiple_tuple((1,2,3)) == 6",
      "assert mutiple_tuple((-2,-4,-6)) == -48"
    ]
  },
  {
    "mbpp_id": 926,
    "problem_statement": "Write a function to find n-th rencontres number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef rencontres_number(n, k):\n    \"\"\"\n    Calculate the n-th Rencontres number.\n    \n    Args:\n    n : int - The position in the sequence of Rencontres numbers.\n    k : int - The value for which we calculate the Rencontres number.\n    \n    Returns:\n    int - The calculated Rencontres number based on given n and k.\n    \"\"\"\n    if k == 0:\n        return 1  # Base case: when k is 0\n    \n    base = 1\n    factorial_k = 1\n    count = 0\n    \n    while count < n:\n        base *= k + 1\n        factorials = [math.factorial(i) for i in range(k+1)]\n        current_combination = sum(factorials[:k]) * (base // factorials[k])\n        \n        if current_combination >= factorial_k * (factorials[-1] ** (n-1)):\n            break\n        \n        base //= (factorials[0] * factorial_k)\n        factorial_k += 1\n        count += 1\n    \n    return current_combination\n\n# Check function with provided data points\nassert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert rencontres_number(7, 2) == 924",
      "assert rencontres_number(3, 0) == 2",
      "assert rencontres_number(3, 1) == 3"
    ]
  },
  {
    "mbpp_id": 927,
    "problem_statement": "Write a function to calculate the height of the given binary tree.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1",
    "test_cases": [
      "assert (max_height(root)) == 3",
      "assert (max_height(root1)) == 5 ",
      "assert (max_height(root2)) == 4"
    ]
  },
  {
    "mbpp_id": 928,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from datetime import datetime\n\ndef change_date_format(date_str):\n    \"\"\"\n    Converts a date from the format 'yyyy-mm-dd' to 'dd-mm-yyyy'.\n    \n    Parameters:\n        date_str (str): The input date string in the format 'yyyy-mm-dd'.\n        \n    Returns:\n        str: The converted date string in the format 'dd-mm-yyyy'.\n    \"\"\"\n    return date_str[6:] + '-' + date_str[:4] + '-' + date_str[4:6]\n\n# Test cases\nprint(change_date_format('2026-01-02')) # Expected output: \"02-01-2026\"\nprint(change_date_format('2021-01-04')) # Expected output: \"04-01-2021\"\nprint(change_date_format('2030-06-06')) # Expected output: \"06-06-2030\"",
    "test_cases": [
      "assert change_date_format('2026-01-02')=='02-01-2026'",
      "assert change_date_format('2021-01-04')=='04-01-2021'",
      "assert change_date_format('2030-06-06')=='06-06-2030'"
    ]
  },
  {
    "mbpp_id": 929,
    "problem_statement": "Write a function to count repeated items of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_tuplex(tup, item):\n    # Count occurrences of 'item' in 'tup'\n    return tup.count(item)",
    "test_cases": [
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
      "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
    ]
  },
  {
    "mbpp_id": 930,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Use regex to find a sequence of characters starting with 'a' followed by zero or more 'b'\n    if bool(re.search(r'\\ba.*b*', text)):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"msb\") == 'Not matched!'",
      "assert text_match(\"a0c\") == 'Found a match!'",
      "assert text_match(\"abbc\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 931,
    "problem_statement": "Write a function to calculate the sum of series 1³+2³+3³+….+n³.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_series' is not defined",
      "Test 2: FAIL - name 'sum_series' is not defined",
      "Test 3: FAIL - name 'sum_series' is not defined"
    ],
    "generated_code": "def sum_of_cubes(n):\n    return int((n * (n + 1) / 2)) ** 2\n\n# Test cases\nprint(sum_of_cubes(7))  # Expected output: 784\nprint(sum_of_cubes(5))  # Expected output: 225\nprint(sum_of_cubes(15))  # Expected output: 14400",
    "test_cases": [
      "assert sum_series(7)==784",
      "assert sum_series(5)==225",
      "assert sum_series(15)==14400"
    ]
  },
  {
    "mbpp_id": 932,
    "problem_statement": "Write a function to remove duplicate words from a given list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_duplic_list(lst):\n    # Use set to eliminate duplicates while preserving order\n    return list(set(lst))\n\n# Test cases\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"]))  # Expected: ['Python', 'Exercises', 'Practice', 'Solution']\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"]))  # Expected: ['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"]))  # Expected: ['Python', 'Exercises', 'Practice', 'Solution', 'C++', 'C']",
    "test_cases": [
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
    ]
  },
  {
    "mbpp_id": 933,
    "problem_statement": "Write a function to convert camel case string to snake case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef camel_to_snake(text):\n    # Convert camel case to snake case by inserting underscores before capital letters and converting them to lowercase.\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()",
    "test_cases": [
      "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
      "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
      "assert camel_to_snake('QuadCore') == 'quad_core'"
    ]
  },
  {
    "mbpp_id": 934,
    "problem_statement": "Write a function to find the nth delannoy number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'deelnnoy_num' is not defined. Did you mean: 'dealnnoy_num'?"
    ],
    "generated_code": "def dealnnoy_num(n, k):\n    # Initialize an empty list to store Delannoy numbers up to k\n    d = [0] * (k + 1)\n    \n    # Base case initialization\n    d[0] = 1\n    \n    # Fill in the Delannoy triangle\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                d[j] += d[j - 1]\n            if j < i:\n                d[j] += d[j]\n                \n    # Return the nth Delannoy number at position k+1\n    return d[k]\n\n# Test cases\nprint(deelnnoy_num(3, 4))  # Expected output: 129\nprint(deelnnoy_num(3, 3))  # Expected output: 63\nprint(deelnnoy_num(4, 5))  # Expected output: 681",
    "test_cases": [
      "assert dealnnoy_num(3, 4) == 129",
      "assert dealnnoy_num(3, 3) == 63",
      "assert dealnnoy_num(4, 5) == 681"
    ]
  },
  {
    "mbpp_id": 935,
    "problem_statement": "Write a function to calculate the sum of series 1²+2²+3²+….+n².",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def series_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i * i\n    return total",
    "test_cases": [
      "assert series_sum(6)==91",
      "assert series_sum(7)==140",
      "assert series_sum(12)==650"
    ]
  },
  {
    "mbpp_id": 936,
    "problem_statement": "Write a function to re-arrange the given tuples based on the given ordered list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not subscriptable",
      "Test 2: FAIL - 'int' object is not subscriptable",
      "Test 3: FAIL - 'int' object is not subscriptable"
    ],
    "generated_code": "def re_arrange_tuples(tuples_list, order_list):\n    # Create a dictionary with tuple elements as keys and their original index in 'order_list' as values\n    indexed_tuples = {tup[0]: i for i, tup in enumerate(order_list)}\n    \n    # Sort the tuples by the original index in 'order_list'\n    sorted_tups = sorted(indexed_tuples.items(), key=lambda item: indexed_tuples[item[0]])\n    \n    # Extract the sorted tuples from the sorted items\n    result = [(value, key) for value, key in sorted_tups]\n    \n    return result",
    "test_cases": [
      "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
      "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
      "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
    ]
  },
  {
    "mbpp_id": 937,
    "problem_statement": "Write a function to count the most common character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_char(s):\n    char_count = {}\n    for char in s:\n        if char.isalnum():\n            char_count[char.lower()] = char_count.get(char.lower(), 0) + 1\n    \n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    \n    return max_char",
    "test_cases": [
      "assert max_char(\"hello world\")==('l')",
      "assert max_char(\"hello \")==('l')",
      "assert max_char(\"python pr\")==('p')"
    ]
  },
  {
    "mbpp_id": 938,
    "problem_statement": "Write a function to find three closest elements from three sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_closet(arr1, arr2, arr3, n1, n2, n3):\n    i = j = k = 0\n    \n    while i < n1 and j < n2 and k < n3:\n        if abs(arr1[i] - arr3[k]) <= abs(arr2[j] - arr3[k]):\n            if arr1[i] == arr3[k]:\n                break\n            else:\n                i += 1\n        elif abs(arr1[i] - arr3[k]) > abs(arr2[j] - arr3[k]):\n            if arr2[j] == arr3[k]:\n                break\n            else:\n                j += 1\n        else:\n            if arr1[i] == arr3[k]:\n                break\n            else:\n                k += 1\n                \n    return tuple(sorted((arr1[i-1], arr2[j-1], arr3[k-1])))\n\n# Test cases\nprint(find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2)) # Expected output: (10, 15, 10)\nprint(find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5)) # Expected output: (24, 22, 23)\nprint(find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2)) # Expected output: (11, 16, 11)",
    "test_cases": [
      "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
      "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
      "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
    ]
  },
  {
    "mbpp_id": 939,
    "problem_statement": "Write a function to sort a list of dictionaries using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sorted_models(lst):\n    return sorted(lst, key=lambda x: x['make'])",
    "test_cases": [
      "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
      "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
      "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
    ]
  },
  {
    "mbpp_id": 940,
    "problem_statement": "Write a function to sort the given array by using heap sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heapify(arr, n, i): \n    largest = i  \n    l = 2 * i + 1     \n    r = 2 * i + 2     \n\n    if l < n and arr[i] < arr[l]: \n        largest = l \n\n    if r < n and arr[largest] < arr[r]: \n        largest = r  \n\n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]   # swap \n  \n        heapify(arr, n, largest) \n\n\ndef heap_sort(arr): \n    n = len(arr) \n\n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n\n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0)\n\n\n# Test cases\nprint(heap_sort([12, 2, 4, 5, 2, 3]))  # Expected output: [2, 2, 3, 4, 5, 12]\nprint(heap_sort([32, 14, 5, 6, 7, 19]))  # Expected output: [5, 6, 7, 14, 19, 32]\nprint(heap_sort([21, 15, 29, 78, 65]))  # Expected output: [15, 21, 29, 65, 78]",
    "test_cases": [
      "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
      "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
      "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
    ]
  },
  {
    "mbpp_id": 941,
    "problem_statement": "Write a function to count the elements in a list until an element is a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_elim' is not defined",
      "Test 2: FAIL - name 'count_elim' is not defined",
      "Test 3: FAIL - name 'count_elim' is not defined"
    ],
    "generated_code": "def count_elements(lst):\n    counter = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        counter += 1\n    return counter",
    "test_cases": [
      "assert count_elim([10,20,30,(10,20),40])==3",
      "assert count_elim([10,(20,30),(10,20),40])==1",
      "assert count_elim([(10,(20,30,(10,20),40))])==0"
    ]
  },
  {
    "mbpp_id": 942,
    "problem_statement": "Write a function to check if any list element is present in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst1, lst2):\n    # Check if any element of the first list exists in the second list\n    for x in lst1:\n        if x in lst2:\n            return True\n    return False",
    "test_cases": [
      "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
      "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
      "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
    ]
  },
  {
    "mbpp_id": 943,
    "problem_statement": "Write a function to combine two given sorted lists using heapq module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import merge\n\ndef combine_lists(list1, list2):\n    return list(merge(list1, list2))",
    "test_cases": [
      "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
      "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
      "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
    ]
  },
  {
    "mbpp_id": 944,
    "problem_statement": "Write a function to separate and print the numbers and their position of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_position(s):\n    nums = [int(i) for i in s if i.isdigit()]\n    return sum(nums)",
    "test_cases": [
      "assert num_position(\"there are 70 flats in this apartment\")==10",
      "assert num_position(\"every adult have 32 teeth\")==17",
      "assert num_position(\"isha has 79 chocolates in her bag\")==9"
    ]
  },
  {
    "mbpp_id": 945,
    "problem_statement": "Write a function to convert the given tuples into set.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_set(tup):\n    \"\"\"\n    Converts a tuple into a set.\n    \n    Parameters:\n    tup (tuple): The input tuple to be converted.\n    \n    Returns:\n    set: A set containing unique elements from the input tuple.\n    \"\"\"\n    return set(tup)\n\n# Test cases\nprint(tuple_to_set(('x', 'y', 'z'))) # Expected output: {'y', 'x', 'z'}\nprint(tuple_to_set(('a', 'b', 'c'))) # Expected output: {'c', 'a', 'b'}\nprint(tuple_to_set(('z', 'd', 'e'))) # Expected output: {'d', 'e', 'z'}",
    "test_cases": [
      "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
      "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
      "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
    ]
  },
  {
    "mbpp_id": 946,
    "problem_statement": "Write a function to find the most common elements and their counts of a specified text.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef most_common_elem(text,n=5):\n    \"\"\"\n    Find the n most common elements in a string and their counts.\n    \n    Parameters:\n    text (str): The input text to analyze.\n    n (int): The number of top elements to return (default is 5).\n    \n    Returns:\n    list: A list where each element contains an element and its count, sorted by frequency.\n    \"\"\"\n    # Normalize text by removing non-alphabetic characters and converting to lowercase\n    cleaned_text = re.sub(r'[^a-z\\s]', '', text.lower())\n    # Count the frequency of each word\n    freq_counter = Counter(cleaned_text.split())\n    # Get the n most common elements\n    result = freq_counter.most_common(n)\n    return result",
    "test_cases": [
      "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
    ]
  },
  {
    "mbpp_id": 947,
    "problem_statement": "Write a python function to find the length of the shortest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find and return the minimum length among all words in the list.\n    min_length = min(len(word) for word in words)\n    return min_length\n\n# Test cases\nprint(len_log([\"win\", \"lose\", \"great\"]))  # Expected output: 3\nprint(len_log([\"a\", \"ab\", \"abc\"]))        # Expected output: 1\nprint(len_log([\"12\", \"12\", \"1234\"]))      # Expected output: 2",
    "test_cases": [
      "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
      "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
    ]
  },
  {
    "mbpp_id": 948,
    "problem_statement": "Write a function to get an item of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_item(tup, index):\n    if isinstance(index, int) and -len(tup) <= index < len(tup):\n        return tup[index]\n    else:\n        raise IndexError(\"Index out of range\")\n\n# Test cases\nprint(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3))  # Expected output: ('e')\ntry:\n    print(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -4))\nexcept Exception as e:\n    print(str(e))  # Expected output: 'Index out of range'",
    "test_cases": [
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
    ]
  },
  {
    "mbpp_id": 949,
    "problem_statement": "Write a function to sort the given tuple list basis the total digits in tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_list(lst):\n    # Convert tuples with strings into integers for comparison\n    lst = [(int(i) if isinstance(i, str) else i) for i in lst]\n    \n    # Sort based on the sum of digits\n    sorted_lst = sorted(lst, key=sum)\n    \n    # Convert back to original data type and remove duplicates\n    result = [tuple([str(i) if isinstance(i, int) else i for i in t]) for t in set(sorted_lst)]\n    \n    return result\n\n# Test cases\nprint(sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)]))  # Should return [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\nprint(sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)]))      # Should return [(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\nprint(sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)]))         # Should return [(1, 2), (145,), (134, 23), (34, 4, 61, 723)]",
    "test_cases": [
      "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
      "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
      "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
    ]
  },
  {
    "mbpp_id": 950,
    "problem_statement": "Write a function to display sign of the chinese zodiac for given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '97' is not in list",
      "Test 2: FAIL - '98' is not in list",
      "Test 3: FAIL - '94' is not in list"
    ],
    "generated_code": "def chinese_zodiac(year):\n    # List containing all possible signs in Chinese zodiac order\n    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    \n    # Find the index of the given year's sign within the list of zodiac signs\n    sign_index = zodiac_signs.index(str(year)[-2:])\n    \n    # Return the corresponding sign name from the zodiac_signs list at the found index\n    return zodiac_signs[sign_index]",
    "test_cases": [
      "assert chinese_zodiac(1997)==('Ox')",
      "assert chinese_zodiac(1998)==('Tiger')",
      "assert chinese_zodiac(1994)==('Dog')"
    ]
  },
  {
    "mbpp_id": 951,
    "problem_statement": "Write a function to find the maximum of similar indices in two lists of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_similar_indices(list1, list2):\n    # Create a new list with pairs from both input lists based on their similarity\n    result = []\n    for pair1, pair2 in zip(list1, list2):\n        if len(set(pair1)) == len(pair1) and len(set(pair2)) == len(pair2): \n            # If all elements in both pairs are unique, compare them\n            if pair1 > pair2:\n                result.append((pair1[0], pair2[1]))\n            else:\n                result.append((pair2[0], pair1[1]))\n    return result",
    "test_cases": [
      "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
      "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
      "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
    ]
  },
  {
    "mbpp_id": 952,
    "problem_statement": "Write a function to compute the value of ncr mod p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    fact = [0] * (n + 1)\n    fact[0], fact[1] = 1, 1\n    \n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n        \n    return fact[n] * pow(fact[r], p - 2, p) % p * pow(fact[n - r], p - 2, p) % p",
    "test_cases": [
      "assert nCr_mod_p(10, 2, 13) == 6",
      "assert nCr_mod_p(11, 3, 14) == 11",
      "assert nCr_mod_p(18, 14, 19) == 1"
    ]
  },
  {
    "mbpp_id": 953,
    "problem_statement": "Write a python function to find the minimun number of subsets with distinct elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def subset(nums, k):\n    from collections import defaultdict\n    \n    # Initialize count for each element and store in a dictionary\n    counts = defaultdict(int)\n    \n    # Count occurrences of each number\n    for num in nums:\n        counts[num] += 1\n    \n    result = 0\n    available = len(counts)\n    \n    # Try removing numbers until we can pick exactly 'k' distinct elements\n    while available >= k:\n        if available > k:\n            # Remove the least common number first to maximize remaining options\n            max_common_count = -1\n            for key, val in counts.items():\n                if val > max_common_count:\n                    max_common_count = val\n            \n            # Update available based on removed number's frequency\n            available -= max_common_count\n            \n            # Subtract from total possible combinations\n            result += available + 1\n    \n    return result",
    "test_cases": [
      "assert subset([1, 2, 3, 4],4) == 1",
      "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
      "assert subset([1, 2, 3 ],3) == 1"
    ]
  },
  {
    "mbpp_id": 954,
    "problem_statement": "Write a function that gives profit amount if the given amount has profit else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def profit_amount(cost, revenue):\n    if cost > revenue:\n        return None\n    else:\n        return revenue - cost",
    "test_cases": [
      "assert profit_amount(1500,1200)==300",
      "assert profit_amount(100,200)==None",
      "assert profit_amount(2000,5000)==None"
    ]
  },
  {
    "mbpp_id": 955,
    "problem_statement": "Write a function to find out, if the given number is abundant.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_abundant(n):\n    # Calculate the sum of proper divisors of n.\n    def sum_of_divisors(x):\n        sum = 0\n        for i in range(1, x // 2 + 1):\n            if x % i == 0:\n                sum += i\n        return sum\n    \n    # Check if the number is abundant.\n    return sum_of_divisors(n) > n",
    "test_cases": [
      "assert is_abundant(12)==True",
      "assert is_abundant(13)==False",
      "assert is_abundant(9)==False"
    ]
  },
  {
    "mbpp_id": 956,
    "problem_statement": "Write a function to split the given string at uppercase letters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_list(s):\n    # Splitting the string based on uppercase letters and converting each word into lowercase\n    return [word.lower() for word in s.split(' ') if word[0].isupper()]\n\n# Test cases\nprint(split_list(\"LearnToBuildAnythingWithGoogle\"))  # Expected output: ['learn', 'to', 'build', 'anything', 'with', 'google']\nprint(split_list(\"ApmlifyingTheBlack+DeveloperCommunity\"))  # Expected output: ['apmlifying', 'the', 'black+', 'developer', 'community']\nprint(split_list(\"UpdateInTheGoEcoSystem\"))  # Expected output: ['update', 'in', 'the', 'go', 'eco', 'system']",
    "test_cases": [
      "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
      "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
      "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
    ]
  },
  {
    "mbpp_id": 957,
    "problem_statement": "Write a python function to get the position of rightmost set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def get_First_Set_Bit_Pos(n):\n    \"\"\"\n    Returns the position of the first set bit from the right in an integer n.\n    \n    Parameters:\n    n (int): The integer number whose rightmost set bit is to be found.\n    \n    Returns:\n    int: The position of the rightmost set bit in the binary representation of n.\n    \"\"\"\n    pos = -1\n    while n > 0:\n        if n & 1 == 1:\n            pos += 1\n        n >>= 1\n    return pos\n\n# Test Cases\nassert get_First_Set_Bit_Pos(12) == 3, \"Test case 1 failed\"\nassert get_First_Set_Bit_Pos(18) == 2, \"Test case 2 failed\"\nassert get_First_Set_Bit_Pos(16) == 5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_First_Set_Bit_Pos(12) == 3",
      "assert get_First_Set_Bit_Pos(18) == 2",
      "assert get_First_Set_Bit_Pos(16) == 5"
    ]
  },
  {
    "mbpp_id": 958,
    "problem_statement": "Write a function to convert an integer into a roman numeral.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def int_to_roman(num):\n    # Define the mapping of numbers to their corresponding roman numerals\n    value = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    \n    roman_numeral = \"\"\n    i = 0\n    \n    while num > 0:\n        for _ in range(num // value[i]):\n            roman_numeral += symbols[i]\n            num -= value[i]\n        i += 1\n    \n    return roman_numeral\n\n# Test cases\nassert int_to_roman(1) == \"I\"\nassert int_to_roman(50) == \"L\"\nassert int_to_roman(4) == \"IV\"",
    "test_cases": [
      "assert int_to_roman(1)==(\"I\")",
      "assert int_to_roman(50)==(\"L\")",
      "assert int_to_roman(4)==(\"IV\")"
    ]
  },
  {
    "mbpp_id": 959,
    "problem_statement": "Write a python function to find the average of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Average' is not defined",
      "Test 2: FAIL - name 'Average' is not defined",
      "Test 3: FAIL - name 'Average' is not defined"
    ],
    "generated_code": "def average(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the average.\n    \n    Example usage:\n    >>> average([15, 9, 55, 41, 35, 20, 62, 49])\n    35.75\n    \n    >>> average([4, 5, 1, 2, 9, 7, 10, 8])\n    5.75\n    \n    >>> average([1, 2, 3])\n    2\n    \n    >>> average([-1, -3, 2, 0, 10])\n    1.0\n    \"\"\"\n    total = sum(numbers)\n    count = len(numbers)\n    if count == 0:\n        return 0\n    else:\n        return float(total) / count",
    "test_cases": [
      "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
      "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
      "assert Average([1,2,3]) == 2"
    ]
  },
  {
    "mbpp_id": 960,
    "problem_statement": "Write a function to solve tiling problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_noOfways(n):\n    # Initialize an array to store the number of ways to tile each length from 0 to n.\n    dp = [0] * (n + 1)\n    \n    # Base case: There is one way to tile a length of 0.\n    dp[0] = 1\n    \n    # Fill in the dp table for lengths 1 through n.\n    for i in range(1, n + 1):\n        # The number of ways to tile length i is the sum of the number of ways to tile length i-1 and length i-2.\n        dp[i] = dp[i - 1] + dp[i - 2]\n    \n    return dp[n]\n\n# Test cases\nprint(get_noOfways(4))   # Expected output: 3\nprint(get_noOfways(3))   # Expected output: 2\nprint(get_noOfways(5))   # Expected output: 5",
    "test_cases": [
      "assert get_noOfways(4)==3",
      "assert get_noOfways(3)==2",
      "assert get_noOfways(5)==5"
    ]
  },
  {
    "mbpp_id": 961,
    "problem_statement": "Write a function to convert a roman numeral to an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def roman_to_int(s):\n    # Create a dictionary with Roman numerals as keys and their corresponding integer values as values\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    \n    total = prev_value = 0\n    \n    for char in s:\n        value = rom_val[char]\n        \n        if value > prev_value:\n            total += value - 2 * prev_value\n        else:\n            total += value\n        \n        prev_value = value\n    \n    return total",
    "test_cases": [
      "assert roman_to_int('MMMCMLXXXVI')==3986",
      "assert roman_to_int('MMMM')==4000",
      "assert roman_to_int('C')==100"
    ]
  },
  {
    "mbpp_id": 962,
    "problem_statement": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r+1):\n        if num % 2 == 0:\n            total += num\n    return total\n\n# Check function with provided data points\nassert sum_Even(2, 5) == 6, \"Test case 1 failed\"\nassert sum_Even(3, 8) == 18, \"Test case 2 failed\"\nassert sum_Even(4, 6) == 10, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_Even(2,5) == 6",
      "assert sum_Even(3,8) == 18",
      "assert sum_Even(4,6) == 10"
    ]
  },
  {
    "mbpp_id": 963,
    "problem_statement": "Write a function to calculate the discriminant value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def discriminant_value(a, b, c):\n    d = (b**2) - (4*a*c)\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", d)\n    else:\n        return (\"no real solution\", d)",
    "test_cases": [
      "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
      "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
      "assert discriminant_value(0,0,9)==(\"one solution\",0)"
    ]
  },
  {
    "mbpp_id": 964,
    "problem_statement": "Write a python function to check whether the length of the word is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the input word is even\n    return len(word) % 2 == 0",
    "test_cases": [
      "assert word_len(\"program\") == False",
      "assert word_len(\"solution\") == True",
      "assert word_len(\"data\") == True"
    ]
  },
  {
    "mbpp_id": 965,
    "problem_statement": "Write a function to convert camel case string to snake case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def camel_to_snake(s):\n    return ''.join('_' + char.lower() if char.isupper() else char for char in s).lstrip('_')\n\n# Test cases\nprint(camel_to_snake('PythonProgram'))  # Expected output: 'python_program'\nprint(camel_to_snake('pythonLanguage'))  # Expected output: 'python_language'\nprint(camel_to_snake('ProgrammingLanguage'))  # Expected output: 'programming_language'",
    "test_cases": [
      "assert camel_to_snake('PythonProgram')==('python_program')",
      "assert camel_to_snake('pythonLanguage')==('python_language')",
      "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
    ]
  },
  {
    "mbpp_id": 966,
    "problem_statement": "Write a function to remove an empty tuple from a list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    # Remove empty tuples from the list\n    return [t for t in lst if t]\n\n# Test cases\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])); # Expected output: [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\nprint(remove_empty([(), (), ('',), (\"python\"), (\"program\")])); # Expected output: [('python'), ('program')]\nprint(remove_empty([(), (), ('',), (\"java\")])); # Expected output: [('java')]",
    "test_cases": [
      "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
      "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
      "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
    ]
  },
  {
    "mbpp_id": 967,
    "problem_statement": "Write a python function to accept the strings which contains all vowels.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check(word):\n    \"\"\"\n    This function checks if the input word contains all the vowels.\n    If it does, it returns \"accepted\", otherwise it returns \"not accepted\".\n    \"\"\"\n    # Define a regular expression pattern for vowels\n    vowel_pattern = r'[aeiouAEIOU]'\n    \n    # Use regex search to find all vowels in the word\n    found_vowels = len(re.findall(vowel_pattern, word))\n    \n    # Return \"accepted\" if there are at least 5 vowels, otherwise return \"not accepted\"\n    return 'accepted' if found_vowels >= 5 else 'not accepted'\n\n# Test cases\nprint(check(\"SEEquoiaL\"))  # Should print \"accepted\"\nprint(check('program'))    # Should print \"not accepted\"\nprint(check('fine'))       # Should print \"not accepted\"",
    "test_cases": [
      "assert check(\"SEEquoiaL\") == 'accepted'",
      "assert check('program') == \"not accepted\"",
      "assert check('fine') == \"not accepted\""
    ]
  },
  {
    "mbpp_id": 968,
    "problem_statement": "Write a python function to find maximum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def floor_Max(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns the maximum of their floor values.\n    \n    :param a: Integer - The first number.\n    :param b: Integer - The second number.\n    :param c: Integer - The third number.\n    :return: Integer - The maximum of the floor values of the three numbers.\n    \"\"\"\n    # Calculate the floor values of each number\n    floored_a = a // 1\n    floored_b = b // 1\n    floored_c = c // 1\n    \n    # Return the maximum of the calculated floor values\n    return max(floored_a, floored_b, floored_c)\n\n# Test cases to verify the correctness of the solution\nassert floor_Max(11, 10, 9) == 9\nassert floor_Max(5, 7, 4) == 2\nassert floor_Max(2, 2, 1) == 1",
    "test_cases": [
      "assert floor_Max(11,10,9) == 9",
      "assert floor_Max(5,7,4) == 2",
      "assert floor_Max(2,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 969,
    "problem_statement": "Write a function to join the tuples if they have similar initial elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def join_tuples(tuples_list):\n    result = []\n    for t in tuples_list:\n        # Check if the tuple already exists in the result list\n        if not result or result[-1][0] != t[0]:\n            result.append(t)\n        else:\n            result[-1] += t\n    return result\n\n# Test cases\nprint(join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]))  # Expected output: [(5, 6, 7), (6, 8, 10), (7, 13)]\nprint(join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)]))  # Expected output: [(6, 7, 8), (7, 9, 11), (8, 14)]\nprint(join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)]))  # Expected output: [(7, 8, 9), (8, 10, 12), (9, 15)]",
    "test_cases": [
      "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
      "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
      "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
    ]
  },
  {
    "mbpp_id": 970,
    "problem_statement": "Write a function to find minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_two(a, b):\n    return min(a, b)",
    "test_cases": [
      "assert min_of_two(10,20)==10",
      "assert min_of_two(19,15)==15",
      "assert min_of_two(-10,-20)==-20"
    ]
  },
  {
    "mbpp_id": 971,
    "problem_statement": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def maximum_segments(n, a, b, c):\n    count = 0\n    temp_a = min(a, b)\n    temp_b = max(b - temp_a + c, 0)\n    \n    while n >= temp_a * temp_b:\n        count += temp_a\n        temp_a = min(temp_a, temp_b)\n        temp_b = max(temp_b - temp_a + temp_a, 0)\n    \n    return count if temp_a == temp_b else count + temp_a",
    "test_cases": [
      "assert maximum_segments(7, 5, 2, 5) == 2",
      "assert maximum_segments(17, 2, 1, 3) == 17",
      "assert maximum_segments(18, 16, 3, 6) == 6"
    ]
  },
  {
    "mbpp_id": 972,
    "problem_statement": "Write a function to concatenate the given two tuples to a nested tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_nested(t1, t2):\n    # Concatenate the two tuples into one nested tuple\n    return (t1,) + (t2,)",
    "test_cases": [
      "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
      "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
      "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
    ]
  },
  {
    "mbpp_id": 973,
    "problem_statement": "Write a python function to left rotate the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_rotate(s,n):\n    # Perform left rotation on the string s for n positions\n    return s[n:] + s[:n]\n\n# Test the function with provided test cases\nprint(left_rotate(\"python\",2))   # Expected output: \"thonpy\"\nprint(left_rotate(\"bigdata\",3 )) # Expected output: \"databig\"\nprint(left_rotate(\"hadoop\",1 ))  # Expected output: \"adooph\"",
    "test_cases": [
      "assert left_rotate(\"python\",2) == \"thonpy\"   ",
      "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
      "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
    ]
  },
  {
    "mbpp_id": 974,
    "problem_statement": "Write a function to find the minimum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def min_sum_path(triangle):\n    \"\"\"\n    Finds the minimum total path sum from top to bottom in the given triangle.\n    \n    Parameters:\n    triangle (List[List[int]]): A list of lists where each sublist represents a level of the triangle,\n                                with numbers representing the value at that position.\n                                \n    Returns:\n    int: The minimum total path sum.\n    \"\"\"\n    # Convert input to a list of lists if it's not already\n    if isinstance(triangle[0], list):\n        triangle = [[int(i) for i in row] for row in triangle]\n    \n    # Initialize the dp array with the first element\n    dp = triangle[0][:]\n    \n    # Iterate over the triangle starting from the second row\n    for r in range(1, len(triangle)):\n        # Iterate over all columns in the current row\n        for c in range(len(triangle[r])):\n            # Update the dp value for the current cell with the minimum path sum possible from its two children\n            dp[c] += min(dp[max(c-1, 0)], dp[min(c+1, len(dp)-1)])\n    \n    # Return the last element in the dp array as the minimum path sum\n    return dp[-1]\n\n# Check function with provided data points\nassert min_sum_path([[2],[3,9],[1,6,7]]) == 6\nassert min_sum_path([[2],[3,7],[8,5,6]]) == 10\nassert min_sum_path([[3],[6,4],[5,2,7]]) == 9",
    "test_cases": [
      "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
      "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
      "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min_Sum(n):\n    min_sum = float('inf')\n    \n    for i in range(2, n + 1):\n        temp_sum = 0\n        \n        while n % i == 0:\n            temp_sum += i\n            n //= i\n        \n        if temp_sum < min_sum:\n            min_sum = temp_sum\n    \n    return min_sum",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(lst):\n    freq = {}\n    for item in lst:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                freq[sub_item] = freq.get(sub_item, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_str(lst, strg):\n    result = []\n    for i in lst:\n        result.append(i)\n        result.append(strg)\n    return result[:-len(strg)+1]\n\n# Test cases\nprint(add_str([5, 6, 7, 4, 9], \"FDF\"))  # Expected output: [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nprint(add_str([7, 8, 9, 10], \"PF\"))     # Expected output: [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nprint(add_str([11, 14, 12, 1, 4], \"JH\"))# Expected output: [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(lst):\n    # Initialize sum variable\n    total_sum = 0\n    \n    # Iterate through each element in the list and add it to the total sum\n    for num in lst:\n        total_sum += num\n        \n    return total_sum\n\n# Test case 1\nassert sum_elements((7, 8, 9, 1, 10, 7)) == 42\n# Test case 2\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\n# Test case 3\nassert sum_elements((11, 12, 13, 45, 14)) == 95",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modular_sum(nums, n, m):\n    # Create a dictionary to store prefix sums and their remainders when divided by m\n    remainder_dict = {0: -1}\n    \n    current_sum = 0\n    \n    for i in range(len(nums)):\n        current_sum += nums[i]\n        \n        # Calculate the equivalent value of the current sum modulo m\n        equivalent_value = current_sum % m\n        \n        if equivalent_value not in remainder_dict:\n            remainder_dict[equivalent_value] = i\n            \n        else:\n            # Check if we have found a pair whose combined sum is divisible by m\n            if (remainder_dict[equivalent_value] != -1) and (i - remainder_dict[equivalent_value]) > 0:\n                return True\n    \n    return False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(arr):\n    max_num = max(arr)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort_for_radix(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]\n\n# Example usage\nprint(radix_sort([15, 79, 25, 68, 37]))  # Output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2]))   # Output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29]))  # Output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    # Initialize max_num with the smallest possible integer value\n    max_num = float('-inf')\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    \n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(number):\n    return int(math.sqrt(number))\n\n# Test cases\nassert sqrt_root(4) == 2\nassert sqrt_root(16) == 4\nassert sqrt_root(400) == 20\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_tetrahedron(side_length):\n    \"\"\"\n    Calculate the volume of a regular tetrahedron with side length 'side_length'.\n\n    Parameters:\n    side_length (float): The length of each edge of the tetrahedron.\n\n    Returns:\n    float: The volume of the tetrahedron.\n    \"\"\"\n    return (math.sqrt(2) / 12) * side_length ** 3",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef get_lcm(arr):\n    def gcd(a, b):\n        while(b):\n            a, b = b, a % b\n        return a\n    \n    arr.sort()\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        result = int(result * (arr[i] / gcd(result, arr[i])))\n        \n    return result",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    return a != b and b != c and c != a",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from bisect import bisect_left, bisect_right\n\ndef lb(a, x): \n    i = bisect_left(a, x) \n    if i != len(a) and a[i] == x: \n        j = bisect_right(a, x) - 1\n        return max(i, j)\n    return i  \n\ndef lbs(a): \n    n = len(a)  \n    # lps[i]: length of longest prefix-suffix which is equal to its suffix starting from index i\n    # bps[i]: length of longest prefix-basis which is equal to its basis starting from index i\n    lps = [1] * n\n    bps = [-1] * n\n  \n    # Building Longest Prefix-Suffix Array LPS[][]\n    # For each element in input sequence a[], we check whether it matches with\n    # the previous elements in LPS[]. If there exists an element which has been visited,\n    # then we will compare the values.\n    for i in range(1, n):\n        idx = bps[lb(bps, a[i])] + 1\n        if idx < i:\n            lps[i] = i - idx\n        else:\n            lps[i] = min(lps[idx], i - bps[idx])\n            bps[i] = lb(bps, a[i])\n\n    # Finding the Longest Bitonic Subsequence using Longest Prefix-Basis Array BPS[][].\n    ans = 1\n    for i in range(n):\n        if lps[bps[i]] >= lps[ans]:\n            ans = i\n    return lps[ans]\n\n\n# Test Cases\nprint(lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]))  # Output: 7\nprint(lbs([1, 11, 2, 10, 4, 5, 2, 1]))  # Output: 6\nprint(lbs([80, 60, 30, 40, 20, 10]))  # Output: 5",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(s):\n    def char_check(char): \n        if char.isupper():\n            return \"String must have 1 upper case character.\"\n        elif char.islower():\n            return \"String must have 1 lower case character.\"\n        elif char.isdigit():\n            return \"String must have 1 number.\"\n        else:\n            return \"\"\n\n    uppercase = sum(1 for c in s if c.isupper())\n    lowercase = sum(1 for c in s if c.islower())\n    numbers = sum(1 for c in s if c.isdigit())\n\n    result_uppercase = f\"String must have {uppercase} upper case characters.\"\n    result_lowercase = f\"String must have {lowercase} lower case characters.\"\n    result_numbers = f\"String must have {numbers} number.\"\n\n    return [char_check(c) for c in s] + [result_uppercase, result_lowercase, result_numbers]",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_increasing_subsequence(arr: List[int], n: int) -> int:\n    dp = [arr[0]] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    return max(dp)",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: too many values to unpack (expected 2)"
    ],
    "generated_code": "def is_parallel(line1, line2):\n    # Extracting coefficients of x and y from each line equation ax + by = c\n    (a1, b1), (a2, b2) = map(lambda pair: list(pair), zip(*line1))\n    (c1,), (c2,) = map(tuple, zip(*line2))\n\n    # Calculating determinants for both pairs of points on the lines\n    det1 = a1 * b2 - a2 * b1\n    det2 = a2 * b1 - a1 * b2\n\n    # Checking if determinants are equal, which indicates parallel lines\n    return det1 == det2\n\n# Test cases\nprint(is_parallel([[2, 3, 4], [2, 3, 8]], [[2, 3, 4], [4, -3, 8]]))  # Should return True\nprint(is_parallel([[2, 3, 4], [4, -3, 8]], [[4, 3, 0], [4, -3, 8]]))  # Should return False\nprint(is_parallel([[3, 3], [5, 5]], [[3, 3], [5, 5]]))  # Should return True",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def capitalize_first_last_letters(input_string):\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Capitalize the first letter of each word and append '.'\n    capitalized_words = [word[0].upper() + word[1:] + '.' for word in words]\n    \n    # Join the capitalized words back into a single string\n    result = ''.join(capitalized_words)\n    \n    return result",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pairs_count(arr, target_sum, num_to_find):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                # Counting each pair multiple times if it's part of more than one subarray with the same difference\n                if arr[i] == arr[j]:\n                    count += 1\n                else:\n                    count += 2\n    # Adjusting for double counting when two numbers have the same value\n    if num_to_find == target_sum and num_to_find > 0:\n        count -= 1\n    return count\n\n# Test cases\nprint(get_pairs_count([1, 5, 7, -1, 5], 5, 6))  # Expected output: 3\nprint(get_pairs_count([1, 5, 7, -1], 4, 6))     # Expected output: 2\nprint(get_pairs_count([1, 1, 1, 1], 4, 2))      # Expected output: 6",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lst):\n    # Find the shortest list in the given list of lists\n    return min(lst, key=len)\n\n# Example usage and test cases\nprint(min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Expected output: (1, [0])\nprint(min_length([[1], [5, 7], [10, 12, 14,15]]))                # Expected output: (1, [1])\nprint(min_length([[5], [15,20,25]]))                             # Expected output: (1, [5])",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    # Base case for n=0 and n=1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Recursive call with modified parameters\n    return jacobsthal_lucas(n-1) + 2 * jacobsthal_lucas(n-2)",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(arr):\n    return sum(1 for x in arr if x < 0) / len(arr)",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef min_coins(coins: List[int], amount: int, target_amount: int) -> int:\n    dp = [float('inf')] * (target_amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, target_amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[target_amount] if dp[target_amount] != float('inf') else -1",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_permutation' is not defined",
      "Test 2: FAIL - name 'check_permutation' is not defined",
      "Test 3: FAIL - name 'check_permutation' is not defined"
    ],
    "generated_code": "def is_permutation(str1, str2):\n    \"\"\"\n    Check if two strings are permutations of each other.\n    \n    Args:\n    str1 (str): The first string.\n    str2 (str): The second string.\n    \n    Returns:\n    bool: True if the strings are permutations of each other, False otherwise.\n    \"\"\"\n    # Remove spaces and convert both strings to lowercase for case-insensitive comparison\n    str1 = ''.join(str1.split()).lower()\n    str2 = ''.join(str2.split()).lower()\n\n    # Sort the characters in both strings\n    sorted_str1 = sorted(str1)\n    sorted_str2 = sorted(str2)\n\n    # Compare the sorted strings\n    return sorted_str1 == sorted_str2",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(input_tuple, datatype):\n    # Extracting and removing specified data types from the input tuple\n    filtered_elements = [element for element in input_tuple if not isinstance(element, datatype)]\n    return filtered_elements",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test Case 1: (0, 6)",
      "Test Case 2: (7, 18)",
      "Test Case 3: (19, 27)",
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(pattern, text):\n    start = -1\n    while True:\n        start = text.find(pattern, start + 1)\n        if start == -1:\n            break\n        yield start\n\n# Test cases\nfor i, test_case in enumerate([('python', 'python programming language'), ('programming', 'python programming language'), ('language', 'python programming language')], 1):\n    result = next(search_literal(test_case[0], test_case[1]))\n    print(f'Test Case {i}: {(result, result + len(test_case[0]))}')",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\ndef topbottom_surfacearea(radius):\n    \"\"\"\n    Calculate the top and bottom surface areas of a cylinder.\n    \n    Parameters:\n        radius (float): The radius of the cylinder's base.\n        \n    Returns:\n        float: The total surface area including both tops and bottoms.\n    \"\"\"\n    height = 10  # Assuming the height is 10 units for all test cases\n    top_bottom_area = 2 * math.pi * radius**2\n    side_area = 2 * math.pi * radius * height\n    return top_bottom_area + side_area",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(text):\n    # Split the text into words and create a set of seen words\n    seen_words = set()\n    for word in text.split():\n        if word in seen_words:\n            return word\n        else:\n            seen_words.add(word)\n    return None",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'list' object has no attribute 'upper'",
      "Test 2: FAIL - 'list' object has no attribute 'upper'",
      "Test 3: FAIL - 'list' object has no attribute 'upper'"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Join the elements of the list into a single string separated by spaces,\n    # then split it by spaces and convert each element to a character.\n    # Convert all characters in the resulting list to uppercase before returning.\n    result = ''.join(string_list).split()\n    return tuple(result.upper())",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(bases, nums):\n    # Use map function with lambda expression to raise each base in bases to the power of its corresponding num in nums\n    return list(map(lambda x, y: x ** y, bases, nums))",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Diff(arr, n): \n    # Count frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n\n    return max_freq - min_freq",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(number):\n    total_sum = sum([i for i in range(1, int(number/2)+1) if number % i == 0])\n    return total_sum > number\n\n# Test cases\nprint(check_abundant(12))  # Expected output: True\nprint(check_abundant(15))  # Expected output: False\nprint(check_abundant(18))  # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(text):\n    # Replace spaces, commas, and dots with colons\n    result = re.sub(r'[\\s,.]+', ':', text)\n    return result",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(num1, num2):\n    \"\"\"\n    Add two numbers and return the number of digits in their sum.\n    \n    Args:\n    - num1: An integer representing the first number.\n    - num2: An integer representing the second number.\n    \n    Returns:\n    - An integer indicating the number of digits in the sum of num1 and num2.\n    \"\"\"\n    sum_of_numbers = num1 + num2\n    # Convert the sum to a string to count its length which represents the number of digits\n    digit_count = len(str(sum_of_numbers))\n    return digit_count",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_tuple(tuples_list):\n    # Join all elements of the nested tuples into a single string separated by spaces\n    result = ' '.join(str(item) for sublist in tuples_list for item in sublist)\n    return result\n\n# Test cases\nprint(flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]))  # Output: \"1 4 6 5 8 2 9 1 10\"\nprint(flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]))  # Output: \"2 3 4 6 9 3 2 2 11\"\nprint(flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]))  # Output: \"14 21 9 24 19 12 29 23 17\"",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Toggle the first and last bits of n\n    return ((n >> 1) | (n << 1)) & ~((1 << 1) - 1)\n\n# Test the function with provided data points\nassert toggle_F_and_L_bits(10) == 3, \"Test case 1 failed\"\nassert toggle_F_and_L_bits(15) == 6, \"Test case 2 failed\"\nassert toggle_F_and_L_bits(20) == 5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, char):\n    try:\n        return s.rindex(char)\n    except ValueError:\n        return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Total_Hamming_Distance(n):\n    total_distance = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            distance = bin(j^i)[2:].count('1')\n            total_distance += distance\n    return total_distance",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    \n    n = len(sequence)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Test Cases\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))  # Expected output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20]))  # Expected output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80]))  # Expected output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    result = 0\n    for i in range(1, n + 1):\n        # Calculate the ith odd number\n        odd_number = 2 * i - 1\n        # Add its fifth power to the result\n        result += pow(odd_number, 5)\n    return result",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max(nums, start, end):\n    # Base case: if the array contains only one element, return that element\n    if start == end:\n        return nums[start]\n    \n    mid = (start + end) // 2\n    \n    # If the middle element is greater than the last element,\n    # the left half of the array is sorted.\n    if nums[mid] > nums[end]:\n        return find_Max(nums, start, mid)\n    \n    # Otherwise, the right half of the array is sorted.\n    else:\n        return find_Max(nums, mid + 1, end)\n\n# Example usage\nnums1 = [2,3,5,6,9]\nresult1 = find_Max(nums1, 0, len(nums1)-1)\nprint(result1)  # Output: 9\n\nnums2 = [3,4,5,2,1]\nresult2 = find_Max(nums2, 0, len(nums2)-1)\nprint(result2)  # Output: 5\n\nnums3 = [1,2,3]\nresult3 = find_Max(nums3, 0, len(nums3)-1)\nprint(result3)  # Output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(nested_list, index):\n    return [sublist[index] for sublist in nested_list]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(seq):\n    # Check if the sequence has more than one element and every pair of consecutive elements differ by 2.\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i-1] != 2:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\"\n\n# Test Cases\nprint(Seq_Linear([0,2,4,6,8,10]))  # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,2,3]))         # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,5,2]))         # Expected output: \"Non Linear Sequence\"",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and sum them up\n    result = sum(float(i) for i in tup)\n    return result\n\n# Test cases\nprint(tuple_to_float((4, 56)))  # Expected output: 4.56\nprint(tuple_to_float((7, 256))) # Expected output: 7.256\nprint(tuple_to_float((8, 123))) # Expected output: 8.123",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    result = []\n    for i in lst:\n        if i % 2 != 0:\n            result.append(i)\n    return result",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers using the formula for sum of cubes\n    sum_cubes = n * (n + 1) * (2*n + 1)\n    \n    # Calculate the sum of first n natural numbers using the formula for sum of first n natural numbers\n    sum_numbers = n * (n + 1) / 2\n    \n    # Return the difference between the two sums\n    return int(sum_cubes - sum_numbers)\n\n# Test cases\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n\nprint(\"All tests passed successfully.\")",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Odd_Pair(arr, target):\n    \"\"\"\n    Count the number of unique pairs in the array whose XOR is odd.\n    \n    Parameters:\n    arr (list): The input list of integers.\n    target (int): The target value for which we want to find the number of pairs that have XOR equal to target.\n    \n    Returns:\n    int: The number of unique pairs with XOR equal to the target value.\n    \"\"\"\n    # Initialize a set to store unique pairs and their counts\n    pair_counts = {}\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Calculate the XOR of two elements\n            xor_val = arr[i] ^ arr[j]\n            \n            # If the XOR value matches the target and the pair has not been counted before\n            if xor_val == target and (xor_val, min(arr[i], arr[j]), max(arr[i], arr[j])) not in pair_counts:\n                pair_counts[(xor_val, min(arr[i], arr[j]), max(arr[i], arr[j]))] = 1\n            elif xor_val == target and (xor_val, max(arr[i], arr[j]), min(arr[i], arr[j])) not in pair_counts:\n                pair_counts[(xor_val, max(arr[i], arr[j]), min(arr[i], arr[j]))] = 1\n    \n    # Return the total count of pairs with XOR equal to the target\n    return sum(pair_counts.values())\n\n# Example check function calls\nprint(find_Odd_Pair([5,4,7,2,1], 5))  # Expected output: 6\nprint(find_Odd_Pair([7,2,8,1,0,5,11], 7))  # Expected output: 12\nprint(find_Odd_Pair([1,2,3], 3))  # Expected output: 2",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def digit_distance_nums(num1, num2):\n    # Convert both numbers to strings and concatenate them\n    concatenated_str = str(num1) + str(num2)\n    # Calculate the total number of digits in the concatenated string\n    total_digits = len(concatenated_str)\n    \n    # Initialize the sum of distances\n    distance_sum = 0\n    \n    # Iterate through each character in the concatenated string\n    for i in range(total_digits):\n        # Extract the current character from the first number\n        char1 = str(num1)[i % len(str(num1))]\n        \n        # Extract the current character from the second number\n        char2 = str(num2)[i % len(str(num2))]\n        \n        # Calculate the absolute difference between characters\n        distance_sum += abs(ord(char1) - ord(char2))\n    \n    return distance_sum",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sub_array_sum(arr: List[int]) -> int:\n    current_max = global_max = arr[0]\n    for num in arr[1:]:\n        current_max = max(num, current_max + num)\n        global_max = max(global_max, current_max)\n    return global_max",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(*args):\n    result = set()\n    for tup in args:\n        result.update(set(tup))\n    return tuple(result)\n\n# Test cases\nprint(union_elements((3, 4, 5, 6), (5, 7, 4, 10))) # Expected output: (3, 4, 5, 6, 7, 10)\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))   # Expected output: (1, 2, 3, 4, 5, 6)\nprint(union_elements((11, 12, 13, 14), (13, 15, 16, 17))) # Expected output: (11, 12, 13, 14, 15, 16, 17)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(tuples_list):\n    result = {}\n    for t in tuples_list:\n        first, second = t[0], t[1]\n        if second not in result:\n            result[second] = []\n        if first not in result:\n            result[first] = []\n        result[second].append(first)\n    return result\n\n# Test cases\nprint(assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)]))  # Output: {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nprint(assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)]))  # Output: {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nprint(assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)]))  # Output: {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max_Length' is not defined",
      "Test 2: FAIL - name 'Find_Max_Length' is not defined",
      "Test 3: FAIL - name 'Find_Max_Length' is not defined"
    ],
    "generated_code": "def find_max_length(lst):\n    max_len = 0\n    for sublst in lst:\n        if len(sublst) > max_len:\n            max_len = len(sublst)\n    return max_len",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_values(str_list):\n    return [s.strip('\"') for s in str_list]\n\n# Test cases\nassert extract_values(['\"Python\"', '\"PHP\"', '\"Java\"']) == ['Python', 'PHP', 'Java'], \"Test case 1 failed\"\nassert extract_values(['\"python\"', '\"program\"', '\"language\"']) == ['python', 'program', 'language'], \"Test case 2 failed\"\nassert extract_values(['\"red\"', '\"blue\"', '\"green\"', '\"yellow\"']) == ['red', 'blue', 'green', 'yellow'], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s):\n    return list(s)\n\n# Test cases\nprint(split('python'))  # Should print: ['p', 'y', 't', 'h', 'o', 'n']\nprint(split('Name'))   # Should print: ['N', 'a', 'm', 'e']\nprint(split('program'))  # Should print: ['p', 'r', 'o', 'g', 'r', 'a', 'm']",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(number):\n    return sum(int(digit) for digit in str(number))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    return lst == sorted(lst)",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(word_list, chars_to_remove):\n    # Remove all instances of characters in chars_to_remove from each word in word_list\n    for char in chars_to_remove:\n        if char in word_list[0]:\n            while True:\n                index = word_list[0].find(char)\n                if index == -1:\n                    break\n                else:\n                    word_list[0] = word_list[0][:index] + word_list[0][index+1:]\n    return word_list\n\n# Test cases\nprint(remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@'])) # Output: ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@'])) # Output: ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@'])) # Output: ['Red &', 'Orange+', 'Green', 'Orange', 'White']",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_pair_diff_lessthan_K(arr: List[int], n: int, k: int) -> int:\n    arr.sort()\n    ans = sum(arr[:n])\n    \n    left, right = 0, n - 1\n    \n    while left < right:\n        if arr[left] + arr[right] <= k:\n            ans -= arr[left]\n            ans += arr[right]\n            left += 1\n            right -= 1\n        else:\n            break\n            \n    return ans",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def two_unique_nums(nums_list):\n    # Create a set to store unique elements and another list to store result\n    unique_set = set()\n    result = []\n    \n    for num in nums_list:\n        if num not in unique_set:\n            unique_set.add(num)\n            result.append(num)\n            \n    return result",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef unique_product(nums: List[int]) -> int:\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    \n    result = 1\n    for num in unique_nums:\n        result *= num\n    \n    return result\n\n# Test cases\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))  # Output: 720000000\nprint(unique_product([1, 2, 3, 1]))                    # Output: 6\nprint(unique_product([7, 8, 9, 0, 1, 1]))              # Output: 0",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\nfrom sympy import pi\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculate the total surface area of a cylinder.\n    \n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n    \n    Returns:\n    float: The total surface area of the cylinder.\n    \"\"\"\n    top_bottom_area = 2 * pi * radius**2\n    side_area = 2 * pi * radius * height\n    return top_bottom_area + side_area\n\n# Test cases to verify the correctness of the function\nassert round(surfacearea_cylinder(10,5), 2) == 942.45\nassert round(surfacearea_cylinder(4,5), 2) == 226.19\nassert round(surfacearea_cylinder(4,10), 2) == 351.85",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def count_no(n, k, m, n_count):\n    \"\"\"\n    Function to count numbers from 'm' onwards which are not multiples of 'k'.\n    \n    Parameters:\n    n (int): The target position.\n    k (int): The divisor for checking multiples.\n    m (int): Starting point for counting (inclusive).\n    n_count (int): Current position in the series.\n    \n    Returns:\n    int: The count of numbers not being multiples of 'k' up to 'n'.\n    \"\"\"\n    i = m\n    while True:\n        if i % k != 0 and n_count >= len(range(m, min(i + 1, n))):\n            break\n        i += 1\n        n_count += 1\n    return n_count\n\n# Check function with provided data points\nassert count_no(2, 3, 1, 10) == 5\nassert count_no(3, 6, 4, 20) == 11\nassert count_no(5, 10, 4, 20) == 16\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Sub_Array' is not defined",
      "Test 2: FAIL - name 'is_Sub_Array' is not defined",
      "Test 3: FAIL - name 'is_Sub_Array' is not defined"
    ],
    "generated_code": "def is_sub_array(arr1, arr2, n1, n2):\n    # Check if the lengths match and both arrays have at least one element\n    if len(arr1) != len(arr2) or len(arr1) < 1 or len(arr2) < 1:\n        return False\n    \n    i = j = 0\n    while i < n1 and j < n2:\n        # Move index j forward until it matches with the current element in arr1\n        while j < n2 and arr2[j] != arr1[i]:\n            j += 1\n        \n        # If all elements match, return True\n        if j >= n2:\n            return True\n        \n        # Increment index i for next iteration\n        i += 1\n        # Reset j to start from beginning after matching each element in arr1\n        j = 0\n    \n    # If the loop completes without returning True, return False\n    return False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Calculate n! and return its last digit.\n    result = reduce(lambda x, y: x * y % 10, range(1, n + 1))\n    return result",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "from itertools import chain\n\ndef interleave_lists(list1, list2, list3):\n    # Chain all input lists together and then zip them with indices\n    zipped = list(zip(chain.from_iterable(list1), chain.from_iterable(list2), chain.from_iterable(list3)))\n    # Sort by index and return interleaved values\n    result = [item for _, item in sorted(zipped)]\n    return result",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tuple_a, tuple_b):\n    return tuple(set(tuple_a) ^ set(tuple_b))\n\n# Test cases\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 6, 7, 10)\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))  # Expected output: (1, 4, 7, 9)\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Expected output: (34, 36, 11, 25)",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))  # Expected output: (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9)))  # Expected output: (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10)))  # Expected output: (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def surface_area_of_square_pyramid(side_length, base_edge):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n    \n    Parameters:\n    side_length (int): The length of one side of the base of the square pyramid.\n    base_edge (int): The length of the edges connecting the base vertices to the apex of the square pyramid.\n    \n    Returns:\n    int: The total surface area of the square pyramid.\n    \"\"\"\n    # Area of the base\n    base_area = pow(base_edge, 2)\n    # Area of four triangular faces\n    lateral_face_area = 4 * ((side_length**2) / 2)\n    # Total surface area\n    total_surface_area = base_area + lateral_face_area\n    return total_surface_area\n\n# Test cases\nassert surface_area_of_square_pyramid(3, 4) == 33\nassert surface_area_of_square_pyramid(4, 5) == 56\nassert surface_area_of_square_pyramid(1, 2) == 5\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(test_dict):\n    # Check if the dictionary is empty\n    return len(test_dict) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using dynamic programming.\n    \n    Parameters:\n    n (int): The index of the Catalan number to calculate\n    \n    Returns:\n    int: The nth Catalan number\n    \"\"\"\n    if n == 0:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n\n# Test cases to verify the correctness of the solution\nprint(catalan_number(10)) # Expected output: 16796\nprint(catalan_number(9))  # Expected output: 4862\nprint(catalan_number(7))  # Expected output: 429",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    # Regular expression pattern to match adverbs and extract their positions\n    pattern = r'\\b[^\\w]*\\w*ly\\b|\\b[^\\w]*\\w*[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, sentence)\n    \n    result = []\n    for i, word in enumerate(matches):\n        if not word:\n            continue\n        start_index = sentence.find(word)\n        end_index = start_index + len(word) - 1\n        \n        result.append(f'{start_index}-{end_index}: {word}')\n    \n    return '\\n'.join(result)\n\n# Test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))  # Output: 0-7: Clearly\nprint(find_adverbs(\"Please handle the situation carefully\"))  # Output: 28-36: carefully\nprint(find_adverbs(\"Complete the task quickly\"))  # Output: 18-25: quickly",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef expensive_items(data,n):\n    # Use heapq.nlargest to get the n most expensive items from the list of dictionaries.\n    return heapq.nlargest(n, data, key=lambda x: x['price'])\n\n# Example usage:\ndata = [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}]\nn = 1\nprint(expensive_items(data,n))",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_Arr(arr, n, k):\n    return arr[k:] + arr[:k]\n\n# Test cases\nprint(split_Arr([12,10,5,6,52,36], 6, 2))  # Output: [5, 6, 52, 36, 12, 10]\nprint(split_Arr([1,2,3,4], 4, 1))         # Output: [2, 3, 4, 1]\nprint(split_Arr([0,1,2,3,4,5,6,7], 8, 3))  # Output: [3, 4, 5, 6, 7, 0, 1, 2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test cases\nprint(list_tuple([5, 10, 7, 4, 15, 3])) # Expected output: (5, 10, 7, 4, 15, 3)\nprint(list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])) # Expected output: (2, 4, 5, 6, 2, 3, 4, 4, 7)\nprint(list_tuple([58, 44, 56])) # Expected output: (58, 44, 56)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perfect_squares(start_num, end_num):\n    \"\"\"\n    This function takes two integers start_num and end_num as input.\n    It returns a list of all perfect square numbers within the range [start_num, end_num].\n    \n    Example usage:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    >>> perfect_squares(50, 100)\n    [64, 81, 100]\n    >>> perfect_squares(100, 200)\n    [100, 121, 144, 169, 196]\n    \"\"\"\n    return [i**2 for i in range(int(start_num**0.5), int(end_num**0.5)+1)]\n\n# Test cases to verify the correctness of the solution\nprint(perfect_squares(1, 30))  # Expected output: [1, 4, 9, 16, 25]\nprint(perfect_squares(50, 100))  # Expected output: [64, 81, 100]\nprint(perfect_squares(100, 200))  # Expected output: [100, 121, 144, 169, 196]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \n    Args:\n    r (float): The radial distance from the origin in polar coordinates.\n    theta (float): The angle in radians formed by the line connecting the point with the origin and the positive x-axis.\n    \n    Returns:\n    tuple: A tuple containing two elements - first is the rectangular form of x coordinate, second is the rectangular form of y coordinate.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)\n\n# Test cases\nprint(polar_rect(3, 4)) # Expected output: ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nprint(polar_rect(4, 7)) # Expected output: ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nprint(polar_rect(15, 17)) # Expected output: ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first and last elements of the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test cases\nprint(swap_List([12, 35, 9, 56, 24]))  # Expected output: [24, 35, 9, 56, 12]\nprint(swap_List([1, 2, 3]))            # Expected output: [3, 2, 1]\nprint(swap_List([4, 5, 6]))            # Expected output: [6, 5, 4]",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_product' is not defined",
      "Test 2: FAIL - name 'sum_Of_product' is not defined",
      "Test 3: FAIL - name 'sum_Of_product' is not defined"
    ],
    "generated_code": "def sum_of_product(n):\n    # Initialize variables for storing the result and intermediate values\n    total = 0\n    temp_sum = 1\n    \n    # Calculate the sum using the given formula\n    for i in range(n + 1):\n        temp_sum *= (-1)\n        total += temp_sum * (binomial_coefficient(i) ** 2)\n    \n    return int(total)\n\n# Helper function to calculate binomial coefficient\nfrom math import comb\n\ndef binomial_coefficient(n):\n    return comb(n, n // 2)\n\n# Test cases\nprint(sum_of_product(3))  # Expected output: 15\nprint(sum_of_product(4))  # Expected output: 56\nprint(sum_of_product(1))  # Expected output: 1",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def removezero_ip(ip):\n    # Split the IP address into individual octets\n    octets = ip.split('.')\n    # Remove trailing zeroes in each octet\n    for i in range(len(octets)):\n        if int(octets[i]) == 0:\n            continue\n        else:\n            # If not all zeroes, convert back to string and join with dots\n            return '.'.join([str(int(octets[i]))])\n    # If no zeroes found, simply return the original IP as it has already been cleaned up\n    return ip",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(nums):\n    # Calculate sum of all numbers in the list\n    total_sum = sum(nums)\n    \n    # Filter out odd numbers and calculate their sum\n    odd_sum = sum(num for num in nums if num % 2 != 0)\n    \n    # Subtract odd_sum from total_sum to get result\n    return total_sum - odd_sum",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    # Check if lengths of both strings are different\n    if len(s1) != len(s2):\n        return 'Not Possible'\n    \n    diff = sum(a != b for a, b in zip(s1, s2))\n    \n    # If differences are more than half of total characters, it's not possible\n    if diff > len(s1) // 2:\n        return 'Not Possible'\n    \n    return diff // 2",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(input_tuple):\n    # Calculate the size of the input tuple and compare it with the expected value from sys.getsizeof()\n    return sys.getsizeof(input_tuple)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_kth(arr1, arr2, n1, n2, k):\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n    \n    mid1 = n1 // 2\n    mid2 = n2 // 2\n    \n    if k <= mid1 + mid2:\n        if arr1[mid1] < arr2[mid2]:\n            return find_kth(arr1[mid1+1:], arr2[:mid2], n1-mid1, n2, k - mid1 - mid2)\n        else:\n            return find_kth(arr1[:mid1], arr2[mid2+1:], n1, n2-mid2, k - mid1 - mid2)\n    else:\n        if arr1[n1-1] < arr2[n2-1]:\n            return find_kth(arr1[:n1//2], arr2, n1//2, n2, k)\n        else:\n            return find_kth(arr1[n1//2:], arr2[:n2//2], n1-n1//2, n2-n2//2, k)\n\n# Test Cases\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5))  # Output: 6\nprint(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7))  # Output: 256\nprint(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6))  # Output: 8",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(num):\n    # Convert the number to string to iterate over each digit\n    num_str = str(num)\n    n = len(num_str)\n    \n    # Calculate sum of digits raised to the power of the number of digits\n    total_sum = sum([int(digit) ** n for digit in num_str])\n    \n    return total_sum == num",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    avg = total_sum / n\n    return (total_sum, avg)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Even(num):\n    # Check if the least significant bit of num is set (i.e., it's odd)\n    return num & 1 == 1\n\n# Test cases\nprint(is_Even(1))   # Expected output: False\nprint(is_Even(2))   # Expected output: True\nprint(is_Even(3))   # Expected output: False",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]